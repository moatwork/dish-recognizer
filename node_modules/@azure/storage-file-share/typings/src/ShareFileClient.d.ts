/// <reference types="node" />
import { HttpRequestBody, HttpResponse, TransferProgressEvent } from "@azure/core-http";
import { AbortSignalLike } from "@azure/abort-controller";
import { FileAbortCopyResponse, FileCreateResponse, FileDeleteResponse, FileDownloadResponseModel, FileForceCloseHandlesResponse, FileGetPropertiesResponse, FileGetRangeListHeaders, FileListHandlesResponse, FileSetHTTPHeadersResponse, FileSetMetadataResponse, FileStartCopyResponse, SourceModifiedAccessConditions, FileUploadRangeFromURLResponse, FileUploadRangeResponse, HandleItem, RangeModel } from "./generatedModels";
import { Range } from "./Range";
import { FileHttpHeaders, Metadata, FileAndDirectoryCreateCommonOptions, FileAndDirectorySetPropertiesCommonOptions } from "./models";
import { StoragePipelineOptions, Pipeline } from "./Pipeline";
import { StorageClient, CommonOptions } from "./StorageClient";
import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Credential } from "./credentials/Credential";
import { Readable } from "stream";
/**
 * Options to configure File - Create operation.
 *
 * @export
 * @interface FileCreateOptions
 */
export interface FileCreateOptions extends FileAndDirectoryCreateCommonOptions, CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * File HTTP headers like Content-Type.
     *
     * @type {FileHttpHeaders}
     * @memberof FileCreateOptions
     */
    fileHttpHeaders?: FileHttpHeaders;
    /**
     * A collection of key-value string pair to associate with the file storage object.
     *
     * @type {Metadata}
     * @memberof FileCreateOptions
     */
    metadata?: Metadata;
}
export interface FileProperties extends FileAndDirectorySetPropertiesCommonOptions, CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileProperties
     */
    abortSignal?: AbortSignalLike;
    /**
     * File HTTP headers like Content-Type.
     *
     * @type {FileHttpHeaders}
     * @memberof FileProperties
     */
    fileHttpHeaders?: FileHttpHeaders;
}
export interface SetPropertiesResponse extends FileSetHTTPHeadersResponse {
}
/**
 * Options to configure File - Delete operation.
 *
 * @export
 * @interface FileDeleteOptions
 */
export interface FileDeleteOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - Download operation.
 *
 * @export
 * @interface FileDownloadOptions
 */
export interface FileDownloadOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Optional. ONLY AVAILABLE IN NODE.JS.
     *
     * How many retries will perform when original body download stream unexpected ends.
     * Above kind of ends will not trigger retry policy defined in a pipeline,
     * because they doesn't emit network errors.
     *
     * With this option, every additional retry means an additional ShareFileClient.download() request will be made
     * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.
     *
     * Default value is 5, please set a larger value when loading large files in poor network.
     *
     * @type {number}
     * @memberof FileDownloadOptions
     */
    maxRetryRequests?: number;
    /**
     * When this header is set to true and
     * specified together with the Range header, the service returns the MD5 hash
     * for the range, as long as the range is less than or equal to 4 MB in size.
     *
     * @type {boolean}
     * @memberof FileDownloadOptions
     */
    rangeGetContentMD5?: boolean;
    /**
     * Download progress updating event handler.
     *
     * @memberof FileDownloadOptions
     */
    onProgress?: (progress: TransferProgressEvent) => void;
}
/**
 * Options to configure File - Upload Range operation.
 *
 * @export
 * @interface FileUploadRangeOptions
 */
export interface FileUploadRangeOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * An MD5 hash of the content. This hash is
     * used to verify the integrity of the data during transport. When the
     * Content-MD5 header is specified, the File service compares the hash of the
     * content that has arrived with the header value that was sent. If the two
     * hashes do not match, the operation will fail with error code 400 (Bad
     * Request).
     *
     * @type {Uint8Array}
     * @memberof FileUploadRangeOptions
     */
    contentMD5?: Uint8Array;
    /**
     * Progress updating event handler.
     *
     * @memberof FileUploadRangeOptions
     */
    onProgress?: (progress: TransferProgressEvent) => void;
}
/**
 * Options to configure File - Upload Range from URL operation.
 *
 * @export
 * @interface FileUploadRangeFromURLOptions
 */
export interface FileUploadRangeFromURLOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileUploadRangeFromURLOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * The timeout parameter is expressed in seconds. For more information, see <a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
     * Timeouts for File Service Operations.</a>
     */
    timeoutInSeconds?: number;
    /**
     * Specify the crc64 calculated for the range of bytes that must be read from the copy source.
     */
    sourceContentCrc64?: Uint8Array;
    /**
     * Additional parameters for the operation
     */
    sourceConditions?: SourceModifiedAccessConditions;
}
/**
 * The option is defined as parity to REST definition.
 * While it's not ready to be used now, considering Crc64 of source content is
 * not accessible.
 */
/**
 * Options to configure File - Get Range List operation.
 *
 * @export
 * @interface FileGetRangeListOptions
 */
export interface FileGetRangeListOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Optional. Specifies the range of bytes over which to list ranges, inclusively.
     *
     * @type {Range}
     * @memberof FileGetRangeListOptions
     */
    range?: Range;
}
/**
 * Options to configure File - Get Properties operation.
 *
 * @export
 * @interface FileGetPropertiesOptions
 */
export interface FileGetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof AppendBlobCreateOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the getRangeList operation.
 */
export declare type FileGetRangeListResponse = FileGetRangeListHeaders & {
    /**
     * Range list for an Azure file.
     *
     * @type {RangeModel[]}
     */
    rangeList: RangeModel[];
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: FileGetRangeListHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: RangeModel[];
    };
};
/**
 * Options to configure File - Start Copy operation.
 *
 * @export
 * @interface FileStartCopyOptions
 */
export interface FileStartCopyOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileStartCopyOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * A collection of key-value string pair to associate with the file storage object.
     *
     * @type {Metadata}
     * @memberof FileCreateOptions
     */
    metadata?: Metadata;
}
/**
 * Options to configure File - Set Metadata operation.
 *
 * @export
 * @interface FileSetMetadataOptions
 */
export interface FileSetMetadataOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileSetMetadataOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - HTTP Headers operation.
 *
 * @export
 * @interface FileSetHttpHeadersOptions
 */
export interface FileSetHttpHeadersOptions extends FileAndDirectorySetPropertiesCommonOptions, CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileSetHttpHeadersOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - Abort Copy From URL operation.
 *
 * @export
 * @interface FileAbortCopyFromURLOptions
 */
export interface FileAbortCopyFromURLOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileAbortCopyFromURLOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - Resize operation.
 *
 * @export
 * @interface FileResizeOptions
 */
export interface FileResizeOptions extends FileAndDirectorySetPropertiesCommonOptions, CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileResizeOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - Clear Range operation.
 *
 * @export
 * @interface FileClearRangeOptions
 */
export interface FileClearRangeOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileClearRangeOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - File List Handles Segment.
 *
 * @export
 * @interface FileListHandlesSegmentOptions
 */
export interface FileListHandlesSegmentOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileClearRangeOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Specifies the maximum number of entries to return. If the request does not specify maxResults,
     * or specifies a value greater than 5,000, the server will return up to 5,000 items.
     *
     * @type {number}
     * @memberof FileListHandlesSegmentOptions
     */
    maxPageSize?: number;
}
export interface FileListHandlesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileClearRangeOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Options to configure File - File Force Close Handles Options.
 *
 * @export
 * @interface FileForceCloseHandlesOptions
 */
export interface FileForceCloseHandlesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileForceCloseHandlesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Option interface for ShareFileClient.uploadStream().
 *
 * @export
 * @interface FileUploadStreamOptions
 */
export interface FileUploadStreamOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileUploadStreamOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Azure File HTTP Headers.
     *
     * @type {FileHttpHeaders}
     * @memberof FileUploadStreamOptions
     */
    fileHttpHeaders?: FileHttpHeaders;
    /**
     * Metadata of the Azure file.
     *
     * @type {Metadata}
     * @memberof FileUploadStreamOptions
     */
    metadata?: Metadata;
    /**
     * Progress updater.
     *
     * @memberof FileUploadStreamOptions
     */
    onProgress?: (progress: TransferProgressEvent) => void;
}
/**
 * Option interface for ShareFileClient.uploadFile() and ShareFileClient.uploadSeekableStream().
 *
 * @export
 * @interface FileParallelUploadOptions
 */
export interface FileParallelUploadOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileParallelUploadOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * RangeSize specifies the range size to use in each parallel upload,
     * the default (and maximum size) is FILE_RANGE_MAX_SIZE_BYTES.
     *
     * @type {number}
     * @memberof FileParallelUploadOptions
     */
    rangeSize?: number;
    /**
     * Progress updater.
     *
     * @memberof FileParallelUploadOptions
     */
    onProgress?: (progress: TransferProgressEvent) => void;
    /**
     * File HTTP Headers.
     *
     * @type {FileHttpHeaders}
     * @memberof FileParallelUploadOptions
     */
    fileHttpHeaders?: FileHttpHeaders;
    /**
     * Metadata of an Azure file.
     *
     * @type {Metadata}
     * @memberof FileParallelUploadOptions
     */
    metadata?: Metadata;
    /**
     * Concurrency indicates the maximum number of ranges to upload in parallel.
     * If not provided, 5 concurrency will be used by default.
     *
     * @type {number}
     * @memberof FileParallelUploadOptions
     */
    concurrency?: number;
}
/**
 * Option interface for DownloadAzurefileToBuffer.
 *
 * @export
 * @interface FileDownloadToBufferOptions
 */
export interface FileDownloadToBufferOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof FileDownloadToBufferOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * When downloading Azure files, download method will try to split large file into small ranges.
     * Every small range will be downloaded via a separte request.
     * This option defines size data every small request trying to download.
     * Must be > 0, will use the default value if undefined,
     *
     * @type {number}
     * @memberof FileDownloadToBufferOptions
     */
    rangeSize?: number;
    /**
     * Optional. ONLY AVAILABLE IN NODE.JS.
     *
     * How many retries will perform when original range download stream unexpected ends.
     * Above kind of ends will not trigger retry policy defined in a pipeline,
     * because they doesn't emit network errors.
     *
     * With this option, every additional retry means an additional ShareFileClient.download() request will be made
     * from the broken point, until the requested range has been successfully downloaded or
     * maxRetryRequestsPerRange is reached.
     *
     * Default value is 5, please set a larger value when in poor network.
     *
     * @type {number}
     * @memberof FileDownloadToBufferOptions
     */
    maxRetryRequestsPerRange?: number;
    /**
     * Progress updater.
     *
     * @memberof FileDownloadToBufferOptions
     */
    onProgress?: (progress: TransferProgressEvent) => void;
    /**
     * Concurrency indicates the maximum number of ranges to download in parallel.
     * If not provided, 5 concurrency will be used by default.
     *
     * @type {number}
     * @memberof FileDownloadToBufferOptions
     */
    concurrency?: number;
}
/**
 * A ShareFileClient represents a URL to an Azure Storage file.
 *
 * @export
 * @class ShareFileClient
 */
export declare class ShareFileClient extends StorageClient {
    /**
     * context provided by protocol layer.
     *
     * @private
     * @type {File}
     * @memberof ShareFileClient
     */
    private context;
    private _shareName;
    private _path;
    readonly shareName: string;
    readonly path: string;
    /**
     * Creates an instance of ShareFileClient.
     *
     * @param {string} url A URL string pointing to Azure Storage file, such as
     *                     "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
     *                     This method accepts an encoded URL or non-encoded URL pointing to a file.
     *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     *                     However, if a file or directory name includes %, file or directory name must be encoded in the URL.
     *                     Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
     * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.
     *                                  If not specified, AnonymousCredential is used.
     * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.
     * @memberof ShareFileClient
     */
    constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);
    /**
     * Creates an instance of ShareFileClient.
     *
     * @param {string} url A URL string pointing to Azure Storage file, such as
     *                     "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
     *                     This method accepts an encoded URL or non-encoded URL pointing to a file.
     *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     *                     However, if a file or directory name includes %, file or directory name must be encoded in the URL.
     *                     Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof ShareFileClient
     */
    constructor(url: string, pipeline: Pipeline);
    /**
     * Creates a new file or replaces a file. Note it only initializes the file with no content.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
     *
     * @param {number} size Specifies the maximum size in bytes for the file, up to 1 TB.
     * @param {FileCreateOptions} [options] Options to File Create operation.
     * @returns {Promise<FileCreateResponse>} Response data for the File Create  operation.
     * @memberof ShareFileClient
     */
    create(size: number, options?: FileCreateOptions): Promise<FileCreateResponse>;
    /**
     * Reads or downloads a file from the system, including its metadata and properties.
     *
     * * In Node.js, data returns in a Readable stream `readableStreamBody`
     * * In browsers, data returns in a promise `blobBody`
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
     *
     * @param {number} [offset] From which position of the file to download, >= 0
     * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined
     * @param {FileDownloadOptions} [options] Options to File Download operation.
     * @returns {Promise<FileDownloadResponse>} Response data for the File Download operation.
     * @memberof ShareFileClient
     */
    download(offset?: number, count?: number, options?: FileDownloadOptions): Promise<FileDownloadResponseModel>;
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties
     * for the file. It does not return the content of the file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties
     *
     * @param {FileGetPropertiesOptions} [options] Options to File Get Properties operation.
     * @returns {Promise<FileGetPropertiesResponse>} Response data for the File Get Properties operation.
     * @memberof ShareFileClient
     */
    getProperties(options?: FileGetPropertiesOptions): Promise<FileGetPropertiesResponse>;
    /**
     * Sets properties on the file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
     *
     * @param {FileProperties} [properties] File properties. For file HTTP headers(e.g. Content-Type),
     *                                       if no values are provided, existing HTTP headers will be removed.
     *                                       For other file properties(e.g. fileAttributes), if no values are provided,
     *                                       existing values will be preserved.
     * @returns {Promise<SetPropertiesResponse>}
     * @memberof ShareFileClient
     */
    setProperties(properties?: FileProperties): Promise<SetPropertiesResponse>;
    /**
     * Removes the file from the storage account.
     * When a file is successfully deleted, it is immediately removed from the storage
     * account's index and is no longer accessible to clients. The file's data is later
     * removed from the service during garbage collection.
     *
     * Delete File will fail with status code 409 (Conflict) and error code SharingViolation
     * if the file is open on an SMB client.
     *
     * Delete File is not supported on a share snapshot, which is a read-only copy of
     * a share. An attempt to perform this operation on a share snapshot will fail with 400 (InvalidQueryParameterValue)
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
     *
     * @param {FileDeleteOptions} [options] Options to File Delete operation.
     * @returns {Promise<FileDeleteResponse>} Response data for the File Delete operation.
     * @memberof ShareFileClient
     */
    delete(options?: FileDeleteOptions): Promise<FileDeleteResponse>;
    /**
     * Sets HTTP headers on the file.
     *
     * If no option provided, or no value provided for the file HTTP headers in the options,
     * these file HTTP headers without a value will be cleared.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
     *
     * @param {fileHttpHeaders} [FileHttpHeaders] File HTTP headers like Content-Type.
     *                                             Provide undefined will remove existing HTTP headers.
     * @param {FileSetHttpHeadersOptions} [options] Options to File Set HTTP Headers operation.
     * @returns {Promise<FileSetHTTPHeadersResponse>} Response data for the File Set HTTP Headers operation.
     * @memberof ShareFileClient
     */
    setHttpHeaders(fileHttpHeaders?: FileHttpHeaders, options?: FileSetHttpHeadersOptions): Promise<FileSetHTTPHeadersResponse>;
    /**
     * Resize file.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
     *
     * @param {number} length Resizes a file to the specified size in bytes.
     *                        If the specified byte value is less than the current size of the file,
     *                        then all ranges above the specified byte value are cleared.
     * @param {FileResizeOptions} [options] Options to File Resize operation.
     * @returns {Promise<FileSetHTTPHeadersResponse>} Response data for the File Set HTTP Headers operation.
     * @memberof ShareFileClient
     */
    resize(length: number, options?: FileResizeOptions): Promise<FileSetHTTPHeadersResponse>;
    /**
     * Updates user-defined metadata for the specified file.
     *
     * If no metadata defined in the option parameter, the file
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
     *
     * @param {Metadata} [metadata] If no metadata provided, all existing directory metadata will be removed
     * @param {FileSetMetadataOptions} [options] Options to File Set Metadata operation.
     * @returns {Promise<FileSetMetadataResponse>} Response data for the File Set Metadata operation.
     * @memberof ShareFileClient
     */
    setMetadata(metadata?: Metadata, options?: FileSetMetadataOptions): Promise<FileSetMetadataResponse>;
    /**
     * Upload a range of bytes to a file. Both the start and count of the
     * range must be specified. The range can be up to 4 MB in size.
     *
     * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param {number} offset Offset position of the destination Azure File to upload.
     * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param {FileUploadRangeOptions} [options={}] Options to File Upload Range operation.
     * @returns {Promise<FileUploadRangeResponse>} Response data for the File Upload Range operation.
     * @memberof ShareFileClient
     */
    uploadRange(body: HttpRequestBody, offset: number, contentLength: number, options?: FileUploadRangeOptions): Promise<FileUploadRangeResponse>;
    /**
     * Upload a range of bytes to a file where the contents are read from a another file's URL.
     * The range can be up to 4 MB in size.
     *
     * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication.
     * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source file.
     * @param {number} destOffset Offset of destination file.
     * @param {number} count Number of bytes to be uploaded from source file.
     * @param {FileUploadRangeFromURLOptions} [options={}] Options to configure File - Upload Range from URL operation.
     * @returns {Promise<FileUploadRangeFromURLResponse>}
     * @memberof FileURL
     */
    uploadRangeFromURL(sourceURL: string, sourceOffset: number, destOffset: number, count: number, options?: FileUploadRangeFromURLOptions): Promise<FileUploadRangeFromURLResponse>;
    /**
     * Clears the specified range and
     * releases the space used in storage for that range.
     *
     * @param {number} offset
     * @param {number} contentLength
     * @param {FileClearRangeOptions} [options] Options to File Clear Range operation.
     * @returns {Promise<FileUploadRangeResponse>}
     * @memberof ShareFileClient
     */
    clearRange(offset: number, contentLength: number, options?: FileClearRangeOptions): Promise<FileUploadRangeResponse>;
    /**
     * Returns the list of valid ranges for a file.
     *
     * @param {FileGetRangeListOptions} [options] Options to File Get range List operation.
     * @returns {Promise<FileGetRangeListResponse>}
     * @memberof ShareFileClient
     */
    getRangeList(options?: FileGetRangeListOptions): Promise<FileGetRangeListResponse>;
    /**
     * Copies a blob or file to a destination file within the storage account.
     *
     * @param {string} copySource Specifies the URL of the source file or blob, up to 2 KB in length.
     * To copy a file to another file within the same storage account, you may use Shared Key to
     * authenticate the source file. If you are copying a file from another storage account, or if you
     * are copying a blob from the same storage account or another storage account, then you must
     * authenticate the source file or blob using a shared access signature. If the source is a public
     * blob, no authentication is required to perform the copy operation. A file in a share snapshot
     * can also be specified as a copy source.
     * @param {FileStartCopyOptions} [options] Options to File Start Copy operation.
     * @returns {Promise<FileStartCopyResponse>}
     * @memberof ShareFileClient
     */
    startCopyFromURL(copySource: string, options?: FileStartCopyOptions): Promise<FileStartCopyResponse>;
    /**
     * Aborts a pending Copy File operation, and leaves a destination file with zero length and full
     * metadata.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
     *
     * @param {string} copyId Id of the Copy File operation to abort.
     * @param {FileAbortCopyFromURLOptions} [options] Options to File Abort Copy From URL operation.
     * @returns {Promise<FileAbortCopyResponse>}
     * @memberof ShareFileClient
     */
    abortCopyFromURL(copyId: string, options?: FileAbortCopyFromURLOptions): Promise<FileAbortCopyResponse>;
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to an Azure File.
     *
     * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView
     * @param {FileParallelUploadOptions} [options]
     * @returns {Promise<void>}
     */
    uploadBrowserData(browserData: Blob | ArrayBuffer | ArrayBufferView, options?: FileParallelUploadOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser Blob object to an Azure file. Requires a blobFactory as the data source,
     * which need to return a Blob object with the offset and size provided.
     *
     * @param {(offset: number, size: number) => Blob} blobFactory
     * @param {number} size
     * @param {FileParallelUploadOptions} [options]
     * @returns {Promise<void>}
     */
    uploadSeekableBlob(blobFactory: (offset: number, size: number) => Blob, size: number, options?: FileParallelUploadOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a local file to an Azure file.
     *
     * @param {string} filePath Full path of local file
     * @param {ShareFileClient} fileClient ShareFileClient
     * @param {FileParallelUploadOptions} [options]
     * @returns {(Promise<void>)}
     */
    uploadFile(filePath: string, options?: FileParallelUploadOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Accepts a Node.js Readable stream factory, and uploads in blocks to an Azure File.
     * The Readable stream factory must returns a Node.js Readable stream starting from the offset defined. The offset
     * is the offset in the Azure file to be uploaded.
     *
     * @export
     * @param {(offset: number) => NodeJS.ReadableStream} streamFactory Returns a Node.js Readable stream starting
     *                                                                  from the offset defined
     * @param {number} size Size of the Azure file
     * @param {ShareFileClient} fileClient ShareFileClient
     * @param {FileParallelUploadOptions} [options]
     * @returns {(Promise<void>)}
     */
    uploadResetableStream(streamFactory: (offset: number, count?: number) => NodeJS.ReadableStream, size: number, options?: FileParallelUploadOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure file in parallel to a buffer.
     * Offset and count are optional, pass 0 for both to download the entire file.
     *
     * @param {Buffer} buffer Buffer to be fill, must have length larger than count
     * @param {number} offset From which position of the Azure File to download
     * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined
     * @param {FileDownloadToBufferOptions} [options]
     * @returns {Promise<void>}
     */
    downloadToBuffer(buffer: Buffer, offset?: number, count?: number, options?: FileDownloadToBufferOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a Node.js Readable stream into an Azure file.
     * This method will try to create an Azure, then starts uploading chunk by chunk.
     * Size of chunk is defined by `bufferSize` parameter.
     * Please make sure potential size of stream doesn't exceed file size.
     *
     * PERFORMANCE IMPROVEMENT TIPS:
     * * Input stream highWaterMark is better to set a same value with bufferSize
     *   parameter, which will avoid Buffer.concat() operations.
     *
     * @param {Readable} stream Node.js Readable stream. Must be less or equal than file size.
     * @param {number} size Size of file to be created. Maxium size allowed is 1TB.
     *                      If this value is larger than stream size, there will be empty bytes in file tail.
     * @param {number} bufferSize Size of every buffer allocated in bytes, also the chunk/range size during
     *                            the uploaded file. Size must be > 0 and <= 4 * 1024 * 1024 (4MB)
     * @param {number} maxBuffers Max buffers will allocate during uploading, positive correlation
     *                            with max uploading concurrency
     * @param {FileUploadStreamOptions} [options]
     * @returns {Promise<void>}
     */
    uploadStream(stream: Readable, size: number, bufferSize: number, maxBuffers: number, options?: FileUploadStreamOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob to a local file.
     * Fails if the the given file path already exits.
     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
     *
     * @param {string} filePath
     * @param {number} [offset] From which position of the block blob to download.
     * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.
     * @param {BlobDownloadOptions} [options] Options to Blob download options.
     * @returns {Promise<FileDownloadResponse>} The response data for blob download operation,
     *                                                 but with readableStreamBody set to undefined since its
     *                                                 content is already read and written into a local file
     *                                                 at the specified path.
     * @memberof BlobClient
     */
    downloadToFile(filePath: string, offset?: number, count?: number, options?: FileDownloadOptions): Promise<FileDownloadResponseModel>;
    /**
     * Lists handles for a file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
     *
     * @param {string} [marker] Optional. A string value that identifies the portion of the list to be
     *                          returned with the next list handles operation. The operation returns a
     *                          marker value within the response body if the list returned was not complete.
     *                          The marker value may then be used in a subsequent call to request the next
     *                          set of list items.
     * @param {FileListHandlesSegmentOptions} [options={}]
     * @returns {Promise<FileListHandlesResponse>}
     * @memberof FileURL
     */
    private listHandlesSegment;
    /**
     * Returns an AsyncIterableIterator for FileListHandlesResponse
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of the list to be
     *                          returned with the next list handles operation. The operation returns a
     *                          marker value within the response body if the list returned was not complete.
     *                          The marker value may then be used in a subsequent call to request the next
     *                          set of list items.
     * @param {FileListHandlesSegmentOptions} [options] Options to list handles operation.
     * @returns {AsyncIterableIterator<FileListHandlesResponse>}
     * @memberof ShareFileClient
     */
    private iterateHandleSegments;
    /**
     * Returns an AsyncIterableIterator for handles
     *
     * @private
     * @param {FileListHandlesSegmentOptions} [options] Options to list handles operation.
     * @returns {AsyncIterableIterator<HandleItem>}
     * @memberof ShareFileClient
     */
    private listHandleItems;
    /**
     * Returns an async iterable iterator to list all the handles.
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the handles in pages.
     *
     * @param {FileListHandlesOptions} [options] Options to list handles operation.
     * @memberof ShareFileClient
     * @returns {PagedAsyncIterableIterator<HandleItem, FileListHandlesResponse>}
     * An asyncIterableIterator that supports paging.
     */
    listHandles(options?: FileListHandlesOptions): PagedAsyncIterableIterator<HandleItem, FileListHandlesResponse>;
    /**
     * Force close all handles for a file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
     *
     * @param {string} [marker] Optional. A string value that identifies the position of handles that will
     *                          be closed with the next force close handles operation.
     *                          The operation returns a marker value within the response
     *                          body if there are more handles to close. The marker value
     *                          may then be used in a subsequent call to close the next set of handles.
     * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.
     * @returns {Promise<FileForceCloseHandlesResponse>}
     * @memberof ShareFileClient
     */
    private forceCloseHandlesSegment;
    /**
     * Force close all handles for a file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
     *
     * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.
     * @returns {Promise<number>}
     * @memberof ShareFileClient
     */
    forceCloseAllHandles(options?: FileForceCloseHandlesOptions): Promise<number>;
    /**
     * Force close a specific handle for a file.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
     *
     * @param {string} handleId Specific handle ID, cannot be asterisk "*".
     *                          Use forceCloseAllHandles() to close all handles.
     * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.
     * @returns {Promise<FileForceCloseHandlesResponse>}
     * @memberof ShareFileClient
     */
    forceCloseHandle(handleId: string, options?: FileForceCloseHandlesOptions): Promise<FileForceCloseHandlesResponse>;
}
//# sourceMappingURL=ShareFileClient.d.ts.map