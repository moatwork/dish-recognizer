{"version":3,"file":"azure-storage-file-share.min.js","sources":["../../../core/core-http/lib/httpHeaders.ts","../../../core/core-http/lib/util/base64.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/bytesToUuid.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/lib/rng-browser.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.3/node_modules/uuid/v4.js","../../../core/core-http/lib/util/constants.ts","../../../core/core-http/lib/util/utils.ts","../../../core/core-http/lib/serializer.ts","../../../core/core-http/lib/webResource.ts","../../../../common/temp/node_modules/.registry.npmjs.org/tslib/1.10.0/node_modules/tslib/tslib.es6.js","../../../core/abort-controller/src/AbortSignal.ts","../../../core/abort-controller/src/AbortController.ts","../../../core/core-http/lib/httpPipelineLogLevel.ts","../../../core/core-http/lib/restError.ts","../../../core/core-http/lib/xhrHttpClient.ts","../../../core/core-http/lib/url.ts","../../../core/core-http/lib/policies/requestPolicy.ts","../../../core/logger/src/log.browser.ts","../../../core/logger/src/debug.ts","../../../core/logger/src/logger.ts","../../../core/core-http/lib/log.ts","../../../core/core-http/lib/policies/logPolicy.ts","../../../core/core-http/lib/operationParameter.ts","../../../core/core-http/lib/operationSpec.ts","../../../core/core-http/lib/util/xml.browser.ts","../../../core/core-http/lib/policies/deserializationPolicy.ts","../../../core/core-http/lib/policies/exponentialRetryPolicy.ts","../../../core/core-http/lib/policies/generateClientRequestIdPolicy.ts","../../../core/core-http/lib/policies/msRestUserAgentPolicy.browser.ts","../../../core/core-http/lib/policies/userAgentPolicy.ts","../../../core/core-http/lib/policies/redirectPolicy.ts","../../../core/core-http/lib/policies/rpRegistrationPolicy.ts","../../../core/core-http/lib/credentials/accessTokenCache.ts","../../../core/core-http/lib/policies/bearerTokenAuthenticationPolicy.ts","../../../core/core-http/lib/policies/systemErrorRetryPolicy.ts","../../../core/core-http/lib/queryCollectionFormat.ts","../../../core/core-http/lib/policies/proxyPolicy.browser.ts","../../../core/core-http/lib/policies/throttlingRetryPolicy.ts","../../../core/core-http/lib/policies/signingPolicy.ts","../../../core/core-http/lib/policies/keepAlivePolicy.ts","../../../core/core-tracing/lib/tracers/noop/noOpSpan.ts","../../../core/core-tracing/lib/tracers/noop/noOpBinaryFormat.ts","../../../core/core-tracing/lib/tracers/noop/noOpHttpTextFormat.ts","../../../core/core-tracing/lib/tracers/noop/noOpTracer.ts","../../../core/core-tracing/lib/utils/cache.ts","../../../core/core-tracing/lib/interfaces/status.ts","../../../core/core-tracing/lib/interfaces/span_kind.ts","../../../core/core-tracing/lib/interfaces/trace_flags.ts","../../../core/core-tracing/lib/utils/global.browser.ts","../../../core/core-tracing/lib/tracerProxy.ts","../../../core/core-tracing/lib/utils/traceParentHeader.ts","../../../core/core-http/lib/policies/tracingPolicy.ts","../../../core/core-http/lib/serviceClient.ts","../../../core/core-auth/src/tokenCredential.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/service.ts","../src/generated/src/operations/share.ts","../src/generated/src/operations/directory.ts","../src/generated/src/operations/file.ts","../src/log.ts","../src/utils/constants.ts","../src/utils/utils.common.ts","../src/policies/StorageRetryPolicy.ts","../src/policies/StorageBrowserPolicy.ts","../src/StorageBrowserPolicyFactory.ts","../src/StorageRetryPolicyFactory.ts","../src/policies/TelemetryPolicy.ts","../src/TelemetryPolicyFactory.ts","../src/Pipeline.ts","../src/generated/src/storageClientContext.ts","../src/StorageClient.ts","../src/FileSystemAttributes.ts","../src/models.ts","../../../core/core-asynciterator-polyfill/src/index.ts","../../../core/core-paging/dist-esm/index.js","../src/Range.ts","../../../../common/temp/node_modules/.registry.npmjs.org/events/3.0.0/node_modules/events/events.js","../src/credentials/Credential.ts","../src/utils/Batch.ts","../src/utils/BufferScheduler.ts","../src/utils/utils.node.ts","../src/policies/CredentialPolicy.ts","../src/policies/AnonymousCredentialPolicy.ts","../src/credentials/AnonymousCredential.ts","../src/utils/tracing.ts","../src/ShareFileClient.ts","../src/FileDownloadResponse.browser.ts","../src/ShareDirectoryClient.ts","../src/ShareClient.ts","../src/ShareServiceClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const Constants = {\n  /**\n   * The core-http version\n   * @const\n   * @type {string}\n   */\n  coreHttpVersion: \"1.0.0-preview.6\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/gi;\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResource): WebResource {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResource} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResource,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then(\n      (data: any) => {\n        cb(undefined, data);\n      },\n      (err: Error) => {\n        cb(err);\n      }\n    );\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then(\n      (data: HttpOperationResponse) => {\n        process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      },\n      (err: Error) => {\n        process.nextTick(cb, err);\n      }\n    );\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach((sourceCtors) => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach((name) => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param {any} value Any entity\n * @return {boolean} - true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: any): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML?: boolean\n  ) {}\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`\n      );\n    };\n    if (mapper.constraints && value != undefined) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/gi) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/gi) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/gi) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/gi) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/gi) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/gi) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/gi) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/gi) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/gi) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/gi) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/gi) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/gi) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/gi) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/gi) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/gi) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/gi) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/gi) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/gi) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/gi) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/gi) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/gi) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/gi) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/gi) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`\n        );\n      }\n    } else if (typeName.match(/^Boolean$/gi) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/gi) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues\n      )}.`\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/gi) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`\n        );\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string\n) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string\n) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(\n        `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n          mapper,\n          undefined,\n          2\n        )}\".`\n      );\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(\n            modelMapper\n          )}\" of type \"${className}\" for object \"${objectName}\".`\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string\n) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (childObject == undefined && object[key] != undefined) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          toSerialize == undefined\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName\n        );\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]'\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody.$[xmlName!],\n          propertyObjectName\n        );\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          unwrappedProperty,\n          propertyObjectName\n        );\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        propertyInstance == undefined\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]'\n        );\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\"\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator =\n          discriminatorValue === typeName\n            ? discriminatorValue\n            : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ProxySettings } from \"./serviceClient\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanOptions } from \"@azure/core-tracing\";\n\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\nexport type HttpRequestBody =\n  | Blob\n  | string\n  | ArrayBuffer\n  | ArrayBufferView\n  | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeaders;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  formData?: any;\n  query?: { [key: string]: any };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n  keepAlive?: boolean;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any },\n    headers?: { [key: string]: any } | HttpHeaders,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean\n  ) {\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = headers instanceof HttpHeaders ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\n        \"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\"\n      );\n    }\n\n    if (\n      (options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") &&\n      (options.url == undefined || typeof options.url.valueOf() !== \"string\")\n    ) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\n          'The provided method \"' +\n            options.method +\n            '\" is invalid. Supported HTTP methods are: ' +\n            JSON.stringify(validMethods)\n        );\n      }\n    }\n    this.method = options.method.toUpperCase() as HttpMethods;\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url =\n        baseUrl +\n        (baseUrl.endsWith(\"/\") ? \"\" : \"/\") +\n        (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(\n            `pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`\n          );\n        }\n        segments.forEach(function(item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (\n            pathParam === null ||\n            pathParam === undefined ||\n            !(typeof pathParam === \"string\" || typeof pathParam === \"object\")\n          ) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(\n              `pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n                ` however, it is not present in parameters: ${stringifiedPathParameters}.` +\n                `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n                `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`\n            );\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\n                `options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\n          `options.queryParameters must be of type object. It should be a JSON object ` +\n            `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n            `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`\n        );\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\n                `options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(\n            options.serializationMapper,\n            options.body,\n            \"requestBody\"\n          );\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    if (options.spanOptions) {\n      this.spanOptions = options.spanOptions;\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive\n    );\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  spanOptions?: SpanOptions;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  [key: string]: any;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/// <reference path=\"./shims-public.d.ts\" />\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * // Abort without timeout\n * await doAsyncWork(AbortSignal.none);\n *\n * @export\n * @class AbortSignal\n * @implements {AbortSignalLike}\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof AbortSignal\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   * @static\n   * @type {AbortSignal}\n   * @memberof AbortSignal\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   *\n   * @memberof AbortSignal\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof AbortSignal\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof AbortSignal\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n    * Dispatches a synthetic event to the AbortSignal.\n    */\n  dispatchEvent(event: Event): boolean {\n    throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\")\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @returns\n * @internal\n */\nexport function abortSignal(signal: AbortSignal) {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    listeners.forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n","import { AbortSignal, abortSignal, AbortSignalLike } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * // Abort an operation when another event fires\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n *\n * @export\n * @class AbortController\n * @implements {AbortSignalLike}\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param {AbortSignalLike[]} [parentSignals] The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   * @constructor\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param {...AbortSignalLike} parentSignals The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   * @constructor\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   * @type {AbortSignal}\n   * @memberof AbortController\n   */\n  public get signal() {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   *\n   * @memberof AbortController\n   */\n  abort() {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   *\n   * @static\n   * @params {number} ms Elapsed time in milliseconds to trigger an abort.\n   * @returns {AbortSignal}\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResource } from \"./webResource\";\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResource;\n  response?: HttpOperationResponse;\n  details?: unknown;\n  constructor(\n    message: string,\n    code?: string,\n    statusCode?: number,\n    request?: WebResource,\n    response?: HttpOperationResponse\n  ) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResource, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        return Promise.reject(new AbortError(\"The operation was aborted.\"));\n      }\n\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function(resolve, reject) {\n        xhr.addEventListener(\"load\", () =>\n          resolve({\n            request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText\n          })\n        );\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(\n  xhr: XMLHttpRequestEventTarget,\n  listener?: (progress: TransferProgressEvent) => void\n) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", (rawEvent) =>\n      listener({\n        loadedBytes: rawEvent.loaded\n      })\n    );\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr\n    .getAllResponseHeaders()\n    .trim()\n    .split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(\n  request: WebResource,\n  xhr: XMLHttpRequest,\n  reject: (err: any) => void\n) {\n  xhr.addEventListener(\"error\", () =>\n    reject(\n      new RestError(\n        `Failed to send request to ${request.url}`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n  xhr.addEventListener(\"abort\", () => reject(new AbortError(\"The operation was aborted.\")));\n  xhr.addEventListener(\"timeout\", () =>\n    reject(\n      new RestError(\n        `timeout of ${xhr.timeout}ms exceeded`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Get the keys of the query string.\n   */\n  public keys(): string[] {\n    return Object.keys(this._rawQuery);\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"=\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"Invalid\";\n                break;\n\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"Invalid\":\n            if (currentCharacter === \"&\") {\n              currentState = \"ParameterName\";\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            const tokenPath: string | undefined = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResource } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy;\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions\n  ) {}\n\n  public abstract sendRequest(webResource: WebResource): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst logFunction = console.debug || console.log;\nexport function log(...args: any[]) {\n  logFunction(...args);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabled of enabledNamespaces) {\n    if (enabled.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  function debug(...args: any[]) {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log\n  }\n);\n\nexport default debugObj;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport debug, { Debugger } from \"./debug\";\nexport { Debugger } from \"./debug\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level.\n * @param level The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel) {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed trbouleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace The name of the SDK package.\n * @ignore\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger) {\n  if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n","import { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-http\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport { URLBuilder, URLQuery } from \"../url\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { logger as coreLogger } from \"../log\";\n\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"traceparent\",\n\n  \"Accept\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\"\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(n => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(p => p.toLowerCase()));\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResource) {\n    this.logger(`Request: ${JSON.stringify(request, this.sanitize.bind(this), 2)}`);\n  }\n\n  private sanitize(key: string, value: unknown) {\n    if (key === \"_headersMap\") {\n      return this.sanitizeHeaders(key, value as {});\n    } else if (key === \"url\") {\n      return this.sanitizeUrl(value as string);\n    } else if (key === \"query\") {\n      return this.sanitizeQuery(value as {});\n    } else if (key === \"body\") {\n      // Don't log the request body\n      return undefined;\n    } else if (key === \"response\") {\n      // Don't log response again\n      return undefined;\n    } else if (key === \"operationSpec\") {\n      // When using sendOperationRequest, the request carries a massive\n      // field with the autorest spec. No need to log it.\n      return undefined;\n    }\n\n    return value;\n  }\n\n  private sanitizeHeaders(_: string, value: { [s: string]: any }) {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: { [s: string]: string }) {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: { [s: string]: any },\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: { [s: string]: string } = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${JSON.stringify(response.headers, this.sanitize.bind(this), 2)}`);\n    return response;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(\n  parameterPath: ParameterPath,\n  mapper: Mapper\n): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter\n} from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\n\nconst parser = new DOMParser();\nexport function parseXML(str: string, opts?: { includeRoot?: boolean }): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    let obj;\n    if (opts && opts.includeRoot) {\n      obj = domToObject(dom);\n    } else {\n      obj = domToObject(dom.childNodes[0]);\n    }\n\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n    .namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined =\n    (firstChildNode &&\n      childNodeCount === 1 &&\n      firstChildNode.nodeType === Node.TEXT_NODE &&\n      firstChildNode.nodeValue) ||\n    undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(content: any, opts?: { rootName?: string }): string {\n  const rootName = (opts && opts.rootName) || \"root\";\n  const dom = buildNode(content, rootName)[0];\n  return (\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom)\n  );\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (\n    obj == undefined ||\n    typeof obj === \"string\" ||\n    typeof obj === \"number\" ||\n    typeof obj === \"boolean\"\n  ) {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj == undefined ? \"\" : obj.toString();\n    return [elem];\n  } else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else if (key === \"_\") {\n        elem.textContent = obj[key].toString();\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  } else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\", \"text/plain\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    deserializationContentTypes: DeserializationContentTypes | undefined,\n    options: RequestPolicyOptions\n  ) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response: HttpOperationResponse) =>\n        deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response)\n      );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResource = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then((parsedResponse) => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean =\n          expectedStatusCodes.length === 0 ||\n          (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\");\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes\n          ? 200 <= statusCode && statusCode < 300\n          : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : (parsedResponse.bodyAsText as string);\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined =\n                  defaultResponseSpec.bodyMapper;\n                if (\n                  defaultResponseBodyMapper &&\n                  defaultResponseBodyMapper.serializedName === \"CloudError\"\n                ) {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (\n                    operationSpec.isXML &&\n                    defaultResponseBodyMapper.type.name === MapperType.Sequence\n                  ) {\n                    valueToDeserialize =\n                      typeof parsedErrorResponse === \"object\"\n                        ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                        : [];\n                  }\n                  error.response!.parsedBody = operationSpec.serializer.deserialize(\n                    defaultResponseBodyMapper,\n                    valueToDeserialize,\n                    \"error.response.parsedBody\"\n                  );\n                }\n              }\n\n              if (parsedResponse.headers && defaultResponseSpec.headersMapper) {\n                error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n                  defaultResponseSpec.headersMapper,\n                  parsedResponse.headers.rawHeaders(),\n                  \"operationRes.parsedHeaders\"\n                );\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize =\n                typeof valueToDeserialize === \"object\"\n                  ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                  : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n                responseSpec.bodyMapper,\n                valueToDeserialize,\n                \"operationRes.parsedBody\"\n              );\n            } catch (error) {\n              const restError = new RestError(\n                `Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`\n              );\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n              responseSpec.headersMapper,\n              parsedResponse.headers.rawHeaders(),\n              \"operationRes.parsedHeaders\"\n            );\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\nimport { logger } from \"../log\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n * @enum RetryMode\n */\nexport enum RetryMode {\n  Exponential\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface RetryOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 30000\n   * (30 seconds). The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 90000 (90 seconds).\n   */\n  maxRetryDelayInMs?: number;\n\n  /**\n   * Currently supporting only Exponential mode.\n   */\n  mode?: RetryMode;\n}\n\nexport const DefaultRetryOptions: RetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptions} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number {\n      return typeof n === \"number\";\n    }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response))\n      .catch((error) => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(\n  policy: ExponentialRetryPolicy,\n  statusCode: number | undefined,\n  retryData: RetryData\n): boolean {\n  if (\n    statusCode == undefined ||\n    (statusCode < 500 && statusCode !== 408) ||\n    statusCode === 501 ||\n    statusCode === 505\n  ) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n\n  return currentCount < policy.retryCount;\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(\n  policy: ExponentialRetryPolicy,\n  retryData?: RetryData,\n  err?: RetryError\n): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta =\n    policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    incrementDelta,\n    policy.maxRetryInterval\n  );\n\n  return retryData;\n}\n\nfunction retry(\n  policy: ExponentialRetryPolicy,\n  request: WebResource,\n  response?: HttpOperationResponse,\n  retryData?: RetryData,\n  requestError?: RetryError\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    logger.info(`Retrying request in ${retryData.retryInterval}`);\n    return utils\n      .delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then((res) => retry(policy, request, res, retryData, undefined))\n      .catch((err) => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err =\n      retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response\n      );\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _requestIdHeaderName: string\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, utils.generateUuid());\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  // oscpu is not yet standards-compliant, but can not be undefined in TypeScript 3.6.2\n  readonly oscpu: string;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /*\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key == undefined ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value == undefined\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResource): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /*\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /*\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n}\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResource,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResource, reuseUrlToo = false): WebResource {\n  const reqOptions: WebResource = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResource\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResource\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((res) => {\n    const obj = res.parsedBody as any;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils\n        .delay(policy._retryTimeout * 1000)\n        .then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { WebResource } from \"../webResource\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"../credentials/accessTokenCache\";\n\n/**\n * Creates a new BearerTokenAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the bearer token.\n * @param scopes The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(\n        nextPolicy,\n        options,\n        credential,\n        scopes,\n        tokenCache\n      );\n    }\n  };\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n  /**\n   * Creates a new BearerTokenAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param scopes The scopes for which the bearer token applies.\n   * @param tokenCache The cache for the most recent AccessToken returned from the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(webResource: WebResource): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    const token = await this.getToken({\n      abortSignal: webResource.abortSignal,\n      tracingOptions: {\n        spanOptions: webResource.spanOptions\n      }\n    });\n    webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n\n  private async getToken(options: GetTokenOptions): Promise<string | undefined> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = (await this.credential.getToken(this.scopes, options)) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    return accessToken ? accessToken.token : undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval =\n      typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval =\n      typeof minRetryInterval === \"number\"\n        ? minRetryInterval\n        : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval =\n      typeof maxRetryInterval === \"number\"\n        ? maxRetryInterval\n        : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n  return currentCount < policy.retryCount;\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(\n  policy: SystemErrorRetryPolicy,\n  retryData?: RetryData,\n  err?: RetryError\n): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta =\n    policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    policy.minRetryInterval + incrementDelta,\n    policy.maxRetryInterval\n  );\n\n  return retryData;\n}\n\nfunction retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResource,\n  operationResponse: HttpOperationResponse,\n  retryData?: RetryData,\n  err?: RetryError\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (\n    err &&\n    err.code &&\n    shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" ||\n      err.code === \"ESOCKETTIMEDOUT\" ||\n      err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" ||\n      err.code === \"ENOENT\")\n  ) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils\n      .delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then((res) => retry(policy, request, res, retryData, err))\n      .catch((err) => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\"\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProxySettings } from \"../serviceClient\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\n\nconst proxyNotSupportedInBrowser = new Error(\"ProxyPolicy is not supported in browser environment\");\n\nexport function getDefaultProxySettings(_proxyUrl?: string): ProxySettings | undefined {\n  return undefined;\n}\n\nexport function proxyPolicy(_proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptions) => {\n      throw proxyNotSupportedInBrowser;\n    }\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n    throw proxyNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResource): Promise<HttpOperationResponse> {\n    throw proxyNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (\n  httpRequest: WebResource,\n  response: HttpOperationResponse\n) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    _handleResponse?: ResponseHandler\n  ) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then((response) => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(\n    httpRequest: WebResource,\n    httpResponse: HttpOperationResponse\n  ): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(\n      Constants.HeaderConstants.RETRY_AFTER\n    );\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(\n        retryAfterHeader\n      );\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResource): Promise<WebResource> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions } from './requestPolicy';\nimport { WebResource } from '../webResource';\nimport { HttpOperationResponse } from '../httpOperationResponse';\n\n/**\n * Options for how HTTP connections should be maintained for future\n * requests.\n */\nexport interface KeepAliveOptions {\n  /*\n   * When true, connections will be kept alive for multiple requests.\n   * Defaults to true.\n   */\n  enable: boolean;\n}\n\nexport const DefaultKeepAliveOptions: KeepAliveOptions = {\n  enable: true\n}\n\nexport function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions) {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    }\n  };\n}\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {KeepAliveOptions} [keepAliveOptions]\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private readonly keepAliveOptions: KeepAliveOptions\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof KeepAlivePolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Span } from \"../../interfaces/span\";\nimport { SpanContext } from \"../../interfaces/span_context\";\nimport { Attributes } from \"../../interfaces/attributes\";\nimport { Status } from \"../../interfaces/status\";\n\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nexport class NoOpSpan implements Span {\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\"\n    };\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    /* Noop */\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param _key the attribute key\n   * @param _value the attribute value\n   */\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param _attributes the attributes to add\n   */\n  setAttributes(_attributes: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param _name The name of the event\n   * @param _attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds a link to the Span.\n   * @param _spanContext the context of the linked span\n   * @param _attributes attributes to be added that are associated with the link\n   */\n  addLink(_spanContext: SpanContext, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param _status The status to set.\n   */\n  setStatus(_status: Status): this {\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param _name the new Span name\n   */\n  updateName(_name: string): this {\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecordingEvents(): boolean {\n    return false;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BinaryFormat } from \"../../interfaces/BinaryFormat\";\nimport { SpanContext } from \"../../interfaces/span_context\";\n\n/**\n * A no-op implementation of BinaryFormat to be used when tracing is disabled.\n */\nexport class NoOpBinaryFormat implements BinaryFormat {\n  /** Serialize the given SpanContext to a buffer */\n  toBytes(_spanContext: SpanContext): ArrayBuffer {\n    return new ArrayBuffer(0);\n  }\n\n  /** \n   * Deserialize a SpanContext from binary encoding. \n   * Returns null if the buffer does not contain a valid SpanContext.\n   */\n  fromBytes(_buffer: ArrayBuffer): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpTextFormat } from \"../../interfaces/HttpTextFormat\";\nimport { SpanContext } from \"../../interfaces/span_context\";\n\n/**\n * A no-op implementation of HttpTextFormat to be used when tracing is disabled.\n */\nexport class NoOpHttpTextFormat implements HttpTextFormat {\n  /**\n   * Injects the given SpanContext for transmitting to a remote server.\n   * @param _spanContext The SpanContext to transmit\n   * @param _format The format of the carrier\n   * @param _carrier The carrier to propagate through, e.g. an HTTP request\n   */\n  inject(_spanContext: SpanContext, _format: string, _carrier: unknown): void { }\n  /**\n   * Returns a SpanContext intance extracted from the carrier.\n   * @param _format the format of the carrier\n   * @param _carrier The carrier being used for propagation, e.g. an HTTP request\n   */\n  extract(_format: string, _carrier: unknown): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tracer } from \"../../interfaces/tracer\";\nimport { Span } from \"../../interfaces/span\";\nimport { SpanOptions } from \"../../interfaces/SpanOptions\";\nimport { NoOpSpan } from \"./noOpSpan\";\nimport { BinaryFormat } from \"../../interfaces/BinaryFormat\";\nimport { HttpTextFormat } from \"../../interfaces/HttpTextFormat\";\nimport { NoOpBinaryFormat } from \"./noOpBinaryFormat\";\nimport { NoOpHttpTextFormat } from \"./noOpHttpTextFormat\";\n\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nexport class NoOpTracer implements Tracer {\n\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  startSpan(_name: string, _options?: SpanOptions): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => ReturnType<T>>(\n    _span: Span,\n    fn: T\n  ): ReturnType<T> {\n    return fn();\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, _span?: Span): T {\n    return target;\n  }\n\n  /**\n   * Send a pre-populated Span object to the exporter.\n   * @param _span The span to pass along.\n   */\n  recordSpanData(_span: Span): void {\n    /* NOOP */\n  }\n\n  /**\n   * Returns the BinaryFormat interface for serializing/deserializing Spans.\n   */\n  getBinaryFormat(): BinaryFormat {\n    return new NoOpBinaryFormat();\n  }\n\n  /**\n   * Returns the HttpTextFormat interface for injecting/extracting Spans.\n   */\n  getHttpTextFormat(): HttpTextFormat {\n    return new NoOpHttpTextFormat();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tracer } from \"../interfaces/tracer\";\nimport { getGlobalObject } from \"./global\";\n\nconst GLOBAL_TRACER_VERSION = 1;\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache\");\n\nexport interface TracerCache {\n  version: number;\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n  const existingCache: TracerCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  if (existingCache) {\n    if (existingCache.version !== GLOBAL_TRACER_VERSION) {\n      throw new Error(\n        `Two incompatible versions of @azure/core-tracing have been loaded.\n         This library is ${GLOBAL_TRACER_VERSION}, existing is ${existingCache.version}.`\n      );\n    }\n    cache = existingCache;\n  } else {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of canonical status codes.\n *\n * TODO (revision): https://github.com/open-telemetry/opentelemetry-specification/issues/59\n */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enumeration that represents global trace flags. These flags are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nexport enum TraceFlags {\n  /** Bit to represent whether trace is unsampled in trace flags. */\n  UNSAMPLED = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport function getGlobalObject(): any {\n  return self;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { Tracer } from \"./interfaces/tracer\";\nimport { getCache } from \"./utils/cache\";\n\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer: Tracer) {\n  const cache = getCache();\n  cache.tracer = tracer;\n}\n\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer() {\n  const cache = getCache();\n  if (!cache.tracer) {\n    cache.tracer = new NoOpTracer();\n  }\n  return cache.tracer;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SpanContext } from \"../interfaces/span_context\";\nimport { TraceFlags } from \"../interfaces/trace_flags\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.UNSAMPLED;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getTracer, getTraceParentHeader } from \"@azure/core-tracing\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy\n} from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\n\nexport function tracingPolicy(): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options);\n    }\n  };\n}\n\nexport class TracingPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.spanOptions || !request.spanOptions.parent) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    // create a new span\n    const tracer = getTracer();\n    const span = tracer.startSpan(\"core-http\", request.spanOptions);\n\n    try {\n      // set headers\n      const spanContext = span.context();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n\n      const response = await this._nextPolicy.sendRequest(request);\n      span.end();\n      return response;\n    } catch (err) {\n      span.end();\n      throw err;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { logPolicy, LogPolicyOptions } from \"./policies/logPolicy\";\nimport { OperationArguments } from \"./operationArguments\";\nimport {\n  getPathStringFromParameter,\n  getPathStringFromParameterPath,\n  OperationParameter,\n  ParameterPath\n} from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport {\n  deserializationPolicy,\n  DeserializationContentTypes,\n  DefaultDeserializationOptions\n} from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy, DefaultRetryOptions } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport {\n  userAgentPolicy,\n  getDefaultUserAgentHeaderName,\n  getDefaultUserAgentValue\n} from \"./policies/userAgentPolicy\";\nimport { redirectPolicy, DefaultRedirectOptions } from \"./policies/redirectPolicy\";\nimport {\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { bearerTokenAuthenticationPolicy } from \"./policies/bearerTokenAuthenticationPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback, isNode } from \"./util/utils\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { logger } from \"./log\";\nimport { InternalPipelineOptions } from \"./pipelineOptions\";\nimport { DefaultKeepAliveOptions, keepAlivePolicy } from \"./policies/keepAlivePolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n\n/**\n * Options to configure a proxy for outgoing requests (Node.js only).\n */\nexport interface ProxySettings {\n  /*\n   * The proxy's host address.\n   */\n  host: string;\n\n  /*\n   * The proxy host's port.\n   */\n  port: number;\n\n  /**\n   * The user name to authenticate with the proxy, if required.\n   */\n  username?: string;\n\n  /**\n   * The password to authenticate with the proxy, if required.\n   */\n  password?: string;\n}\n\nexport type ProxyOptions = ProxySettings; // Alias ProxySettings as ProxyOptions for future use.\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?:\n    | RequestPolicyFactory[]\n    | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => void | RequestPolicyFactory[]);\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param credentials The credentials used for authentication with the service.\n   * @param options The service client options that govern the behavior of the client.\n   */\n  constructor(\n    credentials?: TokenCredential | ServiceClientCredentials,\n    options?: ServiceClientOptions\n  ) {\n    if (!options) {\n      options = {};\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      logger.info(\"ServiceClient: using custom request policies\");\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      let authPolicyFactory: RequestPolicyFactory | undefined = undefined;\n      if (isTokenCredential(credentials)) {\n        logger.info(\n          \"ServiceClient: creating bearer token authentication policy from provided credentials\"\n        );\n        // Create a wrapped RequestPolicyFactory here so that we can provide the\n        // correct scope to the BearerTokenAuthenticationPolicy at the first time\n        // one is requested.  This is needed because generated ServiceClient\n        // implementations do not set baseUri until after ServiceClient's constructor\n        // is finished, leaving baseUri empty at the time when it is needed to\n        // build the correct scope name.\n        const wrappedPolicyFactory: () => RequestPolicyFactory = () => {\n          let bearerTokenPolicyFactory: RequestPolicyFactory | undefined = undefined;\n          let serviceClient = this;\n          return {\n            create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy {\n              if (bearerTokenPolicyFactory === undefined) {\n                bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(\n                  credentials,\n                  `${serviceClient.baseUri || \"\"}/.default`\n                );\n              }\n\n              return bearerTokenPolicyFactory.create(nextPolicy, options);\n            }\n          };\n        };\n\n        authPolicyFactory = wrappedPolicyFactory();\n      } else if (credentials && typeof credentials.signRequest === \"function\") {\n        logger.info(\"ServiceClient: creating signing policy from provided credentials\");\n        authPolicyFactory = signingPolicy(credentials);\n      } else if (credentials !== undefined) {\n        throw new Error(\"The credentials argument must implement the TokenCredential interface\");\n      }\n\n      logger.info(\"ServiceClient: using default request policies\");\n      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);\n      if (options.requestPolicyFactories) {\n        // options.requestPolicyFactories can also be a function that manipulates\n        // the default requestPolicyFactories array\n        const newRequestPolicyFactories:\n          | void\n          | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResource): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResource;\n    try {\n      if (options instanceof WebResource) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(\n          httpPipeline,\n          this._requestPolicyOptions\n        );\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n    callback?: ServiceCallback<any>\n  ): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\n          \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\"\n        );\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            urlParameter,\n            operationSpec.serializer\n          );\n          urlParameterValue = operationSpec.serializer.serialize(\n            urlParameter.mapper,\n            urlParameterValue,\n            getPathStringFromParameter(urlParameter)\n          );\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(\n            `{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`,\n            urlParameterValue\n          );\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            queryParameter,\n            operationSpec.serializer\n          );\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(\n              queryParameter.mapper,\n              queryParameterValue,\n              getPathStringFromParameter(queryParameter)\n            );\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            requestUrl.setQueryParameter(\n              queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n              queryParameterValue\n            );\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            headerParameter,\n            operationSpec.serializer\n          );\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(\n              headerParameter.mapper,\n              headerValue,\n              getPathStringFromParameter(headerParameter)\n            );\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n              .headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(\n                headerParameter.mapper.serializedName ||\n                  getPathStringFromParameter(headerParameter),\n                headerValue\n              );\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n\n        if (options.spanOptions) {\n          httpRequest.spanOptions = options.spanOptions;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      let rawResponse: HttpOperationResponse;\n      let sendRequestError;\n      try {\n        rawResponse = await this.sendRequest(httpRequest);\n      } catch (error) {\n        sendRequestError = error;\n      }\n      if (sendRequestError) {\n        if (sendRequestError.response) {\n          sendRequestError.details = flattenResponse(\n            sendRequestError.response,\n            operationSpec.responses[sendRequestError.statusCode] ||\n              operationSpec.responses[\"default\"]\n          );\n        }\n        result = Promise.reject(sendRequestError);\n      } else {\n        result = Promise.resolve(\n          flattenResponse(rawResponse!, operationSpec.responses[rawResponse!.status])\n        );\n      }\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then((res) => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch((err) => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(\n  serviceClient: ServiceClient,\n  httpRequest: WebResource,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec\n): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(\n      serviceClient,\n      operationArguments,\n      operationSpec.requestBody,\n      operationSpec.serializer\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody\n        );\n        httpRequest.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          httpRequest.body,\n          requestBodyParameterPathString\n        );\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(\n              utils.prepareXMLRootList(\n                httpRequest.body,\n                xmlElementName || xmlName || serializedName!\n              ),\n              { rootName: xmlName || serializedName }\n            );\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, {\n              rootName: xmlName || serializedName\n            });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \"\n        )}.`\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(\n        serviceClient,\n        operationArguments,\n        formDataParameter,\n        operationSpec.serializer\n      );\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter)\n        );\n      }\n    }\n  }\n}\n\nfunction getValueOrFunctionResult(\n  value: undefined | string | ((defaultValue: string) => string),\n  defaultValueCreator: () => string\n): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(\n  authPolicyFactory: RequestPolicyFactory | undefined,\n  options: ServiceClientOptions\n): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (authPolicyFactory) {\n    factories.push(authPolicyFactory);\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(\n    options.userAgentHeaderName,\n    getDefaultUserAgentHeaderName\n  );\n  const userAgentHeaderValue: string = getValueOrFunctionResult(\n    options.userAgent,\n    getDefaultUserAgentValue\n  );\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  factories.push(logPolicy({ logger: logger.info }));\n\n  return factories;\n}\n\nexport function createPipelineFromOptions(\n  pipelineOptions: InternalPipelineOptions,\n  authPolicyFactory?: RequestPolicyFactory\n): ServiceClientOptions {\n  let requestPolicyFactories: RequestPolicyFactory[] = [];\n\n  let userAgentValue = undefined;\n  if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {\n    const userAgentInfo: string[] = [];\n    userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);\n\n    // Add the default user agent value if it isn't already specified\n    // by the userAgentPrefix option.\n    const defaultUserAgentInfo = getDefaultUserAgentValue();\n    if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {\n      userAgentInfo.push(defaultUserAgentInfo);\n    }\n\n    userAgentValue = userAgentInfo.join(\" \");\n  }\n\n  const keepAliveOptions = {\n    ...DefaultKeepAliveOptions,\n    ...pipelineOptions.keepAliveOptions\n  };\n\n  const retryOptions = {\n    ...DefaultRetryOptions,\n    ...pipelineOptions.retryOptions\n  };\n\n  const redirectOptions = {\n    ...DefaultRedirectOptions,\n    ...pipelineOptions.redirectOptions\n  };\n\n  const proxySettings = pipelineOptions.proxyOptions || getDefaultProxySettings();\n  if (isNode && proxySettings) {\n    requestPolicyFactories.push(proxyPolicy(proxySettings));\n  }\n\n  const deserializationOptions = {\n    ...DefaultDeserializationOptions,\n    ...pipelineOptions.deserializationOptions\n  };\n\n  const loggingOptions: LogPolicyOptions = {\n    ...pipelineOptions.loggingOptions\n  };\n\n  requestPolicyFactories.push(\n    tracingPolicy(),\n    keepAlivePolicy(keepAliveOptions),\n    userAgentPolicy({ value: userAgentValue }),\n    generateClientRequestIdPolicy(),\n    deserializationPolicy(deserializationOptions.expectedContentTypes),\n    throttlingRetryPolicy(),\n    systemErrorRetryPolicy(),\n    exponentialRetryPolicy(\n      retryOptions.maxRetries,\n      retryOptions.retryDelayInMs,\n      retryOptions.maxRetryDelayInMs\n    )\n  );\n\n  if (redirectOptions.handleRedirects) {\n    requestPolicyFactories.push(redirectPolicy(redirectOptions.maxRetries));\n  }\n\n  if (authPolicyFactory) {\n    requestPolicyFactories.push(authPolicyFactory);\n  }\n\n  requestPolicyFactories.push(logPolicy(loggingOptions));\n\n  return {\n    httpClient: pipelineOptions.httpClient,\n    requestPolicyFactories\n  };\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  serializer: Serializer\n): any {\n  return getOperationArgumentValueFromParameterPath(\n    serviceClient,\n    operationArguments,\n    parameter.parameterPath,\n    parameter.mapper,\n    serializer\n  );\n}\n\nexport function getOperationArgumentValueFromParameterPath(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameterPath: ParameterPath,\n  parameterMapper: Mapper,\n  serializer: Serializer\n): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(\n          operationArguments,\n          parameterPath\n        );\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(\n        parameterPath,\n        parameterMapper\n      );\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(\n        serviceClient,\n        operationArguments,\n        propertyPath,\n        propertyMapper,\n        serializer\n      );\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(\n        propertyPath,\n        propertyMapper\n      );\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[]\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(\n  _response: HttpOperationResponse,\n  responseSpec: OperationResponse | undefined\n): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties =\n      (typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties) || {};\n    const isPageableResponse = Object.keys(modelProperties).some(\n      (k) => modelProperties[k].serializedName === \"\"\n    );\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (\n    bodyMapper ||\n    _response.request.method === \"HEAD\" ||\n    utils.isPrimitiveType(_response.parsedBody)\n  ) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"./operationOptions\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions extends OperationOptions {\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token returned by the authentication service.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp in milliseconds, UNIX epoch time.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: any): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  return (\n    credential &&\n    typeof credential.getToken === \"function\" &&\n    (credential.signRequest === undefined || credential.getToken.length > 0)\n  );\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n\nexport const AccessPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        serializedName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        xmlName: \"Expiry\",\n        serializedName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permissions: {\n        xmlName: \"Permission\",\n        serializedName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: coreHttp.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        xmlName: \"AllowedOrigins\",\n        required: true,\n        serializedName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        xmlName: \"AllowedMethods\",\n        required: true,\n        serializedName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        xmlName: \"AllowedHeaders\",\n        required: true,\n        serializedName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        xmlName: \"ExposedHeaders\",\n        required: true,\n        serializedName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        xmlName: \"MaxAgeInSeconds\",\n        required: true,\n        serializedName: \"MaxAgeInSeconds\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryItem: coreHttp.CompositeMapper = {\n  xmlName: \"Directory\",\n  serializedName: \"DirectoryItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileProperty: coreHttp.CompositeMapper = {\n  serializedName: \"FileProperty\",\n  type: {\n    name: \"Composite\",\n    className: \"FileProperty\",\n    modelProperties: {\n      contentLength: {\n        xmlName: \"Content-Length\",\n        required: true,\n        serializedName: \"Content-Length\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileItem: coreHttp.CompositeMapper = {\n  xmlName: \"File\",\n  serializedName: \"FileItem\",\n  type: {\n    name: \"Composite\",\n    className: \"FileItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"FileProperty\"\n        }\n      }\n    }\n  }\n};\n\nexport const FilesAndDirectoriesListSegment: coreHttp.CompositeMapper = {\n  xmlName: \"Entries\",\n  serializedName: \"FilesAndDirectoriesListSegment\",\n  type: {\n    name: \"Composite\",\n    className: \"FilesAndDirectoriesListSegment\",\n    modelProperties: {\n      directoryItems: {\n        xmlName: \"DirectoryItems\",\n        xmlElementName: \"Directory\",\n        required: true,\n        serializedName: \"DirectoryItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DirectoryItem\"\n            }\n          }\n        }\n      },\n      fileItems: {\n        xmlName: \"FileItems\",\n        xmlElementName: \"File\",\n        required: true,\n        serializedName: \"FileItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FileItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HandleItem: coreHttp.CompositeMapper = {\n  xmlName: \"Handle\",\n  serializedName: \"HandleItem\",\n  type: {\n    name: \"Composite\",\n    className: \"HandleItem\",\n    modelProperties: {\n      handleId: {\n        xmlName: \"HandleId\",\n        required: true,\n        serializedName: \"HandleId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      path: {\n        xmlName: \"Path\",\n        required: true,\n        serializedName: \"Path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileId: {\n        xmlName: \"FileId\",\n        required: true,\n        serializedName: \"FileId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      parentId: {\n        xmlName: \"ParentId\",\n        serializedName: \"ParentId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sessionId: {\n        xmlName: \"SessionId\",\n        required: true,\n        serializedName: \"SessionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientIp: {\n        xmlName: \"ClientIp\",\n        required: true,\n        serializedName: \"ClientIp\",\n        type: {\n          name: \"String\"\n        }\n      },\n      openTime: {\n        xmlName: \"OpenTime\",\n        required: true,\n        serializedName: \"OpenTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      lastReconnectTime: {\n        xmlName: \"LastReconnectTime\",\n        serializedName: \"LastReconnectTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListFilesAndDirectoriesSegmentResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListFilesAndDirectoriesSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListFilesAndDirectoriesSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shareName: {\n        xmlIsAttribute: true,\n        xmlName: \"ShareName\",\n        required: true,\n        serializedName: \"ShareName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shareSnapshot: {\n        xmlIsAttribute: true,\n        xmlName: \"ShareSnapshot\",\n        serializedName: \"ShareSnapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      directoryPath: {\n        xmlIsAttribute: true,\n        xmlName: \"DirectoryPath\",\n        required: true,\n        serializedName: \"DirectoryPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        required: true,\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      segment: {\n        xmlName: \"Entries\",\n        required: true,\n        serializedName: \"Segment\",\n        type: {\n          name: \"Composite\",\n          className: \"FilesAndDirectoriesListSegment\"\n        }\n      },\n      continuationToken: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListHandlesResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListHandlesResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListHandlesResponse\",\n    modelProperties: {\n      handleList: {\n        xmlIsWrapped: true,\n        xmlName: \"Entries\",\n        xmlElementName: \"Handle\",\n        serializedName: \"HandleList\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HandleItem\"\n            }\n          }\n        }\n      },\n      continuationToken: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareProperties: coreHttp.CompositeMapper = {\n  serializedName: \"ShareProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareProperties\",\n    modelProperties: {\n      lastModified: {\n        xmlName: \"Last-Modified\",\n        required: true,\n        serializedName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        xmlName: \"Etag\",\n        required: true,\n        serializedName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      quota: {\n        xmlName: \"Quota\",\n        required: true,\n        serializedName: \"Quota\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareItem: coreHttp.CompositeMapper = {\n  xmlName: \"Share\",\n  serializedName: \"ShareItem\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      snapshot: {\n        xmlName: \"Snapshot\",\n        serializedName: \"Snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ShareProperties\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListSharesResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListSharesResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListSharesResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      shareItems: {\n        xmlIsWrapped: true,\n        xmlName: \"Shares\",\n        xmlElementName: \"Share\",\n        serializedName: \"ShareItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ShareItem\"\n            }\n          }\n        }\n      },\n      continuationToken: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        xmlName: \"Days\",\n        serializedName: \"Days\",\n        constraints: {\n          InclusiveMaximum: 365,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: coreHttp.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        required: true,\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        xmlName: \"IncludeAPIs\",\n        serializedName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const Range: coreHttp.CompositeMapper = {\n  serializedName: \"Range\",\n  type: {\n    name: \"Composite\",\n    className: \"Range\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        xmlName: \"End\",\n        required: true,\n        serializedName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      message: {\n        xmlName: \"Message\",\n        serializedName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareStats: coreHttp.CompositeMapper = {\n  serializedName: \"ShareStats\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareStats\",\n    modelProperties: {\n      shareUsageBytes: {\n        xmlName: \"ShareUsageBytes\",\n        required: true,\n        serializedName: \"ShareUsageBytes\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: coreHttp.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        xmlName: \"Id\",\n        required: true,\n        serializedName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        xmlName: \"AccessPolicy\",\n        serializedName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const Permission: coreHttp.CompositeMapper = {\n  serializedName: \"Permission\",\n  type: {\n    name: \"Composite\",\n    className: \"Permission\",\n    modelProperties: {\n      permission: {\n        xmlName: \"Permission\",\n        required: true,\n        serializedName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileServiceProperties: coreHttp.CompositeMapper = {\n  xmlName: \"StorageServiceProperties\",\n  serializedName: \"FileServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"FileServiceProperties\",\n    modelProperties: {\n      hourMetrics: {\n        xmlName: \"HourMetrics\",\n        serializedName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        xmlName: \"MinuteMetrics\",\n        serializedName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        xmlIsWrapped: true,\n        xmlName: \"Cors\",\n        xmlElementName: \"CorsRule\",\n        serializedName: \"Cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FileHttpHeaders: coreHttp.CompositeMapper = {\n  xmlName: \"fileHttpHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileHttpHeaders\",\n    modelProperties: {\n      fileContentType: {\n        xmlName: \"fileContentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileContentEncoding: {\n        xmlName: \"fileContentEncoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileContentLanguage: {\n        xmlName: \"fileContentLanguage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCacheControl: {\n        xmlName: \"fileCacheControl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileContentMD5: {\n        xmlName: \"fileContentMD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      fileContentDisposition: {\n        xmlName: \"fileContentDisposition\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceModifiedAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"source-modified-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"SourceModifiedAccessConditions\",\n    modelProperties: {\n      sourceIfMatchCrc64: {\n        xmlName: \"sourceIfMatchCrc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      sourceIfNoneMatchCrc64: {\n        xmlName: \"sourceIfNoneMatchCrc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-setproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListSharesSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-listsharessegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListSharesSegmentHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      quota: {\n        serializedName: \"x-ms-share-quota\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareCreateSnapshotHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-createsnapshot-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareCreateSnapshotHeaders\",\n    modelProperties: {\n      snapshot: {\n        serializedName: \"x-ms-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareCreatePermissionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-createpermission-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareCreatePermissionHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareGetPermissionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-getpermission-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareGetPermissionHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareSetQuotaHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-setquota-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareSetQuotaHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareSetMetadataHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareGetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-getaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareGetAccessPolicyHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareSetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-setaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareSetAccessPolicyHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ShareGetStatisticsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"share-getstatistics-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ShareGetStatisticsHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectorySetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-setproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectorySetPropertiesHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectorySetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectorySetMetadataHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryListFilesAndDirectoriesSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-listfilesanddirectoriessegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryListFilesAndDirectoriesSegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryListHandlesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-listhandles-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryListHandlesHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DirectoryForceCloseHandlesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"directory-forceclosehandles-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"DirectoryForceCloseHandlesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      marker: {\n        serializedName: \"x-ms-marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      numberOfHandlesClosed: {\n        serializedName: \"x-ms-number-of-handles-closed\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileDownloadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-download-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileDownloadHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyCompletedOn: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      fileContentMD5: {\n        serializedName: \"x-ms-content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileGetPropertiesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      fileType: {\n        serializedName: \"x-ms-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyCompletedOn: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSetHTTPHeadersHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-sethttpheaders-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSetHTTPHeadersHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      filePermissionKey: {\n        serializedName: \"x-ms-file-permission-key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileAttributes: {\n        serializedName: \"x-ms-file-attributes\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileCreatedOn: {\n        serializedName: \"x-ms-file-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileLastWriteOn: {\n        serializedName: \"x-ms-file-last-write-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileChangeOn: {\n        serializedName: \"x-ms-file-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      fileId: {\n        serializedName: \"x-ms-file-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileParentId: {\n        serializedName: \"x-ms-file-parent-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSetMetadataHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileUploadRangeHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-uploadrange-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileUploadRangeHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileUploadRangeFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-uploadrangefromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileUploadRangeFromURLHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileGetRangeListHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-getrangelist-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileGetRangeListHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fileContentLength: {\n        serializedName: \"x-ms-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileStartCopyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-startcopy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileStartCopyHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileAbortCopyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-abortcopy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileAbortCopyHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileListHandlesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-listhandles-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileListHandlesHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileForceCloseHandlesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"file-forceclosehandles-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"FileForceCloseHandlesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      marker: {\n        serializedName: \"x-ms-marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      numberOfHandlesClosed: {\n        serializedName: \"x-ms-number-of-handles-closed\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const comp0: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'properties',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'list',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp10: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'rangelist',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp11: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'copy',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp2: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'snapshot',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp3: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'filepermission',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp4: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'metadata',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp5: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'acl',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp6: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'stats',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp7: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'listhandles',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp8: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'forceclosehandles',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp9: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'range',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const contentLength: coreHttp.OperationParameter = {\n  parameterPath: \"contentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"Content-Length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const contentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"contentMD5\"\n  ],\n  mapper: {\n    serializedName: \"Content-MD5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const copyActionAbortConstant: coreHttp.OperationParameter = {\n  parameterPath: \"copyActionAbortConstant\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-copy-action\",\n    defaultValue: 'abort',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copyId: coreHttp.OperationQueryParameter = {\n  parameterPath: \"copyId\",\n  mapper: {\n    required: true,\n    serializedName: \"copyid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copySource: coreHttp.OperationParameter = {\n  parameterPath: \"copySource\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const deleteSnapshots: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"deleteSnapshots\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-delete-snapshots\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"include\"\n      ]\n    }\n  }\n};\nexport const fileAttributes: coreHttp.OperationParameter = {\n  parameterPath: \"fileAttributes\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-file-attributes\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileCacheControl: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileCacheControl\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-cache-control\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileContentDisposition: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileContentDisposition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-disposition\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileContentEncoding: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileContentEncoding\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-encoding\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileContentLanguage: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileContentLanguage\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileContentLength0: coreHttp.OperationParameter = {\n  parameterPath: \"fileContentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-content-length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const fileContentLength1: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileContentLength\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const fileContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const fileContentType: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"fileHttpHeaders\",\n    \"fileContentType\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-content-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileCreatedOn: coreHttp.OperationParameter = {\n  parameterPath: \"fileCreatedOn\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-file-creation-time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileLastWriteOn: coreHttp.OperationParameter = {\n  parameterPath: \"fileLastWriteOn\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-file-last-write-time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const filePermission: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"filePermission\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-file-permission\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const filePermissionKey0: coreHttp.OperationParameter = {\n  parameterPath: \"filePermissionKey\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-file-permission-key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const filePermissionKey1: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"filePermissionKey\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-file-permission-key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileRangeWrite: coreHttp.OperationParameter = {\n  parameterPath: \"fileRangeWrite\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-write\",\n    defaultValue: 'update',\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"update\",\n        \"clear\"\n      ]\n    }\n  }\n};\nexport const fileRangeWriteFromUrl: coreHttp.OperationParameter = {\n  parameterPath: \"fileRangeWriteFromUrl\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-write\",\n    defaultValue: 'update',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const fileTypeConstant: coreHttp.OperationParameter = {\n  parameterPath: \"fileTypeConstant\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-type\",\n    defaultValue: 'file',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const handleId: coreHttp.OperationParameter = {\n  parameterPath: \"handleId\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-handle-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const include: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"snapshots\",\n            \"metadata\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: coreHttp.QueryCollectionFormat.Csv\n};\nexport const marker: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"marker\"\n  ],\n  mapper: {\n    serializedName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxResults: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"maxResults\"\n  ],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const metadata: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"metadata\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-meta\",\n    type: {\n      name: \"Dictionary\",\n      value: {\n        type: {\n          name: \"String\"\n        }\n      }\n    },\n    headerCollectionPrefix: \"x-ms-meta-\"\n  }\n};\nexport const prefix: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prefix\"\n  ],\n  mapper: {\n    serializedName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const quota: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"quota\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-share-quota\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const range0: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"range\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const range1: coreHttp.OperationParameter = {\n  parameterPath: \"range\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const rangeGetContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"rangeGetContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-md5\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const recursive: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"recursive\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-recursive\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const restype0: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'service',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'share',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype2: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'directory',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const shareSnapshot: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"shareSnapshot\"\n  ],\n  mapper: {\n    serializedName: \"sharesnapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceContentCrc64: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceContentCrc64\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-content-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const sourceIfMatchCrc64: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfMatchCrc64\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-match-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const sourceIfNoneMatchCrc64: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfNoneMatchCrc64\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-none-match-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const sourceRange: coreHttp.OperationParameter = {\n  parameterPath: \"sourceRange\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const timeoutInSeconds: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"timeoutInSeconds\"\n  ],\n  mapper: {\n    serializedName: \"timeout\",\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const url: coreHttp.OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    required: true,\n    serializedName: \"url\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const version: coreHttp.OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/serviceMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Service.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's File service endpoint, including properties for Storage\n   * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.\n   * @param properties The StorageService properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceSetPropertiesResponse>\n   */\n  setProperties(properties: Models.FileServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams): Promise<Models.ServiceSetPropertiesResponse>;\n  /**\n   * @param properties The StorageService properties.\n   * @param callback The callback\n   */\n  setProperties(properties: Models.FileServiceProperties, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param properties The StorageService properties.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(properties: Models.FileServiceProperties, options: Models.ServiceSetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setProperties(properties: Models.FileServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        properties,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * Gets the properties of a storage account's File service, including properties for Storage\n   * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams): Promise<Models.ServiceGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<Models.FileServiceProperties>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ServiceGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<Models.FileServiceProperties>): void;\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams | coreHttp.ServiceCallback<Models.FileServiceProperties>, callback?: coreHttp.ServiceCallback<Models.FileServiceProperties>): Promise<Models.ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * The List Shares Segment operation returns a list of the shares and share snapshots under the\n   * specified account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceListSharesSegmentResponse>\n   */\n  listSharesSegment(options?: Models.ServiceListSharesSegmentOptionalParams): Promise<Models.ServiceListSharesSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listSharesSegment(callback: coreHttp.ServiceCallback<Models.ListSharesResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listSharesSegment(options: Models.ServiceListSharesSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListSharesResponse>): void;\n  listSharesSegment(options?: Models.ServiceListSharesSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListSharesResponse>, callback?: coreHttp.ServiceCallback<Models.ListSharesResponse>): Promise<Models.ServiceListSharesSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listSharesSegmentOperationSpec,\n      callback) as Promise<Models.ServiceListSharesSegmentResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  requestBody: {\n    parameterPath: \"properties\",\n    mapper: {\n      ...Mappers.FileServiceProperties,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.FileServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listSharesSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.include,\n    Parameters.timeoutInSeconds,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListSharesResponse,\n      headersMapper: Mappers.ServiceListSharesSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListSharesSegmentHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/shareMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Share. */\nexport class Share {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Share.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new share under the specified account. If the share with the same name already exists,\n   * the operation fails.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareCreateResponse>\n   */\n  create(options?: Models.ShareCreateOptionalParams): Promise<Models.ShareCreateResponse>;\n  /**\n   * @param callback The callback\n   */\n  create(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(options: Models.ShareCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(options?: Models.ShareCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.ShareCreateResponse>;\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified share or share\n   * snapshot. The data returned does not include the share's list of files.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ShareGetPropertiesOptionalParams): Promise<Models.ShareGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ShareGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.ShareGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ShareGetPropertiesResponse>;\n  }\n\n  /**\n   * Operation marks the specified share or share snapshot for deletion. The share or share snapshot\n   * and any files contained within it are later deleted during garbage collection.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareDeleteResponse>\n   */\n  deleteMethod(options?: Models.ShareDeleteMethodOptionalParams): Promise<Models.ShareDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.ShareDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.ShareDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.ShareDeleteResponse>;\n  }\n\n  /**\n   * Creates a read-only snapshot of a share.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareCreateSnapshotResponse>\n   */\n  createSnapshot(options?: Models.ShareCreateSnapshotOptionalParams): Promise<Models.ShareCreateSnapshotResponse>;\n  /**\n   * @param callback The callback\n   */\n  createSnapshot(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createSnapshot(options: Models.ShareCreateSnapshotOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  createSnapshot(options?: Models.ShareCreateSnapshotOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareCreateSnapshotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createSnapshotOperationSpec,\n      callback) as Promise<Models.ShareCreateSnapshotResponse>;\n  }\n\n  /**\n   * Create a permission (a security descriptor).\n   * @param permission Permission(a security descriptor) described in the SDDL.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareCreatePermissionResponse>\n   */\n  createPermission(permission: Models.Permission, options?: Models.ShareCreatePermissionOptionalParams): Promise<Models.ShareCreatePermissionResponse>;\n  /**\n   * @param permission Permission(a security descriptor) described in the SDDL.\n   * @param callback The callback\n   */\n  createPermission(permission: Models.Permission, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param permission Permission(a security descriptor) described in the SDDL.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createPermission(permission: Models.Permission, options: Models.ShareCreatePermissionOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  createPermission(permission: Models.Permission, options?: Models.ShareCreatePermissionOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareCreatePermissionResponse> {\n    return this.client.sendOperationRequest(\n      {\n        permission,\n        options\n      },\n      createPermissionOperationSpec,\n      callback) as Promise<Models.ShareCreatePermissionResponse>;\n  }\n\n  /**\n   * Returns the permission (security descriptor) for a given key\n   * @param filePermissionKey Key of the permission to be set for the directory/file. Note: Only one\n   * of the x-ms-file-permission or x-ms-file-permission-key should be specified.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareGetPermissionResponse>\n   */\n  getPermission(filePermissionKey: string, options?: Models.ShareGetPermissionOptionalParams): Promise<Models.ShareGetPermissionResponse>;\n  /**\n   * @param filePermissionKey Key of the permission to be set for the directory/file. Note: Only one\n   * of the x-ms-file-permission or x-ms-file-permission-key should be specified.\n   * @param callback The callback\n   */\n  getPermission(filePermissionKey: string, callback: coreHttp.ServiceCallback<Models.Permission>): void;\n  /**\n   * @param filePermissionKey Key of the permission to be set for the directory/file. Note: Only one\n   * of the x-ms-file-permission or x-ms-file-permission-key should be specified.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getPermission(filePermissionKey: string, options: Models.ShareGetPermissionOptionalParams, callback: coreHttp.ServiceCallback<Models.Permission>): void;\n  getPermission(filePermissionKey: string, options?: Models.ShareGetPermissionOptionalParams | coreHttp.ServiceCallback<Models.Permission>, callback?: coreHttp.ServiceCallback<Models.Permission>): Promise<Models.ShareGetPermissionResponse> {\n    return this.client.sendOperationRequest(\n      {\n        filePermissionKey,\n        options\n      },\n      getPermissionOperationSpec,\n      callback) as Promise<Models.ShareGetPermissionResponse>;\n  }\n\n  /**\n   * Sets quota for the specified share.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareSetQuotaResponse>\n   */\n  setQuota(options?: Models.ShareSetQuotaOptionalParams): Promise<Models.ShareSetQuotaResponse>;\n  /**\n   * @param callback The callback\n   */\n  setQuota(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setQuota(options: Models.ShareSetQuotaOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setQuota(options?: Models.ShareSetQuotaOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareSetQuotaResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setQuotaOperationSpec,\n      callback) as Promise<Models.ShareSetQuotaResponse>;\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified share.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareSetMetadataResponse>\n   */\n  setMetadata(options?: Models.ShareSetMetadataOptionalParams): Promise<Models.ShareSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.ShareSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.ShareSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.ShareSetMetadataResponse>;\n  }\n\n  /**\n   * Returns information about stored access policies specified on the share.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareGetAccessPolicyResponse>\n   */\n  getAccessPolicy(options?: Models.ShareGetAccessPolicyOptionalParams): Promise<Models.ShareGetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccessPolicy(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccessPolicy(options: Models.ShareGetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  getAccessPolicy(options?: Models.ShareGetAccessPolicyOptionalParams | coreHttp.ServiceCallback<Models.SignedIdentifier[]>, callback?: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): Promise<Models.ShareGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccessPolicyOperationSpec,\n      callback) as Promise<Models.ShareGetAccessPolicyResponse>;\n  }\n\n  /**\n   * Sets a stored access policy for use with shared access signatures.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareSetAccessPolicyResponse>\n   */\n  setAccessPolicy(options?: Models.ShareSetAccessPolicyOptionalParams): Promise<Models.ShareSetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  setAccessPolicy(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setAccessPolicy(options: Models.ShareSetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setAccessPolicy(options?: Models.ShareSetAccessPolicyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ShareSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setAccessPolicyOperationSpec,\n      callback) as Promise<Models.ShareSetAccessPolicyResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to the share.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ShareGetStatisticsResponse>\n   */\n  getStatistics(options?: Models.ShareGetStatisticsOptionalParams): Promise<Models.ShareGetStatisticsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getStatistics(callback: coreHttp.ServiceCallback<Models.ShareStats>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatistics(options: Models.ShareGetStatisticsOptionalParams, callback: coreHttp.ServiceCallback<Models.ShareStats>): void;\n  getStatistics(options?: Models.ShareGetStatisticsOptionalParams | coreHttp.ServiceCallback<Models.ShareStats>, callback?: coreHttp.ServiceCallback<Models.ShareStats>): Promise<Models.ShareGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getStatisticsOperationSpec,\n      callback) as Promise<Models.ShareGetStatisticsResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.quota,\n    Parameters.version\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ShareCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.restype1\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ShareGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.restype1\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.deleteSnapshots\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.ShareDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst createSnapshotOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ShareCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareCreateSnapshotHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst createPermissionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  requestBody: {\n    parameterPath: \"permission\",\n    mapper: {\n      ...Mappers.Permission,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ShareCreatePermissionHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareCreatePermissionHeaders\n    }\n  },\n  isXML: false,\n  serializer\n};\n\nconst getPermissionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.filePermissionKey0,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Permission,\n      headersMapper: Mappers.ShareGetPermissionHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareGetPermissionHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setQuotaOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.quota\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ShareSetQuotaHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareSetQuotaHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ShareSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareSetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"SignedIdentifier\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.ShareGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareGetAccessPolicyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"shareAcl\"\n    ],\n    mapper: {\n      xmlName: \"SignedIdentifiers\",\n      xmlElementName: \"SignedIdentifier\",\n      serializedName: \"shareAcl\",\n      type: {\n        name: \"Sequence\",\n        element: {\n          type: {\n            name: \"Composite\",\n            className: \"SignedIdentifier\"\n          }\n        }\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ShareSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareSetAccessPolicyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ShareStats,\n      headersMapper: Mappers.ShareGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ShareGetStatisticsHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/directoryMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Directory. */\nexport class Directory {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Directory.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new directory under the specified share or parent directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryCreateResponse>\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectoryCreateOptionalParams): Promise<Models.DirectoryCreateResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param callback The callback\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectoryCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectoryCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.DirectoryCreateResponse>;\n  }\n\n  /**\n   * Returns all system properties for the specified directory, and can also be used to check the\n   * existence of a directory. The data returned does not include the files in the directory or any\n   * subdirectories.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryGetPropertiesResponse>\n   */\n  getProperties(options?: Models.DirectoryGetPropertiesOptionalParams): Promise<Models.DirectoryGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.DirectoryGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.DirectoryGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.DirectoryGetPropertiesResponse>;\n  }\n\n  /**\n   * Removes the specified empty directory. Note that the directory must be empty before it can be\n   * deleted.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryDeleteResponse>\n   */\n  deleteMethod(options?: Models.DirectoryDeleteMethodOptionalParams): Promise<Models.DirectoryDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.DirectoryDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.DirectoryDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.DirectoryDeleteResponse>;\n  }\n\n  /**\n   * Sets properties on the directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectorySetPropertiesResponse>\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectorySetPropertiesOptionalParams): Promise<Models.DirectorySetPropertiesResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param callback The callback\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectorySetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectorySetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectorySetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.DirectorySetPropertiesResponse>;\n  }\n\n  /**\n   * Updates user defined metadata for the specified directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectorySetMetadataResponse>\n   */\n  setMetadata(options?: Models.DirectorySetMetadataOptionalParams): Promise<Models.DirectorySetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.DirectorySetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.DirectorySetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectorySetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.DirectorySetMetadataResponse>;\n  }\n\n  /**\n   * Returns a list of files or directories under the specified share or directory. It lists the\n   * contents only for a single level of the directory hierarchy.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>\n   */\n  listFilesAndDirectoriesSegment(options?: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams): Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listFilesAndDirectoriesSegment(callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listFilesAndDirectoriesSegment(options: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;\n  listFilesAndDirectoriesSegment(options?: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listFilesAndDirectoriesSegmentOperationSpec,\n      callback) as Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>;\n  }\n\n  /**\n   * Lists handles for directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryListHandlesResponse>\n   */\n  listHandles(options?: Models.DirectoryListHandlesOptionalParams): Promise<Models.DirectoryListHandlesResponse>;\n  /**\n   * @param callback The callback\n   */\n  listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listHandles(options: Models.DirectoryListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  listHandles(options?: Models.DirectoryListHandlesOptionalParams | coreHttp.ServiceCallback<Models.ListHandlesResponse>, callback?: coreHttp.ServiceCallback<Models.ListHandlesResponse>): Promise<Models.DirectoryListHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listHandlesOperationSpec,\n      callback) as Promise<Models.DirectoryListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given directory.\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DirectoryForceCloseHandlesResponse>\n   */\n  forceCloseHandles(handleId: string, options?: Models.DirectoryForceCloseHandlesOptionalParams): Promise<Models.DirectoryForceCloseHandlesResponse>;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, options: Models.DirectoryForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  forceCloseHandles(handleId: string, options?: Models.DirectoryForceCloseHandlesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DirectoryForceCloseHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        handleId,\n        options\n      },\n      forceCloseHandlesOperationSpec,\n      callback) as Promise<Models.DirectoryForceCloseHandlesResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.DirectoryCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listFilesAndDirectoriesSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.shareSnapshot,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListFilesAndDirectoriesSegmentResponse,\n      headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.comp7\n  ],\n  headerParameters: [\n    Parameters.recursive,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.DirectoryListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryListHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.handleId,\n    Parameters.recursive,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryForceCloseHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/fileMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a File. */\nexport class File {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a File.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new file or replaces a file. Note it only initializes the file with no content.\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileCreateResponse>\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileCreateOptionalParams): Promise<Models.FileCreateResponse>;\n  /**\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param callback The callback\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileContentLength,\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.FileCreateResponse>;\n  }\n\n  /**\n   * Reads or downloads a file from the system, including its metadata and properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileDownloadResponse>\n   */\n  download(options?: Models.FileDownloadOptionalParams): Promise<Models.FileDownloadResponse>;\n  /**\n   * @param callback The callback\n   */\n  download(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  download(options: Models.FileDownloadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  download(options?: Models.FileDownloadOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileDownloadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      downloadOperationSpec,\n      callback) as Promise<Models.FileDownloadResponse>;\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.\n   * It does not return the content of the file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileGetPropertiesResponse>\n   */\n  getProperties(options?: Models.FileGetPropertiesOptionalParams): Promise<Models.FileGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.FileGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.FileGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.FileGetPropertiesResponse>;\n  }\n\n  /**\n   * removes the file from the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileDeleteResponse>\n   */\n  deleteMethod(options?: Models.FileDeleteMethodOptionalParams): Promise<Models.FileDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.FileDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.FileDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.FileDeleteResponse>;\n  }\n\n  /**\n   * Sets HTTP headers on the file.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileSetHTTPHeadersResponse>\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileSetHTTPHeadersOptionalParams): Promise<Models.FileSetHTTPHeadersResponse>;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param callback The callback\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory.\n   * @param fileLastWriteOn Last write time for the file/directory.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileSetHTTPHeadersOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileSetHTTPHeadersOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileSetHTTPHeadersResponse> {\n    return this.client.sendOperationRequest(\n      {\n        fileAttributes,\n        fileCreatedOn,\n        fileLastWriteOn,\n        options\n      },\n      setHTTPHeadersOperationSpec,\n      callback) as Promise<Models.FileSetHTTPHeadersResponse>;\n  }\n\n  /**\n   * Updates user-defined metadata for the specified file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileSetMetadataResponse>\n   */\n  setMetadata(options?: Models.FileSetMetadataOptionalParams): Promise<Models.FileSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.FileSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.FileSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.FileSetMetadataResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file.\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileUploadRangeResponse>\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options?: Models.FileUploadRangeOptionalParams): Promise<Models.FileUploadRangeResponse>;\n  /**\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param callback The callback\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range\n   * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear\n   * operation, the range can be up to the value of the file's full size. The File service accepts\n   * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be\n   * specified in the following format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified\n   * by the request body into the specified range. The Range and Content-Length headers must match to\n   * perform the update. - Clear: Clears the specified range and releases the space used in storage\n   * for that range. To clear a range, set the Content-Length header to zero, and set the Range\n   * header to a value that indicates the range to clear, up to maximum file size. Possible values\n   * include: 'update', 'clear'\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options: Models.FileUploadRangeOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options?: Models.FileUploadRangeOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileUploadRangeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        range,\n        fileRangeWrite,\n        contentLength,\n        options\n      },\n      uploadRangeOperationSpec,\n      callback) as Promise<Models.FileUploadRangeResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file where the contents are read from a URL.\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param sourceRange Bytes of source data in the specified range.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileUploadRangeFromURLResponse>\n   */\n  uploadRangeFromURL(range: string, copySource: string, sourceRange: string, contentLength: number, options?: Models.FileUploadRangeFromURLOptionalParams): Promise<Models.FileUploadRangeFromURLResponse>;\n  /**\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param sourceRange Bytes of source data in the specified range.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param callback The callback\n   */\n  uploadRangeFromURL(range: string, copySource: string, sourceRange: string, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param sourceRange Bytes of source data in the specified range.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When\n   * the x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadRangeFromURL(range: string, copySource: string, sourceRange: string, contentLength: number, options: Models.FileUploadRangeFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  uploadRangeFromURL(range: string, copySource: string, sourceRange: string, contentLength: number, options?: Models.FileUploadRangeFromURLOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileUploadRangeFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        range,\n        copySource,\n        sourceRange,\n        contentLength,\n        options\n      },\n      uploadRangeFromURLOperationSpec,\n      callback) as Promise<Models.FileUploadRangeFromURLResponse>;\n  }\n\n  /**\n   * Returns the list of valid ranges for a file.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileGetRangeListResponse>\n   */\n  getRangeList(options?: Models.FileGetRangeListOptionalParams): Promise<Models.FileGetRangeListResponse>;\n  /**\n   * @param callback The callback\n   */\n  getRangeList(callback: coreHttp.ServiceCallback<Models.Range[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getRangeList(options: Models.FileGetRangeListOptionalParams, callback: coreHttp.ServiceCallback<Models.Range[]>): void;\n  getRangeList(options?: Models.FileGetRangeListOptionalParams | coreHttp.ServiceCallback<Models.Range[]>, callback?: coreHttp.ServiceCallback<Models.Range[]>): Promise<Models.FileGetRangeListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getRangeListOperationSpec,\n      callback) as Promise<Models.FileGetRangeListResponse>;\n  }\n\n  /**\n   * Copies a blob or file to a destination file within the storage account.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileStartCopyResponse>\n   */\n  startCopy(copySource: string, options?: Models.FileStartCopyOptionalParams): Promise<Models.FileStartCopyResponse>;\n  /**\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param callback The callback\n   */\n  startCopy(copySource: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a\n   * file to another file within the same storage account, you may use Shared Key to authenticate the\n   * source file. If you are copying a file from another storage account, or if you are copying a\n   * blob from the same storage account or another storage account, then you must authenticate the\n   * source file or blob using a shared access signature. If the source is a public blob, no\n   * authentication is required to perform the copy operation. A file in a share snapshot can also be\n   * specified as a copy source.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  startCopy(copySource: string, options: Models.FileStartCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  startCopy(copySource: string, options?: Models.FileStartCopyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileStartCopyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      startCopyOperationSpec,\n      callback) as Promise<Models.FileStartCopyResponse>;\n  }\n\n  /**\n   * Aborts a pending Copy File operation, and leaves a destination file with zero length and full\n   * metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileAbortCopyResponse>\n   */\n  abortCopy(copyId: string, options?: Models.FileAbortCopyOptionalParams): Promise<Models.FileAbortCopyResponse>;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param callback The callback\n   */\n  abortCopy(copyId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  abortCopy(copyId: string, options: Models.FileAbortCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  abortCopy(copyId: string, options?: Models.FileAbortCopyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileAbortCopyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copyId,\n        options\n      },\n      abortCopyOperationSpec,\n      callback) as Promise<Models.FileAbortCopyResponse>;\n  }\n\n  /**\n   * Lists handles for file\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileListHandlesResponse>\n   */\n  listHandles(options?: Models.FileListHandlesOptionalParams): Promise<Models.FileListHandlesResponse>;\n  /**\n   * @param callback The callback\n   */\n  listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listHandles(options: Models.FileListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;\n  listHandles(options?: Models.FileListHandlesOptionalParams | coreHttp.ServiceCallback<Models.ListHandlesResponse>, callback?: coreHttp.ServiceCallback<Models.ListHandlesResponse>): Promise<Models.FileListHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listHandlesOperationSpec,\n      callback) as Promise<Models.FileListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given file\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FileForceCloseHandlesResponse>\n   */\n  forceCloseHandles(handleId: string, options?: Models.FileForceCloseHandlesOptionalParams): Promise<Models.FileForceCloseHandlesResponse>;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)\n   * is a wildcard that specifies all handles.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  forceCloseHandles(handleId: string, options: Models.FileForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  forceCloseHandles(handleId: string, options?: Models.FileForceCloseHandlesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.FileForceCloseHandlesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        handleId,\n        options\n      },\n      forceCloseHandlesOperationSpec,\n      callback) as Promise<Models.FileForceCloseHandlesResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.fileContentLength0,\n    Parameters.fileTypeConstant,\n    Parameters.metadata,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.FileCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileCreateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.range0,\n    Parameters.rangeGetContentMD5\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDownloadHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetPropertiesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.FileDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setHTTPHeadersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.fileContentLength1,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetHTTPHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetHTTPHeadersHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetMetadataHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadRangeOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.range1,\n    Parameters.fileRangeWrite,\n    Parameters.contentLength,\n    Parameters.contentMD5,\n    Parameters.version\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"optionalbody\"\n    ],\n    mapper: {\n      serializedName: \"optionalbody\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadRangeFromURLOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.range1,\n    Parameters.copySource,\n    Parameters.sourceRange,\n    Parameters.fileRangeWriteFromUrl,\n    Parameters.contentLength,\n    Parameters.sourceContentCrc64,\n    Parameters.version,\n    Parameters.sourceIfMatchCrc64,\n    Parameters.sourceIfNoneMatchCrc64\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeFromURLHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getRangeListOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.shareSnapshot,\n    Parameters.timeoutInSeconds,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.range0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"Range\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Range\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.FileGetRangeListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetRangeListHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst startCopyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.metadata,\n    Parameters.copySource\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.FileStartCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileStartCopyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst abortCopyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.copyId,\n    Parameters.timeoutInSeconds,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.copyActionAbortConstant,\n    Parameters.version\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.FileAbortCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileAbortCopyHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.comp7\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.FileListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileListHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{shareName}/{directory}/{fileName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.handleId,\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.FileForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileForceCloseHandlesHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-file-share\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const SDK_VERSION: string = \"12.0.0-preview.6\";\nexport const SERVICE_VERSION: string = \"2019-02-02\";\n\nexport const FILE_MAX_SIZE_BYTES: number = 1024 * 1024 * 1024 * 1024; // 1TB\nexport const FILE_RANGE_MAX_SIZE_BYTES: number = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: number = 5;\nexport const DEFAULT_HIGH_LEVEL_CONCURRENCY: number = 5;\n\nexport const URLConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SHARE_SNAPSHOT: \"sharesnapshot\",\n    SIGNATURE: \"sig\",\n    TIMEOUT: \"timeout\"\n  }\n};\n\nexport const HttpUrlConnection = {\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"content-encoding\",\n  CONTENT_LANGUAGE: \"content-language\",\n  CONTENT_LENGTH: \"content-length\",\n  CONTENT_MD5: \"content-md5\",\n  CONTENT_TYPE: \"content-type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n  X_MS_DATE: \"x-ms-date\"\n};\n\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\n\nexport const StorageFileLoggingAllowedHeaderNames = [\n  \"Access-Control-Allow-Origin\",\n  \"Cache-Control\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"Request-Id\",\n  \"traceparent\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"x-ms-client-request-id\",\n  \"x-ms-date\",\n  \"x-ms-error-code\",\n  \"x-ms-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-version\",\n  \"Accept-Ranges\",\n  \"Content-Disposition\",\n  \"Content-Encoding\",\n  \"Content-Language\",\n  \"Content-MD5\",\n  \"Content-Range\",\n  \"ETag\",\n  \"Last-Modified\",\n  \"Server\",\n  \"Vary\",\n  \"x-ms-content-crc64\",\n  \"x-ms-copy-action\",\n  \"x-ms-copy-completion-time\",\n  \"x-ms-copy-id\",\n  \"x-ms-copy-progress\",\n  \"x-ms-copy-status\",\n  \"x-ms-has-immutability-policy\",\n  \"x-ms-has-legal-hold\",\n  \"x-ms-lease-state\",\n  \"x-ms-lease-status\",\n  \"x-ms-range\",\n  \"x-ms-request-server-encrypted\",\n  \"x-ms-server-encrypted\",\n  \"x-ms-snapshot\",\n  \"x-ms-source-range\",\n  \"x-ms-cache-control\",\n  \"x-ms-content-disposition\",\n  \"x-ms-content-encoding\",\n  \"x-ms-content-language\",\n  \"x-ms-content-length\",\n  \"x-ms-content-md5\",\n  \"x-ms-content-type\",\n  \"x-ms-file-attributes\",\n  \"x-ms-file-change-time\",\n  \"x-ms-file-creation-time\",\n  \"x-ms-file-id\",\n  \"x-ms-file-last-write-time\",\n  \"x-ms-file-parent-id\",\n  \"x-ms-handle-id\",\n  \"x-ms-number-of-handles-closed\",\n  \"x-ms-recursive\",\n  \"x-ms-share-quota\",\n  \"x-ms-type\",\n  \"x-ms-write\"\n];\n\nexport const StorageFileLoggingAllowedQueryParameters = [\n  \"comp\",\n  \"maxresults\",\n  \"rscc\",\n  \"rscd\",\n  \"rsce\",\n  \"rscl\",\n  \"rsct\",\n  \"se\",\n  \"si\",\n  \"sip\",\n  \"sp\",\n  \"spr\",\n  \"sr\",\n  \"srt\",\n  \"ss\",\n  \"st\",\n  \"sv\",\n  \"copyid\",\n  \"restype\"\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, isNode, URLBuilder } from \"@azure/core-http\";\nimport { HeaderConstants, URLConstants } from \"./constants\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XXXClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XXXClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" insead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `ContainerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @export\n * @param {string} url\n * @returns {string}\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n}\n\nfunction getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"FileEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n) {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @export\n * @param {string} connectionString Connection string.\n * @returns {ConnectionString} String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  // Matching FileEndpoint in the Account connection string\n  let fileEndpoint = getValueInConnString(connectionString, \"FileEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  fileEndpoint = fileEndpoint.endsWith(\"/\") ? fileEndpoint.slice(0, -1) : fileEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!fileEndpoint) {\n      // FileEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.file.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      fileEndpoint = `${defaultEndpointsProtocol}://${accountName}.file.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: fileEndpoint,\n      accountName,\n      accountKey\n    };\n  } else {\n    // SAS connection string\n\n    let accountName = getAccountNameFromUrl(fileEndpoint);\n    let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    if (!fileEndpoint) {\n      throw new Error(\"Invalid FileEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    } else if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: fileEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param {string} text\n * @returns {string}\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name String to be appended to URL\n * @returns {string} An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name Parameter name\n * @param {string} [value] Parameter value\n * @returns {string} An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @export\n * @param {string} url\n * @param {string} name\n * @returns {(string | string[] | undefined)}\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} host New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @export\n * @param {string} url Source URL string\n * @returns {(string | undefined)}\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @export\n * @param {string} url\n * @returns {{[key: string]: string}}\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual;\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @export\n * @param {Date} date\n * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @export\n * @param {string} content\n * @returns {string}\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @export\n * @param {string} encodedString\n * @returns {string}\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Delay specified time interval.\n *\n * @export\n * @param {number} timeInMs\n * @param {AbortSignalLike} [aborter]\n * @param {Error} [abortError]\n */\nexport async function delay(timeInMs: number, aborter?: AbortSignalLike, abortError?: Error) {\n  return new Promise((resolve, reject) => {\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @export\n * @param {string} currentString\n * @param {number} targetLength\n * @param {string} [padString=\" \"]\n * @returns {string}\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n\nexport function getAccountNameFromUrl(url: string): string {\n  // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n  // Slicing off '/' at the end if exists\n  try {\n    url = url.endsWith(\"/\") ? url.slice(0, -1) : url;\n\n    const accountName = url.substring(url.lastIndexOf(\"://\") + 3, url.lastIndexOf(\".file.\"));\n    if (!accountName) {\n      throw new Error(\"Provided accountName is invalid.\");\n    }\n    return accountName;\n  } catch (error) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\n\nexport function getShareNameAndPathFromUrl(\n  url: string\n): { shareName: string; filePathOrDirectoryPath: string } {\n  //  URL may look like the following\n  // \"https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString\";\n  // \"https://myaccount.file.core.windows.net/myshare/mydirectory/file\";\n  // \"https://myaccount.file.core.windows.net/myshare/mydirectory?sasString\";\n  // \"https://myaccount.file.core.windows.net/myshare/mydirectory\";\n  // \"https://myaccount.file.core.windows.net/myshare?sasString\";\n  // \"https://myaccount.file.core.windows.net/myshare\";\n  // mydirectory can consist of multiple directories - dir1/dir2/dir3\n\n  try {\n    let urlWithoutSAS = url.split(\"?\")[0]; // removing the sas part of url if present\n    urlWithoutSAS = urlWithoutSAS.endsWith(\"/\") ? urlWithoutSAS.slice(0, -1) : urlWithoutSAS; // Slicing off '/' at the end if exists\n\n    let shareNameAndFilePath = urlWithoutSAS.match(\"([^/]*)://([^/]*)/([^/]*)(/(.*))?\");\n\n    // decode the encoded shareName and filePath - to get all the special characters that might be present in it\n    const shareName = decodeURIComponent(shareNameAndFilePath![3]);\n    const filePathOrDirectoryPath = decodeURIComponent(shareNameAndFilePath![5]);\n\n    if (!shareName) {\n      throw new Error(\"Provided shareName is invalid.\");\n    } else {\n      return { shareName, filePathOrDirectoryPath };\n    }\n  } catch (error) {\n    throw new Error(\n      \"Unable to extract shareName and filePath/directoryPath with provided information.\"\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLParameter } from \"../utils/utils.common\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @export\n * @param {StorageRetryOptions} retryOptions\n * @returns\n */\nexport function NewStorageRetryPolicyFactory(\n  retryOptions?: StorageRetryOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\n/**\n * RetryPolicy types.\n *\n * @export\n * @enum {number}\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED\n}\n\n// Default values of RetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n *\n * @class RetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   *\n   * @private\n   * @type {RetryOptions}\n   * @memberof StorageRetryPolicy\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {StorageRetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]\n   * @memberof StorageRetryPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageRetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @param {HttpOperationResponse} response\n   * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageRetryPolicy\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry = true; // File doesn't suport secondary endpoint\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`\n      );\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      this.logf(\n        HttpPipelineLogLevel.ERROR,\n        `RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`\n      );\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return await this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @protected\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {HttpOperationResponse} [response]\n   * @param {RestError} [err]\n   * @returns {boolean}\n   * @memberof StorageRetryPolicy\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code &&\n            err.code\n              .toString()\n              .toUpperCase()\n              .includes(retriableError))\n        ) {\n          this.logf(\n            HttpPipelineLogLevel.INFO,\n            `RetryPolicy: Network error ${retriableError} found, will retry.`\n          );\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        this.logf(\n          HttpPipelineLogLevel.INFO,\n          `RetryPolicy: Will retry for status code ${statusCode}.`\n        );\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * This is to log for debugging purposes only.\n   * Comment/uncomment as necessary for releasing/debugging.\n   *\n   * @private\n   * @param {HttpPipelineLogLevel} level\n   * @param {string} message\n   * @memberof StorageRetryPolicy\n   */\n  // tslint:disable-next-line:variable-name\n  private logf(_level: HttpPipelineLogLevel, _message: string) {\n    // this.log(_level, _message);\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @private\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {AbortSignalLike} [abortSignal]\n   * @returns\n   * @memberof StorageRetryPolicy\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n *\n * @class StorageBrowserPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof StorageBrowserPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof StorageBrowserPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating BrowserPolicy objects.\n *\n * @export\n * @class StorageBrowserPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class StorageBrowserPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a StorageBrowserPolicyFactory object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {StorageBrowserPolicy}\n   * @memberof StorageBrowserPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageBrowserPolicy {\n    return new StorageBrowserPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport {\n  StorageRetryPolicy,\n  StorageRetryPolicyType\n} from \"./policies/StorageRetryPolicy\";\n\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n\n/**\n * Retry options interface.\n *\n * @export\n * @interface StorageRetryOptions\n */\nexport interface StorageRetryOptions {\n  /**\n   * Optional. StorageRetryPolicyType, default is exponential retry policy.\n   *\n   * @type {StorageRetryPolicyType}\n   * @memberof StorageRetryOptions\n   */\n  readonly retryPolicyType?: StorageRetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means that you accept our default timeout, 60s or 60 * 1000ms.\n   *\n   * NOTE: When transferring large amounts of data, the default TryTimeout will probably\n   * not be sufficient. You should override this value based on the bandwidth available to\n   * the host machine and proximity to the Storage service. A good starting point may be something\n   * like (60 seconds per MB of anticipated-payload-size)\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   *\n   * @type {number}\n   * @memberof StorageRetryOptions\n   */\n  readonly maxRetryDelayInMs?: number;\n}\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating StorageRetryPolicy objects.\n *\n * @export\n * @class StorageRetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class StorageRetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: StorageRetryOptions;\n\n  /**\n   * Creates an instance of StorageRetryPolicyFactory.\n   * @param {StorageRetryOptions} [retryOptions]\n   * @memberof StorageRetryPolicyFactory\n   */\n  constructor(retryOptions?: StorageRetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  /**\n   * Creates a StorageRetryPolicy object.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {StorageRetryPolicy}\n   * @memberof StorageRetryPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy {\n    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n *\n * @class TelemetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   *\n   * @type {string}\n   * @memberof TelemetryPolicy\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {TelemetryOptions} [telemetry]\n   * @memberof TelemetryPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof TelemetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating TelemetryPolicy objects.\n *\n * @export\n * @class TelemetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  private telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param {UserAgentOptions} [telemetry]\n   * @memberof TelemetryPolicyFactory\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = (telemetry.userAgentPrefix || \"\").replace(\" \", \"\");\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storagefile/11.0.0\n      const libInfo = `azsdk-js-storagefile/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {TelemetryPolicy}\n   * @memberof TelemetryPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  WebResource,\n  proxyPolicy,\n  isNode,\n  tracingPolicy,\n  logPolicy,\n  ProxyOptions,\n  UserAgentOptions,\n  KeepAliveOptions,\n  keepAlivePolicy,\n  generateClientRequestIdPolicy\n} from \"@azure/core-http\";\n\nimport { logger } from \"./log\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageRetryOptions, StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport {\n  StorageFileLoggingAllowedHeaderNames,\n  StorageFileLoggingAllowedQueryParameters\n} from \"./utils/constants\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  deserializationPolicy,\n  IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  WebResource,\n  BaseRequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n};\n\n/**\n * Option interface for Pipeline constructor.\n *\n * @export\n * @interface PipelineOptions\n */\nexport interface PipelineOptions {\n  /**\n   * Optional. Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof PipelineOptions\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling newPipeline().\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n * Refer to newPipeline() and provided policies as reference before\n * implementing your customized Pipeline.\n *\n * @export\n * @class Pipeline\n */\nexport class Pipeline {\n  /**\n   * A list of chained request policy factories.\n   *\n   * @type {RequestPolicyFactory[]}\n   * @memberof Pipeline\n   */\n  public readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   *\n   * @type {PipelineOptions}\n   * @memberof Pipeline\n   */\n  public readonly options: PipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param {RequestPolicyFactory[]} factories\n   * @param {PipelineOptions} [options={}]\n   * @memberof Pipeline\n   */\n  constructor(factories: RequestPolicyFactory[], options: PipelineOptions = {}) {\n    this.factories = factories;\n    this.options = options;\n  }\n\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which required by\n   * ServiceClient constructor.\n   *\n   * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.\n   * @memberof Pipeline\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.httpClient,\n      requestPolicyFactories: this.factories\n    };\n  }\n}\n\n/**\n * Option interface for newPipeline() function.\n *\n * @export\n * @interface StoragePipelineOptions\n */\nexport interface StoragePipelineOptions {\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxyOptions;\n  /**\n   * Options for adding user agent details to outgoing requests.\n   *\n   * @type {UserAgentOptions}\n   * @memberof StoragePipelineOptions\n   */\n  userAgentOptions?: UserAgentOptions;\n  /**\n   * Configures the built-in retry policy behavior.\n   *\n   * @type {StorageRetryOptions}\n   * @memberof StoragePipelineOptions\n   */\n  retryOptions?: StorageRetryOptions;\n  /**\n   * Keep alive configurations. Default keep-alive is enabled.\n   *\n   * @type {KeepAliveOptions}\n   * @memberof StoragePipelineOptions\n   */\n  keepAliveOptions?: KeepAliveOptions;\n  /**\n   * Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof StoragePipelineOptions\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @static\n * @param {Credential} credential Such as AnonymousCredential, StorageSharedKeyCredential.\n * @param {StoragePipelineOptions} [pipelineOptions] Optional. Options.\n * @returns {Pipeline} A new Pipeline object.\n * @memberof Pipeline\n */\nexport function newPipeline(\n  credential: Credential,\n  pipelineOptions: StoragePipelineOptions = {}\n): Pipeline {\n  // Order is important. Closer to the API at the top & closer to the network at the bottom.\n  // The credential's policy factory must appear close to the wire so it can sign any\n  // changes made by other factories (like UniqueRequestIDPolicyFactory)\n  const factories: RequestPolicyFactory[] = [\n    tracingPolicy(),\n    keepAlivePolicy(pipelineOptions.keepAliveOptions),\n    new TelemetryPolicyFactory(pipelineOptions.userAgentOptions),\n    generateClientRequestIdPolicy(),\n    new StorageBrowserPolicyFactory(),\n    deserializationPolicy(), // Default deserializationPolicy is provided by protocol layer\n    new StorageRetryPolicyFactory(pipelineOptions.retryOptions),\n    logPolicy({\n      logger: logger.info,\n      allowedHeaderNames: StorageFileLoggingAllowedHeaderNames,\n      allowedQueryParameters: StorageFileLoggingAllowedQueryParameters\n    })\n  ];\n\n  if (isNode) {\n    // ProxyPolicy is only avaiable in Node.js runtime, not in browsers\n    factories.push(proxyPolicy(pipelineOptions.proxyOptions));\n  }\n  factories.push(credential);\n\n  return new Pipeline(factories, {\n    httpClient: pipelineOptions.httpClient\n  });\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"azure-storage-file\";\nconst packageVersion = \"12.0.0-preview.6\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  version: string;\n  fileRangeWriteFromUrl: string;\n  url: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param version Specifies the version of the operation to use for this request.\n   * @param url The URL of the service account, share, directory or file that is the target of the\n   * desired operation.\n   * @param [options] The parameter options\n   */\n  constructor(version: string, url: string, options?: coreHttp.ServiceClientOptions) {\n    if (version == undefined) {\n      throw new Error(\"'version' cannot be null.\");\n    }\n    if (url == undefined) {\n      throw new Error(\"'url' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.fileRangeWriteFromUrl = 'update';\n    this.baseUri = \"{url}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.version = version;\n    this.url = url;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { escapeURLPath, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { SERVICE_VERSION } from \"./utils/constants\";\nimport { SpanOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  tracingOptions?: OperationTracingOptions;\n}\n\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n}\n\n/**\n * A StorageClient represents a base client class for ServiceClient, ContainerClient and etc.\n *\n * @export\n * @class StorageClient\n */\nexport abstract class StorageClient {\n  /**\n   * URL string value.\n   *\n   * @type {string}\n   * @memberof StorageClient\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   * @ignore\n   * @type {Pipeline}\n   * @memberof StorageClient\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   *\n   * @protected\n   * @type {StorageClientContext}\n   * @memberof StorageClient\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param {string} url\n   * @param {Pipeline} pipeline\n   * @memberof StorageClient\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      SERVICE_VERSION,\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    // Remove the default content-type in generated code of StorageClientContext\n    const storageClientContext = this.storageClientContext as any;\n    if (storageClientContext.requestContentType) {\n      storageClientContext.requestContentType = undefined;\n    }\n  }\n}\n","/**\n * This is a helper class to construct a string representing the NTFS attributes to a file or directory.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file#file-system-attributes\n *\n * @export\n * @class FileSystemAttributes\n */\nexport class FileSystemAttributes {\n    /**\n     * Creates a FileSystemAttributes from the specified attributes string. This method will throw an\n     * Error if it encounters a string that does not correspond to a valid attributes.\n     *\n     * @static\n     * @param {string} fileAttributes The value of header x-ms-file-attributes.\n     * @returns {FileSystemAttributes}\n     * @memberof FileSystemAttributes\n     */\n    public static parse(fileAttributes: string): FileSystemAttributes {\n      if (!fileAttributes) {\n        throw new RangeError(`Invalid fileAttributes: '${fileAttributes}'.`);\n      }\n\n      const fileSystemAttributes = new FileSystemAttributes();\n  \n      const attributes = fileAttributes.trim().split('|');\n\n      for (let str of attributes) {\n        str = str.trim();\n        switch (str) {\n          case \"ReadOnly\":\n            fileSystemAttributes.readonly = true;\n            break;\n          case \"Hidden\":\n            fileSystemAttributes.hidden = true;\n            break;\n          case \"System\":\n            fileSystemAttributes.system = true;\n            break;\n          case \"None\":\n            fileSystemAttributes.none = true;\n            break;\n          case \"Temporary\":\n            fileSystemAttributes.temporary = true;\n            break;\n          case \"Offline\":\n            fileSystemAttributes.offline = true;\n            break;\n          case \"Directory\":\n            fileSystemAttributes.directory = true;\n            break;\n          case \"Archive\":\n            fileSystemAttributes.archive = true;\n            break;\n          case \"NotContentIndexed\":\n            fileSystemAttributes.notContentIndexed = true;\n            break;\n          case \"NoScrubData\":\n            fileSystemAttributes.noScrubData = true;\n            break;\n          default:\n            throw new RangeError(`Invalid attribute: ${str}`);\n        }\n      }\n  \n      return fileSystemAttributes;\n    }\n  \n    /**\n     * Specifies a directory or file that is read-only.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public readonly: boolean = false;\n  \n    /**\n     * Specifies a directory or file is hidden.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public hidden: boolean = false;\n  \n    /**\n     * Specifies a directory or file that the operating system uses a part of, or uses exclusively.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public system: boolean = false;\n  \n    /**\n     * Specifies a directory or file that does not have other attributes set. This attribute is valid only when used alone.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public none: boolean = false;\n\n    /**\n     * Specifies the handle identifies a directory.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public directory: boolean = false;\n  \n    /**\n     * Specifies a directory or file is an archive. Applications typically use this attribute to mark files for backup or removal.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public archive: boolean = false;\n\n    /**\n     * Specifies if a file is temporary.\n     */\n    public temporary: boolean = false;\n\n    /**\n     * Specifies the data of a directory or file is not available immediately. \n     * This file system attribute is presented primarily to provide compatibility with Windows - Azure Files does not support with offline storage options.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public offline: boolean = false;\n  \n    /**\n     * Specifies the directory or file is not to be indexed by the content indexing service.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public notContentIndexed: boolean = false;\n\n    /**\n     * Specifies the user data stream not to be read by the background data integrity scanner. \n     * This file system attribute is presented primarily to provide compatibility with Windows.\n     * Applicable to directory or file.\n     *\n     * @type {boolean}\n     * @memberof FileSystemAttributes\n     */\n    public noScrubData: boolean = false;\n  \n    /**\n     * Converts the given attributes to a string.\n     *\n     * @returns {string} A string which represents the FileSystemAttributes\n     * @memberof FileSystemAttributes\n     */\n    public toString(): string {\n      const attributes: string[] = [];\n      if (this.readonly) {\n        attributes.push(\"ReadOnly\");\n      }\n      if (this.hidden) {\n        attributes.push(\"Hidden\");\n      }\n      if (this.system) {\n        attributes.push(\"System\");\n      }\n      if (this.none) {\n        attributes.push(\"None\");\n      }\n      if (this.temporary) {\n        attributes.push(\"Temporary\");\n      }\n      if (this.directory) {\n        attributes.push(\"Directory\");\n      }\n      if (this.archive) {\n        attributes.push(\"Archive\");\n      }\n      if (this.offline) {\n        attributes.push(\"Offline\");\n      }\n      if (this.notContentIndexed) {\n        attributes.push(\"NotContentIndexed\");\n      }\n      if (this.noScrubData) {\n        attributes.push(\"NoScrubData\");\n      }\n      return attributes.join(\"|\");\n    }\n  }\n  ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { FileSystemAttributes } from \"./FileSystemAttributes\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nexport interface Metadata {\n  [propertyName: string]: string;\n}\n\nexport interface FileHttpHeaders {\n  /**\n   * @member {string} [fileCacheControl] Optional. Sets the file's cache\n   * control. If specified, this property is stored with the file and returned\n   * with a read request.\n   */\n  fileCacheControl?: string;\n  /**\n   * @member {string} [fileContentType] Optional. Sets the file's content type.\n   * If specified, this property is stored with the file and returned with a\n   * read request.\n   */\n  fileContentType?: string;\n  /**\n   * @member {Uint8Array} [fileContentMD5] Optional. An MD5 hash of the file\n   * content. Note that this hash is not validated, as the hashes for the\n   * individual blocks were validated when each was uploaded.\n   */\n  fileContentMD5?: Uint8Array;\n  /**\n   * @member {string} [fileContentEncoding] Optional. Sets the file's content\n   * encoding. If specified, this property is stored with the file and returned\n   * with a read request.\n   */\n  fileContentEncoding?: string;\n  /**\n   * @member {string} [fileContentLanguage] Optional. Set the file's content\n   * language. If specified, this property is stored with the file and returned\n   * with a read request.\n   */\n  fileContentLanguage?: string;\n  /**\n   * @member {string} [fileContentDisposition] Optional. Sets the file's\n   * Content-Disposition header.\n   */\n  fileContentDisposition?: string;\n}\n\n/**\n * Indicates inherit file permission from the parent directory.\n */\nexport type FilePermissionInheritType = \"inherit\";\n\n/**\n * Indicates keep existing file permission value unchanged.\n */\nexport type FilePermissionPreserveType = \"preserve\";\n\n/**\n * Indicates setting as the time of the request.\n */\nexport type TimeNowType = \"now\";\n\n/**\n * Indicates keep existing time value unchanged.\n */\nexport type TimePreserveType = \"preserve\";\n\n/**\n * Indicates keep existing file attributes unchanged.\n */\nexport type FileAttributesPreserveType = \"preserve\";\n\nexport interface FileAndDirectoryCreateCommonOptions {\n  /**\n   * The permission(security descriptor) to be set for the file or directory in the\n   * Security Descriptor Definition Language (SDDL). If specified, it must have an owner, group, and discretionary access control list (DACL).\n   * A value of inherit may be passed to inherit from the parent directory.\n   *\n   * Note that only one of filePermission or filePermissionKey can be specified.\n   * And if both are not specified, inherit will be set to filePermission as default value by client library.\n   */\n  filePermission?: string | FilePermissionInheritType;\n\n  /**\n   * The key of the permission to be set for the file or directory. This can be created using the Create-Permission API.\n   *\n   * Note that only one of filePermission or filePermissionKey can be specified.\n   */\n  filePermissionKey?: string;\n\n  /**\n   * The file system attributes to be set on the file or directory.\n   */\n  fileAttributes?: FileSystemAttributes;\n\n  /**\n   * The Coordinated Universal Time (UTC) creation time property for the directory.\n   * A value of now may be used to indicate the time of the request.\n   * By default, the value will be set as now.\n   */\n  creationTime?: Date | TimeNowType;\n\n  /**\n   * The Coordinated Universal Time (UTC) last write property for the directory.\n   * A value of now may be used to indicate the time of the request.\n   * By default, the value will be set as now.\n   */\n  lastWriteTime?: Date | TimeNowType;\n}\n\nexport interface FileAndDirectorySetPropertiesCommonOptions {\n  /**\n   * The permission(security descriptor) to be set for the file or directory in the\n   * Security Descriptor Definition Language (SDDL). If specified, it must have an owner, group, and discretionary access control list (DACL).\n   * A value of inherit may be passed to inherit from the parent directory.\n   * A value of preserve may be passed to keep the value unchanged.\n   *\n   * Note that only one of filePermission or filePermissionKey can be specified.\n   * And if both are not specified, preserve will be set to filePermission as default value by client library.\n   */\n  filePermission?: string | FilePermissionInheritType | FilePermissionPreserveType;\n\n  /**\n   * The key of the permission to be set for the file or directory. This can be created using the Create-Permission API.\n   *\n   * Note that only one of filePermission or filePermissionKey can be specified.\n   */\n  filePermissionKey?: string;\n\n  /**\n   * The file system attributes to be set on the file or directory.\n   */\n  fileAttributes?: FileSystemAttributes | FileAttributesPreserveType;\n\n  /**\n   * The Coordinated Universal Time (UTC) creation time property for the directory.\n   * A value of now may be used to indicate the time of the request.\n   * A value of preserve may be passed to keep an existing value unchanged.\n   * By default, the value will be set as preserve.\n   */\n  creationTime?: Date | TimeNowType | TimePreserveType;\n\n  /**\n   * The Coordinated Universal Time (UTC) last write property for the directory.\n   * A value of now may be used to indicate the time of the request.\n   * A value of preserve may be passed to keep an existing value unchanged.\n   * By default, the value will be set as preserve.\n   */\n  lastWriteTime?: Date | TimeNowType | TimePreserveType;\n}\n\nexport function validateFilePermissionOptions(filePermission?: string, filePermissionKey?: string) {\n  if (filePermission && filePermissionKey) {\n    throw new RangeError(\"Only one of filePermission or filePermissionKey can be specified.\");\n  }\n}\n\nexport function validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions(\n  options: FileAndDirectoryCreateCommonOptions\n): FileAndDirectoryCreateCommonOptions {\n  // Would better deep copy params set by user.\n\n  if (!options) {\n    options = {};\n  }\n\n  validateFilePermissionOptions(options.filePermission, options.filePermissionKey);\n\n  if (!options.creationTime) {\n    options.creationTime = \"now\";\n  }\n\n  if (!options.lastWriteTime) {\n    options.lastWriteTime = \"now\";\n  }\n\n  if (!options.filePermission && !options.filePermissionKey) {\n    options.filePermission = \"inherit\";\n  }\n\n  return options;\n}\n\nexport function validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions(\n  options: FileAndDirectorySetPropertiesCommonOptions\n): FileAndDirectorySetPropertiesCommonOptions {\n  // Would better deep copy params set by user.\n\n  if (!options) {\n    options = {};\n  }\n\n  validateFilePermissionOptions(options.filePermission, options.filePermissionKey);\n\n  if (!options.creationTime) {\n    options.creationTime = \"preserve\";\n  }\n\n  if (!options.lastWriteTime) {\n    options.lastWriteTime = \"preserve\";\n  }\n\n  if (!options.fileAttributes) {\n    options.fileAttributes = \"preserve\";\n  }\n\n  if (!options.filePermission && !options.filePermissionKey) {\n    options.filePermission = \"preserve\";\n  }\n\n  return options;\n}\n\nexport function fileAttributesToString(\n  fileAttributes: FileSystemAttributes | FileAttributesPreserveType\n): string {\n  return fileAttributes instanceof FileSystemAttributes\n    ? fileAttributes.toString()\n    : fileAttributes;\n}\n\nexport function fileCreationTimeToString(time: Date | TimeNowType | TimePreserveType): string {\n  return time instanceof Date ? truncatedISO8061Date(time) : time;\n}\n\nexport function fileLastWriteTimeToString(time: Date | TimeNowType | TimePreserveType): string {\n  return time instanceof Date ? truncatedISO8061Date(time) : time;\n}\n","if (typeof Symbol === undefined || !(Symbol as any).asyncIterator) {\n  (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"@azure/core-asynciterator-polyfill\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// tslint:disable:max-line-length\n/**\n * Range for Service Operations.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-the-range-header-for-file-service-operations\n *\n * @export\n * @interface Range\n */\nexport interface Range {\n  /**\n   * StartByte, larger than or equal 0.\n   *\n   * @type {string}\n   * @memberof Range\n   */\n  offset: number;\n  /**\n   * Optional. Count of bytes, larger than 0.\n   * If not provided, will return bytes from offset to the end.\n   *\n   * @type {string}\n   * @memberof Range\n   */\n  count?: number;\n}\n\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @export\n * @param {Range} range A range of byte positions.\n * @returns {string} The string representation for the byte range.\n */\nexport function rangeToString(range: Range): string {\n  if (range.offset < 0) {\n    throw new RangeError(`Range.offset cannot be smaller than 0.`);\n  }\n  if (range.count && range.count <= 0) {\n    throw new RangeError(\n      `Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`\n    );\n  }\n  return range.count\n    ? `bytes=${range.offset}-${range.offset + range.count - 1}`\n    : `bytes=${range.offset}-`;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n *\n * @export\n * @abstract\n * @class Credential\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param {RequestPolicy} _nextPolicy\n   * @param {RequestPolicyOptions} _options\n   * @returns {RequestPolicy}\n   * @memberof Credential\n   */\n  public create(\n    // tslint:disable-next-line:variable-name\n    _nextPolicy: RequestPolicy,\n    // tslint:disable-next-line:variable-name\n    _options: RequestPolicyOptions\n  ): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n *\n * @enum {number}\n */\nenum BatchStates {\n  Good,\n  Error\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n *\n * @export\n * @class Batch\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   *\n   * @type {number}\n   * @memberof Batch\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   *\n   * @private\n   * @type {Operation[]}\n   * @memberof Batch\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   *\n   * @private\n   * @type {BatchStates}\n   * @memberof Batch\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof Batch\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param {number} [concurrency=5]\n   * @memberof Batch\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param {Operation} operation\n   * @memberof Batch\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   * @returns {Promise<void>}\n   * @memberof Batch\n   */\n  public async do(): Promise<void> {\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   * @private\n   * @returns {(Operation | null)}\n   * @memberof Batch\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   * @private\n   * @returns {void}\n   * @memberof Batch\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { EventEmitter } from \"events\";\nimport { Readable } from \"stream\";\n\n/**\n * OutgoingHandler is an async function triggered by BufferScheduler.\n */\nexport declare type OutgoingHandler = (buffer: Buffer, offset?: number) => Promise<any>;\n\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS <= maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. Concurrency should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n * @export\n * @class BufferScheduler\n */\nexport class BufferScheduler {\n  /**\n   * Size of buffers in incoming and outgoing queues. This class will try to align\n   * data read from Readable stream into buffer chunks with bufferSize defined.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly bufferSize: number;\n\n  /**\n   * How many buffers can be created or maintained.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly maxBuffers: number;\n\n  /**\n   * A Node.js Readable stream.\n   *\n   * @private\n   * @type {Readable}\n   * @memberof BufferScheduler\n   */\n  private readonly readable: Readable;\n\n  /**\n   * OutgoingHandler is an async function triggered by BufferScheduler when there\n   * are available buffers in outgoing array.\n   *\n   * @private\n   * @type {OutgoingHandler}\n   * @memberof BufferScheduler\n   */\n  private readonly outgoingHandler: OutgoingHandler;\n\n  /**\n   * An internal event emitter.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof BufferScheduler\n   */\n  private readonly emitter: EventEmitter = new EventEmitter();\n\n  /**\n   * Concurrency of executing outgoingHandlers. (0 < concurrency <= maxBuffers)\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly concurrency: number;\n\n  /**\n   * An internal offset marker to track data offset in bytes of next outgoingHandler.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private offset: number = 0;\n\n  /**\n   * An internal marker to track whether stream is end.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof BufferScheduler\n   */\n  private isStreamEnd: boolean = false;\n\n  /**\n   * An internal marker to track whether stream or outgoingHandler returns error.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof BufferScheduler\n   */\n  private isError: boolean = false;\n\n  /**\n   * How many handlers are executing.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private executingOutgoingHandlers: number = 0;\n\n  /**\n   * Encoding of the input Readable stream which has string data type instead of Buffer.\n   *\n   * @private\n   * @type {string}\n   * @memberof BufferScheduler\n   */\n  private encoding?: string;\n\n  /**\n   * How many buffers have been allocated.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private numBuffers: number = 0;\n\n  /**\n   * Because this class doesn't know how much data every time stream pops, which\n   * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n   * data received from the stream, when data in unresolvedDataArray exceeds the\n   * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n   * buffers from incoming and push to outgoing array.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private unresolvedDataArray: Buffer[] = [];\n\n  /**\n   * How much data consisted in unresolvedDataArray.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private unresolvedLength: number = 0;\n\n  /**\n   * The array includes all the available buffers can be used to fill data from stream.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private incoming: Buffer[] = [];\n\n  /**\n   * The array (queue) includes all the buffers filled from stream data.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private outgoing: Buffer[] = [];\n\n  /**\n   * Creates an instance of BufferScheduler.\n   *\n   * @param {Readable} readable A Node.js Readable stream\n   * @param {number} bufferSize Buffer size of every maintained buffer\n   * @param {number} maxBuffers How many buffers can be allocated\n   * @param {OutgoingHandler} outgoingHandler An async function scheduled to be\n   *                                          triggered when a buffer fully filled\n   *                                          with stream data\n   * @param {number} concurrency Concurrency of executing outgoingHandlers (>0)\n   * @param {string} [encoding] [Optional] Encoding of Readable stream when it's a string stream\n   * @memberof BufferScheduler\n   */\n  constructor(\n    readable: Readable,\n    bufferSize: number,\n    maxBuffers: number,\n    outgoingHandler: OutgoingHandler,\n    concurrency: number,\n    encoding?: string\n  ) {\n    if (bufferSize <= 0) {\n      throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n    }\n\n    if (maxBuffers <= 0) {\n      throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n    }\n\n    if (concurrency <= 0) {\n      throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);\n    }\n\n    this.bufferSize = bufferSize;\n    this.maxBuffers = maxBuffers;\n    this.readable = readable;\n    this.outgoingHandler = outgoingHandler;\n    this.concurrency = concurrency;\n    this.encoding = encoding;\n  }\n\n  /**\n   * Start the scheduler, will return error when stream of any of the outgoingHandlers\n   * returns error.\n   *\n   * @returns {Promise<void>}\n   * @memberof BufferScheduler\n   */\n  public async do(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.readable.on(\"data\", (data) => {\n        data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n        this.appendUnresolvedData(data);\n\n        if (!this.resolveData()) {\n          this.readable.pause();\n        }\n      });\n\n      this.readable.on(\"error\", (err) => {\n        this.emitter.emit(\"error\", err);\n      });\n\n      this.readable.on(\"end\", () => {\n        this.isStreamEnd = true;\n        this.emitter.emit(\"checkEnd\");\n      });\n\n      this.emitter.on(\"error\", (err) => {\n        this.isError = true;\n        this.readable.pause();\n        reject(err);\n      });\n\n      this.emitter.on(\"checkEnd\", () => {\n        if (this.outgoing.length > 0) {\n          this.triggerOutgoingHandlers();\n          return;\n        }\n\n        if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n          if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n            this.outgoingHandler(this.shiftBufferFromUnresolvedDataArray(), this.offset)\n              .then(resolve)\n              .catch(reject);\n          } else if (this.unresolvedLength >= this.bufferSize) {\n            return;\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Insert a new data into unresolved array.\n   *\n   * @private\n   * @param {Buffer} data\n   * @memberof BufferScheduler\n   */\n  private appendUnresolvedData(data: Buffer) {\n    this.unresolvedDataArray.push(data);\n    this.unresolvedLength += data.length;\n  }\n\n  /**\n   * Try to shift a buffer with size in blockSize. The buffer returned may be less\n   * than blockSize when data in unresolvedDataArray is less than bufferSize.\n   *\n   * @private\n   * @returns {Buffer}\n   * @memberof BufferScheduler\n   */\n  private shiftBufferFromUnresolvedDataArray(): Buffer {\n    if (this.unresolvedLength >= this.bufferSize) {\n      if (this.bufferSize === this.unresolvedDataArray[0].length) {\n        this.unresolvedLength -= this.bufferSize;\n        return this.unresolvedDataArray.shift()!;\n      }\n\n      // Lazy concat because Buffer.concat highly drops performance\n      let merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);\n      const buffer = merged.slice(0, this.bufferSize);\n      merged = merged.slice(this.bufferSize);\n      this.unresolvedDataArray = [merged];\n      this.unresolvedLength -= buffer.length;\n      return buffer;\n    } else if (this.unresolvedLength > 0) {\n      const merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);\n      this.unresolvedDataArray = [];\n      this.unresolvedLength = 0;\n      return merged;\n    } else {\n      return Buffer.allocUnsafe(0);\n    }\n  }\n\n  /**\n   * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n   * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n   * then push it into outgoing to be handled by outgoing handler.\n   *\n   * Return false when available buffers in incoming are not enough, else true.\n   *\n   * @private\n   * @returns {boolean} Return false when buffers in incoming are not enough, else true.\n   * @memberof BufferScheduler\n   */\n  private resolveData(): boolean {\n    while (this.unresolvedLength >= this.bufferSize) {\n      let buffer: Buffer;\n\n      if (this.incoming.length > 0) {\n        buffer = this.incoming.shift()!;\n      } else {\n        if (this.numBuffers < this.maxBuffers) {\n          buffer = Buffer.allocUnsafe(this.bufferSize);\n          this.numBuffers++;\n        } else {\n          // No available buffer, wait for buffer returned\n          return false;\n        }\n      }\n\n      buffer.fill(this.shiftBufferFromUnresolvedDataArray());\n      this.outgoing.push(buffer);\n      this.triggerOutgoingHandlers();\n    }\n    return true;\n  }\n\n  /**\n   * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n   * concurrency reaches.\n   *\n   * @private\n   * @memberof BufferScheduler\n   */\n  private async triggerOutgoingHandlers() {\n    let buffer: Buffer | undefined;\n    do {\n      if (this.executingOutgoingHandlers >= this.concurrency) {\n        return;\n      }\n\n      buffer = this.outgoing.shift();\n      if (buffer) {\n        this.triggerOutgoingHandler(buffer);\n      }\n    } while (buffer);\n  }\n\n  /**\n   * Trigger a outgoing handler for a buffer shifted from outgoing.\n   *\n   * @private\n   * @param {Buffer} buffer\n   * @returns {Promise<any>}\n   * @memberof BufferScheduler\n   */\n  private async triggerOutgoingHandler(buffer: Buffer): Promise<any> {\n    const bufferLength = buffer.length;\n\n    this.executingOutgoingHandlers++;\n    this.offset += bufferLength;\n\n    try {\n      await this.outgoingHandler(buffer, this.offset - bufferLength);\n    } catch (err) {\n      this.emitter.emit(\"error\", err);\n      return;\n    }\n\n    this.executingOutgoingHandlers--;\n    this.reuseBuffer(buffer);\n    this.emitter.emit(\"checkEnd\");\n  }\n\n  /**\n   * Return buffer used by outgoing handler into incoming.\n   *\n   * @private\n   * @param {Buffer} buffer\n   * @memberof BufferScheduler\n   */\n  private reuseBuffer(buffer: Buffer) {\n    this.incoming.push(buffer);\n    if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n      this.readable.resume();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from \"fs\";\nimport * as util from \"util\";\nimport { isNode } from \"@azure/core-http\";\n\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @export\n * @param {NodeJS.ReadableStream} stream A Node.js Readable stream\n * @param {Buffer} buffer Buffer to be filled, length must >= offset\n * @param {number} offset From which position in the buffer to be filled, inclusive\n * @param {number} end To which position in the buffer to be filled, exclusive\n * @param {string} [encoding] Encoding of the Readable stream\n * @returns {Promise<void>}\n */\nexport async function streamToBuffer(\n  stream: NodeJS.ReadableStream,\n  buffer: Buffer,\n  offset: number,\n  end: number,\n  encoding?: string\n): Promise<void> {\n  let pos = 0; // Position in stream\n  const count = end - offset; // Total amount of data needed in stream\n\n  return new Promise<void>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      if (pos >= count) {\n        resolve();\n        return;\n      }\n\n      let chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      if (typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      // How much data needed in this chunk\n      const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n\n      buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n      pos += chunkLength;\n    });\n\n    stream.on(\"end\", () => {\n      if (pos < count) {\n        reject(\n          new Error(\n            `Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`\n          )\n        );\n      }\n      resolve();\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Writes the content of a readstream to a local file. Returns a Promise which is completed after the file handle is closed.\n * If Promise is rejected, the reason will be set to the first error raised by either the\n * ReadableStream or the fs.WriteStream.\n *\n * @export\n * @param {NodeJS.ReadableStream} rs The read stream.\n * @param {string} file Destination file path.\n * @returns {Promise<void>}\n */\nexport async function readStreamToLocalFile(rs: NodeJS.ReadableStream, file: string) {\n  return new Promise<void>((resolve, reject) => {\n    const ws = fs.createWriteStream(file);\n\n    // Set STREAM_DEBUG env var to log stream events while running tests\n    if (process.env.STREAM_DEBUG) {\n      rs.on(\"close\", () => console.log(\"rs.close\"));\n      rs.on(\"data\", () => console.log(\"rs.data\"));\n      rs.on(\"end\", () => console.log(\"rs.end\"));\n      rs.on(\"error\", () => console.log(\"rs.error\"));\n\n      ws.on(\"close\", () => console.log(\"ws.close\"));\n      ws.on(\"drain\", () => console.log(\"ws.drain\"));\n      ws.on(\"error\", () => console.log(\"ws.error\"));\n      ws.on(\"finish\", () => console.log(\"ws.finish\"));\n      ws.on(\"pipe\", () => console.log(\"ws.pipe\"));\n      ws.on(\"unpipe\", () => console.log(\"ws.unpipe\"));\n    }\n\n    let error: Error;\n\n    rs.on(\"error\", (err: Error) => {\n      // First error wins\n      if (!error) {\n        error = err;\n      }\n\n      // When rs.error is raised, rs.end will never be raised automatically, so it must be raised manually\n      // to ensure ws.close is eventually raised.\n      rs.emit(\"end\");\n    });\n\n    ws.on(\"error\", (err: Error) => {\n      // First error wins\n      if (!error) {\n        error = err;\n      }\n    });\n\n    ws.on(\"close\", () => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n\n    rs.pipe(ws);\n  });\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Promisified version of fs.stat().\n */\nexport const fsStat = util.promisify(isNode ? fs.stat : function stat() {});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/core-http\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n *\n * @export\n * @abstract\n * @class CredentialPolicy\n * @extends {BaseRequestPolicy}\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof CredentialPolicy\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in sendRequest().\n   *\n   * @protected\n   * @abstract\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof CredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n *\n * @export\n * @class AnonymousCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof AnonymousCredentialPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n *\n * @export\n * @class AnonymousCredential\n * @extends {Credential}\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an AnonymousCredentialPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {AnonymousCredentialPolicy}\n   * @memberof AnonymousCredential\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { getTracer, Span, SpanOptions, SpanKind } from \"@azure/core-tracing\";\nimport { OperationTracingOptions } from \"../StorageClient\";\n\n/**\n * Creates a span using the global tracer.\n * @param name The name of the operation being performed.\n * @param tracingOptions The tracingOptions for the underlying http request.\n */\nexport function createSpan(\n  operationName: string,\n  tracingOptions: OperationTracingOptions = {}\n): { span: Span; spanOptions: SpanOptions } {\n  const tracer = getTracer();\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.CLIENT\n  };\n\n  const span = tracer.startSpan(`Azure.Storage.File.${operationName}`, spanOptions);\n  span.setAttribute(\"component\", \"storage\");\n\n  let newOptions = tracingOptions.spanOptions || {};\n  if (span.isRecordingEvents()) {\n    newOptions = {\n      ...tracingOptions,\n      parent: span\n    };\n  }\n\n  return {\n    span,\n    spanOptions: newOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from \"fs\";\nimport { HttpRequestBody, HttpResponse, isNode, TransferProgressEvent } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { FileDownloadResponse } from \"./FileDownloadResponse\";\nimport {\n  FileAbortCopyResponse,\n  FileCreateResponse,\n  FileDeleteResponse,\n  FileDownloadOptionalParams,\n  FileDownloadResponseModel,\n  FileForceCloseHandlesResponse,\n  FileGetPropertiesResponse,\n  FileGetRangeListHeaders,\n  FileListHandlesResponse,\n  FileSetHTTPHeadersResponse,\n  FileSetMetadataResponse,\n  FileStartCopyResponse,\n  SourceModifiedAccessConditions,\n  FileUploadRangeFromURLResponse,\n  FileUploadRangeResponse,\n  HandleItem,\n  RangeModel\n} from \"./generatedModels\";\nimport { File } from \"./generated/src/operations\";\nimport { Range, rangeToString } from \"./Range\";\nimport {\n  FileHttpHeaders,\n  Metadata,\n  FileAndDirectoryCreateCommonOptions,\n  FileAndDirectorySetPropertiesCommonOptions,\n  fileAttributesToString,\n  fileCreationTimeToString,\n  fileLastWriteTimeToString,\n  validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions,\n  validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions\n} from \"./models\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport {\n  DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS,\n  FILE_MAX_SIZE_BYTES,\n  FILE_RANGE_MAX_SIZE_BYTES,\n  DEFAULT_HIGH_LEVEL_CONCURRENCY\n} from \"./utils/constants\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Credential } from \"./credentials/Credential\";\nimport { Batch } from \"./utils/Batch\";\nimport { BufferScheduler } from \"./utils/BufferScheduler\";\nimport { Readable } from \"stream\";\nimport { streamToBuffer } from \"./utils/utils.node\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { readStreamToLocalFile, fsStat } from \"./utils/utils.node\";\nimport { FileSystemAttributes } from \"./FileSystemAttributes\";\nimport { getShareNameAndPathFromUrl } from \"./utils/utils.common\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * Options to configure File - Create operation.\n *\n * @export\n * @interface FileCreateOptions\n */\nexport interface FileCreateOptions extends FileAndDirectoryCreateCommonOptions, CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * File HTTP headers like Content-Type.\n   *\n   * @type {FileHttpHeaders}\n   * @memberof FileCreateOptions\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n\n  /**\n   * A collection of key-value string pair to associate with the file storage object.\n   *\n   * @type {Metadata}\n   * @memberof FileCreateOptions\n   */\n  metadata?: Metadata;\n}\n\nexport interface FileProperties extends FileAndDirectorySetPropertiesCommonOptions, CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileProperties\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * File HTTP headers like Content-Type.\n   *\n   * @type {FileHttpHeaders}\n   * @memberof FileProperties\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n}\n\nexport interface SetPropertiesResponse extends FileSetHTTPHeadersResponse {}\n\n/**\n * Options to configure File - Delete operation.\n *\n * @export\n * @interface FileDeleteOptions\n */\nexport interface FileDeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - Download operation.\n *\n * @export\n * @interface FileDownloadOptions\n */\nexport interface FileDownloadOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original body download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional ShareFileClient.download() request will be made\n   * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.\n   *\n   * Default value is 5, please set a larger value when loading large files in poor network.\n   *\n   * @type {number}\n   * @memberof FileDownloadOptions\n   */\n  maxRetryRequests?: number;\n\n  /**\n   * When this header is set to true and\n   * specified together with the Range header, the service returns the MD5 hash\n   * for the range, as long as the range is less than or equal to 4 MB in size.\n   *\n   * @type {boolean}\n   * @memberof FileDownloadOptions\n   */\n  rangeGetContentMD5?: boolean;\n\n  /**\n   * Download progress updating event handler.\n   *\n   * @memberof FileDownloadOptions\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * Options to configure File - Upload Range operation.\n *\n * @export\n * @interface FileUploadRangeOptions\n */\nexport interface FileUploadRangeOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * An MD5 hash of the content. This hash is\n   * used to verify the integrity of the data during transport. When the\n   * Content-MD5 header is specified, the File service compares the hash of the\n   * content that has arrived with the header value that was sent. If the two\n   * hashes do not match, the operation will fail with error code 400 (Bad\n   * Request).\n   *\n   * @type {Uint8Array}\n   * @memberof FileUploadRangeOptions\n   */\n  contentMD5?: Uint8Array;\n\n  /**\n   * Progress updating event handler.\n   *\n   * @memberof FileUploadRangeOptions\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * Options to configure File - Upload Range from URL operation.\n *\n * @export\n * @interface FileUploadRangeFromURLOptions\n */\nexport interface FileUploadRangeFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileUploadRangeFromURLOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The timeout parameter is expressed in seconds. For more information, see <a\n   * href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting\n   * Timeouts for File Service Operations.</a>\n   */\n  timeoutInSeconds?: number;\n  /**\n   * Specify the crc64 calculated for the range of bytes that must be read from the copy source.\n   */\n  sourceContentCrc64?: Uint8Array;\n  /**\n   * Additional parameters for the operation\n   */\n  sourceConditions?: SourceModifiedAccessConditions;\n}\n\n/**\n * The option is defined as parity to REST definition.\n * While it's not ready to be used now, considering Crc64 of source content is\n * not accessible.\n */\n// export interface IFileUploadRangeFromURLOptions extends CommonOptions {\n//   /**\n//    * Crc64 of the source content.\n//    *\n//    * @type {Uint8Array}\n//    * @memberof IFileUploadRangeFromURLOptions\n//    */\n//   sourceContentCrc64?: Uint8Array;\n\n//   /**\n//    * Source modified access condition.\n//    *\n//    * @type {SourceModifiedAccessConditions}\n//    * @memberof IFileUploadRangeFromURLOptions\n//    */\n//   sourceModifiedAccessConditions?: SourceModifiedAccessConditions;\n// }\n\n/**\n * Options to configure File - Get Range List operation.\n *\n * @export\n * @interface FileGetRangeListOptions\n */\nexport interface FileGetRangeListOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. Specifies the range of bytes over which to list ranges, inclusively.\n   *\n   * @type {Range}\n   * @memberof FileGetRangeListOptions\n   */\n  range?: Range;\n}\n\n/**\n * Options to configure File - Get Properties operation.\n *\n * @export\n * @interface FileGetPropertiesOptions\n */\nexport interface FileGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Contains response data for the getRangeList operation.\n */\nexport type FileGetRangeListResponse = FileGetRangeListHeaders & {\n  /**\n   * Range list for an Azure file.\n   *\n   * @type {RangeModel[]}\n   */\n  rangeList: RangeModel[];\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: FileGetRangeListHeaders;\n    /**\n     * The response body as text (string format)\n     */\n    bodyAsText: string;\n    /**\n     * The response body as parsed JSON or XML\n     */\n    parsedBody: RangeModel[];\n  };\n};\n\n/**\n * Options to configure File - Start Copy operation.\n *\n * @export\n * @interface FileStartCopyOptions\n */\nexport interface FileStartCopyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileStartCopyOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the file storage object.\n   *\n   * @type {Metadata}\n   * @memberof FileCreateOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Options to configure File - Set Metadata operation.\n *\n * @export\n * @interface FileSetMetadataOptions\n */\nexport interface FileSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileSetMetadataOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - HTTP Headers operation.\n *\n * @export\n * @interface FileSetHttpHeadersOptions\n */\nexport interface FileSetHttpHeadersOptions\n  extends FileAndDirectorySetPropertiesCommonOptions,\n    CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileSetHttpHeadersOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - Abort Copy From URL operation.\n *\n * @export\n * @interface FileAbortCopyFromURLOptions\n */\nexport interface FileAbortCopyFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileAbortCopyFromURLOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - Resize operation.\n *\n * @export\n * @interface FileResizeOptions\n */\nexport interface FileResizeOptions\n  extends FileAndDirectorySetPropertiesCommonOptions,\n    CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileResizeOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - Clear Range operation.\n *\n * @export\n * @interface FileClearRangeOptions\n */\nexport interface FileClearRangeOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileClearRangeOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - File List Handles Segment.\n *\n * @export\n * @interface FileListHandlesSegmentOptions\n */\nexport interface FileListHandlesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileClearRangeOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxResults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   *\n   * @type {number}\n   * @memberof FileListHandlesSegmentOptions\n   */\n  maxPageSize?: number;\n}\n\nexport interface FileListHandlesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileClearRangeOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File - File Force Close Handles Options.\n *\n * @export\n * @interface FileForceCloseHandlesOptions\n */\nexport interface FileForceCloseHandlesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileForceCloseHandlesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n/**\n * Option interface for ShareFileClient.uploadStream().\n *\n * @export\n * @interface FileUploadStreamOptions\n */\nexport interface FileUploadStreamOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileUploadStreamOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Azure File HTTP Headers.\n   *\n   * @type {FileHttpHeaders}\n   * @memberof FileUploadStreamOptions\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n\n  /**\n   * Metadata of the Azure file.\n   *\n   * @type {Metadata}\n   * @memberof FileUploadStreamOptions\n   */\n  metadata?: Metadata;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof FileUploadStreamOptions\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * Option interface for ShareFileClient.uploadFile() and ShareFileClient.uploadSeekableStream().\n *\n * @export\n * @interface FileParallelUploadOptions\n */\nexport interface FileParallelUploadOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileParallelUploadOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * RangeSize specifies the range size to use in each parallel upload,\n   * the default (and maximum size) is FILE_RANGE_MAX_SIZE_BYTES.\n   *\n   * @type {number}\n   * @memberof FileParallelUploadOptions\n   */\n  rangeSize?: number;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof FileParallelUploadOptions\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * File HTTP Headers.\n   *\n   * @type {FileHttpHeaders}\n   * @memberof FileParallelUploadOptions\n   */\n  fileHttpHeaders?: FileHttpHeaders;\n\n  /**\n   * Metadata of an Azure file.\n   *\n   * @type {Metadata}\n   * @memberof FileParallelUploadOptions\n   */\n  metadata?: Metadata;\n\n  /**\n   * Concurrency indicates the maximum number of ranges to upload in parallel.\n   * If not provided, 5 concurrency will be used by default.\n   *\n   * @type {number}\n   * @memberof FileParallelUploadOptions\n   */\n  concurrency?: number;\n}\n\n/**\n * Option interface for DownloadAzurefileToBuffer.\n *\n * @export\n * @interface FileDownloadToBufferOptions\n */\nexport interface FileDownloadToBufferOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof FileDownloadToBufferOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * When downloading Azure files, download method will try to split large file into small ranges.\n   * Every small range will be downloaded via a separte request.\n   * This option defines size data every small request trying to download.\n   * Must be > 0, will use the default value if undefined,\n   *\n   * @type {number}\n   * @memberof FileDownloadToBufferOptions\n   */\n  rangeSize?: number;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original range download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional ShareFileClient.download() request will be made\n   * from the broken point, until the requested range has been successfully downloaded or\n   * maxRetryRequestsPerRange is reached.\n   *\n   * Default value is 5, please set a larger value when in poor network.\n   *\n   * @type {number}\n   * @memberof FileDownloadToBufferOptions\n   */\n  maxRetryRequestsPerRange?: number;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof FileDownloadToBufferOptions\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Concurrency indicates the maximum number of ranges to download in parallel.\n   * If not provided, 5 concurrency will be used by default.\n   *\n   * @type {number}\n   * @memberof FileDownloadToBufferOptions\n   */\n  concurrency?: number;\n}\n\n/**\n * A ShareFileClient represents a URL to an Azure Storage file.\n *\n * @export\n * @class ShareFileClient\n */\nexport class ShareFileClient extends StorageClient {\n  /**\n   * context provided by protocol layer.\n   *\n   * @private\n   * @type {File}\n   * @memberof ShareFileClient\n   */\n  private context: File;\n  private _shareName: string;\n  private _path: string;\n\n  public get shareName(): string {\n    return this._shareName;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  /**\n   * Creates an instance of ShareFileClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory/file\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a file.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a file or directory name includes %, file or directory name must be encoded in the URL.\n   *                     Such as a file named \"myfile%\", the URL should be \"https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25\".\n   * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n   *                                  If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareFileClient\n   */\n  constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareFileClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory/file\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a file.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a file or directory name includes %, file or directory name must be encoded in the URL.\n   *                     Such as a file named \"myfile%\", the URL should be \"https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ShareFileClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?: Credential | Pipeline,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (credentialOrPipeline instanceof Credential) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n\n    super(url, pipeline);\n    ({\n      shareName: this._shareName,\n      filePathOrDirectoryPath: this._path\n    } = getShareNameAndPathFromUrl(this.url));\n    this.context = new File(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new file or replaces a file. Note it only initializes the file with no content.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n   *\n   * @param {number} size Specifies the maximum size in bytes for the file, up to 1 TB.\n   * @param {FileCreateOptions} [options] Options to File Create operation.\n   * @returns {Promise<FileCreateResponse>} Response data for the File Create  operation.\n   * @memberof ShareFileClient\n   */\n  public async create(size: number, options: FileCreateOptions = {}): Promise<FileCreateResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-create\", options.tracingOptions);\n    try {\n      if (size < 0 || size > FILE_MAX_SIZE_BYTES) {\n        throw new RangeError(`File size must >= 0 and < ${FILE_MAX_SIZE_BYTES}.`);\n      }\n      options = validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions(options);\n\n      if (!options.fileAttributes) {\n        // Note: It would be Archive in service side if None is set.\n        const attributes: FileSystemAttributes = new FileSystemAttributes();\n        attributes.none = true;\n        options.fileAttributes = attributes;\n      }\n\n      options.fileHttpHeaders = options.fileHttpHeaders || {};\n\n      return this.context.create(\n        size,\n        fileAttributesToString(options.fileAttributes!),\n        fileCreationTimeToString(options.creationTime!),\n        fileLastWriteTimeToString(options.lastWriteTime!),\n        {\n          abortSignal: options.abortSignal,\n          fileHttpHeaders: options.fileHttpHeaders,\n          metadata: options.metadata,\n          filePermission: options.filePermission,\n          filePermissionKey: options.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Reads or downloads a file from the system, including its metadata and properties.\n   *\n   * * In Node.js, data returns in a Readable stream `readableStreamBody`\n   * * In browsers, data returns in a promise `blobBody`\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file\n   *\n   * @param {number} [offset] From which position of the file to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {FileDownloadOptions} [options] Options to File Download operation.\n   * @returns {Promise<FileDownloadResponse>} Response data for the File Download operation.\n   * @memberof ShareFileClient\n   */\n  public async download(\n    offset: number = 0,\n    count?: number,\n    options: FileDownloadOptions = {}\n  ): Promise<FileDownloadResponseModel> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-download\", options.tracingOptions);\n    try {\n      if (options.rangeGetContentMD5 && offset === 0 && count === undefined) {\n        throw new RangeError(`rangeGetContentMD5 only works with partial data downloading`);\n      }\n\n      const downloadFullFile = offset === 0 && !count;\n      const res = await this.context.download({\n        abortSignal: options.abortSignal,\n        onDownloadProgress: !isNode ? options.onProgress : undefined,\n        range: downloadFullFile ? undefined : rangeToString({ offset, count }),\n        rangeGetContentMD5: options.rangeGetContentMD5,\n        spanOptions\n      });\n\n      // Return browser response immediately\n      if (!isNode) {\n        return res;\n      }\n\n      // We support retrying when download stream unexpected ends in Node.js runtime\n      // Following code shouldn't be bundled into browser build, however some\n      // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n      // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n      // The config is in package.json \"browser\" field\n      if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n        // TODO: Default value or make it a required parameter?\n        options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n      }\n\n      if (res.contentLength === undefined) {\n        throw new RangeError(`File download response doesn't contain valid content length header`);\n      }\n\n      return new FileDownloadResponse(\n        res,\n        async (start: number): Promise<NodeJS.ReadableStream> => {\n          const updatedOptions: FileDownloadOptionalParams = {\n            range: rangeToString({\n              count: offset + res.contentLength! - start,\n              offset: start\n            })\n          };\n\n          // Debug purpose only\n          // console.log(\n          //   `Read from internal stream, range: ${\n          //     updatedOptions.range\n          //   }, options: ${JSON.stringify(updatedOptions)}`\n          // );\n\n          return (await this.context.download({\n            abortSignal: options.abortSignal,\n            ...updatedOptions,\n            spanOptions\n          })).readableStreamBody!;\n        },\n        offset,\n        res.contentLength!,\n        {\n          abortSignal: options.abortSignal,\n          maxRetryRequests: options.maxRetryRequests,\n          onProgress: options.onProgress\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the file. It does not return the content of the file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties\n   *\n   * @param {FileGetPropertiesOptions} [options] Options to File Get Properties operation.\n   * @returns {Promise<FileGetPropertiesResponse>} Response data for the File Get Properties operation.\n   * @memberof ShareFileClient\n   */\n  public async getProperties(\n    options: FileGetPropertiesOptions = {}\n  ): Promise<FileGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-getProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties on the file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties\n   *\n   * @param {FileProperties} [properties] File properties. For file HTTP headers(e.g. Content-Type),\n   *                                       if no values are provided, existing HTTP headers will be removed.\n   *                                       For other file properties(e.g. fileAttributes), if no values are provided,\n   *                                       existing values will be preserved.\n   * @returns {Promise<SetPropertiesResponse>}\n   * @memberof ShareFileClient\n   */\n  public async setProperties(properties: FileProperties = {}): Promise<SetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-setProperties\",\n      properties.tracingOptions\n    );\n    try {\n      properties = validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions(properties);\n\n      properties.fileHttpHeaders = properties.fileHttpHeaders || {};\n\n      return this.context.setHTTPHeaders(\n        fileAttributesToString(properties.fileAttributes!),\n        fileCreationTimeToString(properties.creationTime!),\n        fileLastWriteTimeToString(properties.lastWriteTime!),\n        {\n          abortSignal: properties.abortSignal,\n          fileHttpHeaders: properties.fileHttpHeaders,\n          filePermission: properties.filePermission,\n          filePermissionKey: properties.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the file from the storage account.\n   * When a file is successfully deleted, it is immediately removed from the storage\n   * account's index and is no longer accessible to clients. The file's data is later\n   * removed from the service during garbage collection.\n   *\n   * Delete File will fail with status code 409 (Conflict) and error code SharingViolation\n   * if the file is open on an SMB client.\n   *\n   * Delete File is not supported on a share snapshot, which is a read-only copy of\n   * a share. An attempt to perform this operation on a share snapshot will fail with 400 (InvalidQueryParameterValue)\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2\n   *\n   * @param {FileDeleteOptions} [options] Options to File Delete operation.\n   * @returns {Promise<FileDeleteResponse>} Response data for the File Delete operation.\n   * @memberof ShareFileClient\n   */\n  public async delete(options: FileDeleteOptions = {}): Promise<FileDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-delete\", options.tracingOptions);\n    try {\n      return this.context.deleteMethod({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets HTTP headers on the file.\n   *\n   * If no option provided, or no value provided for the file HTTP headers in the options,\n   * these file HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties\n   *\n   * @param {fileHttpHeaders} [FileHttpHeaders] File HTTP headers like Content-Type.\n   *                                             Provide undefined will remove existing HTTP headers.\n   * @param {FileSetHttpHeadersOptions} [options] Options to File Set HTTP Headers operation.\n   * @returns {Promise<FileSetHTTPHeadersResponse>} Response data for the File Set HTTP Headers operation.\n   * @memberof ShareFileClient\n   */\n  public async setHttpHeaders(\n    fileHttpHeaders: FileHttpHeaders = {},\n    options: FileSetHttpHeadersOptions = {}\n  ): Promise<FileSetHTTPHeadersResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-setHTTPHeaders\",\n      options.tracingOptions\n    );\n    try {\n      // FileAttributes, filePermission, createTime, lastWriteTime will all be preserved\n      options = validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions(options);\n      return this.context.setHTTPHeaders(\n        fileAttributesToString(options.fileAttributes!),\n        fileCreationTimeToString(options.creationTime!),\n        fileLastWriteTimeToString(options.lastWriteTime!),\n        {\n          abortSignal: options.abortSignal,\n          fileHttpHeaders,\n          filePermission: options.filePermission,\n          filePermissionKey: options.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resize file.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties\n   *\n   * @param {number} length Resizes a file to the specified size in bytes.\n   *                        If the specified byte value is less than the current size of the file,\n   *                        then all ranges above the specified byte value are cleared.\n   * @param {FileResizeOptions} [options] Options to File Resize operation.\n   * @returns {Promise<FileSetHTTPHeadersResponse>} Response data for the File Set HTTP Headers operation.\n   * @memberof ShareFileClient\n   */\n  public async resize(\n    length: number,\n    options: FileResizeOptions = {}\n  ): Promise<FileSetHTTPHeadersResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-resize\", options.tracingOptions);\n    try {\n      if (length < 0) {\n        throw new RangeError(`Size cannot less than 0 when resizing file.`);\n      }\n      // FileAttributes, filePermission, createTime, lastWriteTime will all be preserved.\n      options = validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions(options);\n\n      return this.context.setHTTPHeaders(\n        fileAttributesToString(options.fileAttributes!),\n        fileCreationTimeToString(options.creationTime!),\n        fileLastWriteTimeToString(options.lastWriteTime!),\n        {\n          abortSignal: options.abortSignal,\n          fileContentLength: length,\n          filePermission: options.filePermission,\n          filePermissionKey: options.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates user-defined metadata for the specified file.\n   *\n   * If no metadata defined in the option parameter, the file\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing directory metadata will be removed\n   * @param {FileSetMetadataOptions} [options] Options to File Set Metadata operation.\n   * @returns {Promise<FileSetMetadataResponse>} Response data for the File Set Metadata operation.\n   * @memberof ShareFileClient\n   */\n  public async setMetadata(\n    metadata: Metadata = {},\n    options: FileSetMetadataOptions = {}\n  ): Promise<FileSetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-setMetadata\", options.tracingOptions);\n    try {\n      return this.context.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Upload a range of bytes to a file. Both the start and count of the\n   * range must be specified. The range can be up to 4 MB in size.\n   *\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} offset Offset position of the destination Azure File to upload.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {FileUploadRangeOptions} [options={}] Options to File Upload Range operation.\n   * @returns {Promise<FileUploadRangeResponse>} Response data for the File Upload Range operation.\n   * @memberof ShareFileClient\n   */\n  public async uploadRange(\n    body: HttpRequestBody,\n    offset: number,\n    contentLength: number,\n    options: FileUploadRangeOptions = {}\n  ): Promise<FileUploadRangeResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-uploadRange\", options.tracingOptions);\n    try {\n      if (offset < 0) {\n        throw new RangeError(`offset must be >= 0`);\n      }\n\n      if (contentLength <= 0 || contentLength > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`contentLength must be > 0 and <= ${FILE_RANGE_MAX_SIZE_BYTES} bytes`);\n      }\n\n      if (contentLength > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`offset must be < ${FILE_RANGE_MAX_SIZE_BYTES} bytes`);\n      }\n\n      return this.context.uploadRange(\n        rangeToString({ count: contentLength, offset }),\n        \"update\",\n        contentLength,\n        {\n          abortSignal: options.abortSignal,\n          contentMD5: options.contentMD5,\n          onUploadProgress: options.onProgress,\n          optionalbody: body,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Upload a range of bytes to a file where the contents are read from a another file's URL.\n   * The range can be up to 4 MB in size.\n   *\n   * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication.\n   * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source file.\n   * @param {number} destOffset Offset of destination file.\n   * @param {number} count Number of bytes to be uploaded from source file.\n   * @param {FileUploadRangeFromURLOptions} [options={}] Options to configure File - Upload Range from URL operation.\n   * @returns {Promise<FileUploadRangeFromURLResponse>}\n   * @memberof FileURL\n   */\n  public async uploadRangeFromURL(\n    sourceURL: string,\n    sourceOffset: number,\n    destOffset: number,\n    count: number,\n    options: FileUploadRangeFromURLOptions = {}\n  ): Promise<FileUploadRangeFromURLResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-uploadRangeFromURL\",\n      options.tracingOptions\n    );\n    try {\n      if (sourceOffset < 0 || destOffset < 0) {\n        throw new RangeError(`sourceOffset and destOffset must be >= 0`);\n      }\n\n      if (count <= 0 || count > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`count must be > 0 and <= ${FILE_RANGE_MAX_SIZE_BYTES} bytes`);\n      }\n\n      return this.context.uploadRangeFromURL(\n        rangeToString({ offset: destOffset, count }),\n        sourceURL,\n        rangeToString({ offset: sourceOffset, count }),\n        0,\n        {\n          abortSignal: options.abortSignal,\n          sourceModifiedAccessConditions: options.sourceConditions,\n          ...options,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Clears the specified range and\n   * releases the space used in storage for that range.\n   *\n   * @param {number} offset\n   * @param {number} contentLength\n   * @param {FileClearRangeOptions} [options] Options to File Clear Range operation.\n   * @returns {Promise<FileUploadRangeResponse>}\n   * @memberof ShareFileClient\n   */\n  public async clearRange(\n    offset: number,\n    contentLength: number,\n    options: FileClearRangeOptions = {}\n  ): Promise<FileUploadRangeResponse> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-clearRange\", options.tracingOptions);\n    try {\n      if (offset < 0 || contentLength <= 0) {\n        throw new RangeError(`offset must >= 0 and contentLength must be > 0`);\n      }\n\n      return this.context.uploadRange(rangeToString({ count: contentLength, offset }), \"clear\", 0, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the list of valid ranges for a file.\n   *\n   * @param {FileGetRangeListOptions} [options] Options to File Get range List operation.\n   * @returns {Promise<FileGetRangeListResponse>}\n   * @memberof ShareFileClient\n   */\n  public async getRangeList(\n    options: FileGetRangeListOptions = {}\n  ): Promise<FileGetRangeListResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-getRangeList\",\n      options.tracingOptions\n    );\n    try {\n      const originalResponse = await this.context.getRangeList({\n        abortSignal: options.abortSignal,\n        range: options.range ? rangeToString(options.range) : undefined,\n        spanOptions\n      });\n      return {\n        _response: originalResponse._response,\n        date: originalResponse.date,\n        etag: originalResponse.etag,\n        errorCode: originalResponse.errorCode,\n        fileContentLength: originalResponse.fileContentLength,\n        lastModified: originalResponse.lastModified,\n        rangeList: originalResponse.filter(() => {\n          return true;\n        }),\n        requestId: originalResponse.requestId,\n        version: originalResponse.version\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Copies a blob or file to a destination file within the storage account.\n   *\n   * @param {string} copySource Specifies the URL of the source file or blob, up to 2 KB in length.\n   * To copy a file to another file within the same storage account, you may use Shared Key to\n   * authenticate the source file. If you are copying a file from another storage account, or if you\n   * are copying a blob from the same storage account or another storage account, then you must\n   * authenticate the source file or blob using a shared access signature. If the source is a public\n   * blob, no authentication is required to perform the copy operation. A file in a share snapshot\n   * can also be specified as a copy source.\n   * @param {FileStartCopyOptions} [options] Options to File Start Copy operation.\n   * @returns {Promise<FileStartCopyResponse>}\n   * @memberof ShareFileClient\n   */\n  public async startCopyFromURL(\n    copySource: string,\n    options: FileStartCopyOptions = {}\n  ): Promise<FileStartCopyResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-startCopyFromURL\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.startCopy(copySource, {\n        abortSignal: options.abortSignal,\n        metadata: options.metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Aborts a pending Copy File operation, and leaves a destination file with zero length and full\n   * metadata.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file\n   *\n   * @param {string} copyId Id of the Copy File operation to abort.\n   * @param {FileAbortCopyFromURLOptions} [options] Options to File Abort Copy From URL operation.\n   * @returns {Promise<FileAbortCopyResponse>}\n   * @memberof ShareFileClient\n   */\n  public async abortCopyFromURL(\n    copyId: string,\n    options: FileAbortCopyFromURLOptions = {}\n  ): Promise<FileAbortCopyResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-abortCopyFromURL\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.abortCopy(copyId, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  // High Level functions\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to an Azure File.\n   *\n   * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView\n   * @param {FileParallelUploadOptions} [options]\n   * @returns {Promise<void>}\n   */\n  public async uploadBrowserData(\n    browserData: Blob | ArrayBuffer | ArrayBufferView,\n    options: FileParallelUploadOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-uploadBrowserData\",\n      options.tracingOptions\n    );\n    try {\n      const browserBlob = new Blob([browserData]);\n      return this.uploadSeekableBlob(\n        (offset: number, size: number): Blob => {\n          return browserBlob.slice(offset, offset + size);\n        },\n        browserBlob.size,\n        { ...options, tracingOptions: { ...options!.tracingOptions, spanOptions } }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob object to an Azure file. Requires a blobFactory as the data source,\n   * which need to return a Blob object with the offset and size provided.\n   *\n   * @param {(offset: number, size: number) => Blob} blobFactory\n   * @param {number} size\n   * @param {FileParallelUploadOptions} [options]\n   * @returns {Promise<void>}\n   */\n  async uploadSeekableBlob(\n    blobFactory: (offset: number, size: number) => Blob,\n    size: number,\n    options: FileParallelUploadOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-UploadSeekableBlob\",\n      options.tracingOptions\n    );\n    try {\n      if (!options.rangeSize) {\n        options.rangeSize = FILE_RANGE_MAX_SIZE_BYTES;\n      }\n      if (options.rangeSize < 0 || options.rangeSize > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`options.rangeSize must be > 0 and <= ${FILE_RANGE_MAX_SIZE_BYTES}`);\n      }\n\n      if (!options.fileHttpHeaders) {\n        options.fileHttpHeaders = {};\n      }\n\n      if (!options.concurrency) {\n        options.concurrency = DEFAULT_HIGH_LEVEL_CONCURRENCY;\n      }\n      if (options.concurrency < 0) {\n        throw new RangeError(`options.concurrency cannot less than 0.`);\n      }\n\n      // Create the file\n      await this.create(size, {\n        abortSignal: options.abortSignal,\n        fileHttpHeaders: options.fileHttpHeaders,\n        metadata: options.metadata,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n\n      const numBlocks: number = Math.floor((size - 1) / options.rangeSize) + 1;\n      let transferProgress: number = 0;\n\n      const batch = new Batch(options.concurrency);\n      for (let i = 0; i < numBlocks; i++) {\n        batch.addOperation(\n          async (): Promise<any> => {\n            const start = options.rangeSize! * i;\n            const end = i === numBlocks - 1 ? size : start + options.rangeSize!;\n            const contentLength = end - start;\n            await this.uploadRange(blobFactory(start, contentLength), start, contentLength, {\n              abortSignal: options.abortSignal,\n              tracingOptions: { ...options!.tracingOptions, spanOptions }\n            });\n            // Update progress after block is successfully uploaded to server, in case of block trying\n            // TODO: Hook with convenience layer progress event in finer level\n            transferProgress += contentLength;\n            if (options.onProgress) {\n              options.onProgress({ loadedBytes: transferProgress });\n            }\n          }\n        );\n      }\n      return batch.do();\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file to an Azure file.\n   *\n   * @param {string} filePath Full path of local file\n   * @param {ShareFileClient} fileClient ShareFileClient\n   * @param {FileParallelUploadOptions} [options]\n   * @returns {(Promise<void>)}\n   */\n  public async uploadFile(\n    filePath: string,\n    options: FileParallelUploadOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\"ShareFileClient-uploadFile\", options.tracingOptions);\n    try {\n      const size = (await fsStat(filePath)).size;\n      return this.uploadResetableStream(\n        (offset, count) =>\n          fs.createReadStream(filePath, {\n            autoClose: true,\n            end: count ? offset + count - 1 : Infinity,\n            start: offset\n          }),\n        size,\n        { ...options, tracingOptions: { ...options!.tracingOptions, spanOptions } }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Accepts a Node.js Readable stream factory, and uploads in blocks to an Azure File.\n   * The Readable stream factory must returns a Node.js Readable stream starting from the offset defined. The offset\n   * is the offset in the Azure file to be uploaded.\n   *\n   * @export\n   * @param {(offset: number) => NodeJS.ReadableStream} streamFactory Returns a Node.js Readable stream starting\n   *                                                                  from the offset defined\n   * @param {number} size Size of the Azure file\n   * @param {ShareFileClient} fileClient ShareFileClient\n   * @param {FileParallelUploadOptions} [options]\n   * @returns {(Promise<void>)}\n   */\n  async uploadResetableStream(\n    streamFactory: (offset: number, count?: number) => NodeJS.ReadableStream,\n    size: number,\n    options: FileParallelUploadOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-uploadResetableStream\",\n      options.tracingOptions\n    );\n    try {\n      if (!options.rangeSize) {\n        options.rangeSize = FILE_RANGE_MAX_SIZE_BYTES;\n      }\n      if (options.rangeSize < 0 || options.rangeSize > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`options.rangeSize must be > 0 and <= ${FILE_RANGE_MAX_SIZE_BYTES}`);\n      }\n\n      if (!options.fileHttpHeaders) {\n        options.fileHttpHeaders = {};\n      }\n\n      if (!options.concurrency) {\n        options.concurrency = DEFAULT_HIGH_LEVEL_CONCURRENCY;\n      }\n      if (options.concurrency < 0) {\n        throw new RangeError(`options.concurrency cannot less than 0.`);\n      }\n\n      // Create the file\n      await this.create(size, {\n        abortSignal: options.abortSignal,\n        fileHttpHeaders: options.fileHttpHeaders,\n        metadata: options.metadata,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n\n      const numBlocks: number = Math.floor((size - 1) / options.rangeSize) + 1;\n      let transferProgress: number = 0;\n      const batch = new Batch(options.concurrency);\n\n      for (let i = 0; i < numBlocks; i++) {\n        batch.addOperation(\n          async (): Promise<any> => {\n            const start = options.rangeSize! * i;\n            const end = i === numBlocks - 1 ? size : start + options.rangeSize!;\n            const contentLength = end - start;\n            await this.uploadRange(\n              () => streamFactory(start, contentLength),\n              start,\n              contentLength,\n              {\n                abortSignal: options.abortSignal,\n                tracingOptions: { ...options!.tracingOptions, spanOptions }\n              }\n            );\n            // Update progress after block is successfully uploaded to server, in case of block trying\n            transferProgress += contentLength;\n            if (options.onProgress) {\n              options.onProgress({ loadedBytes: transferProgress });\n            }\n          }\n        );\n      }\n      return batch.do();\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure file in parallel to a buffer.\n   * Offset and count are optional, pass 0 for both to download the entire file.\n   *\n   * @param {Buffer} buffer Buffer to be fill, must have length larger than count\n   * @param {number} offset From which position of the Azure File to download\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined\n   * @param {FileDownloadToBufferOptions} [options]\n   * @returns {Promise<void>}\n   */\n  public async downloadToBuffer(\n    buffer: Buffer,\n    offset: number = 0,\n    count?: number,\n    options: FileDownloadToBufferOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-downloadToBuffer\",\n      options.tracingOptions\n    );\n    try {\n      if (!options.rangeSize) {\n        options.rangeSize = FILE_RANGE_MAX_SIZE_BYTES;\n      }\n      if (options.rangeSize < 0) {\n        throw new RangeError(\"rangeSize option must be > 0\");\n      }\n\n      if (offset < 0) {\n        throw new RangeError(\"offset option must be >= 0\");\n      }\n\n      if (count && count <= 0) {\n        throw new RangeError(\"count option must be > 0\");\n      }\n\n      if (!options.concurrency) {\n        options.concurrency = DEFAULT_HIGH_LEVEL_CONCURRENCY;\n      }\n      if (options.concurrency < 0) {\n        throw new RangeError(`options.concurrency cannot less than 0.`);\n      }\n\n      // Customer doesn't specify length, get it\n      if (!count) {\n        const response = await this.getProperties({\n          abortSignal: options.abortSignal,\n          tracingOptions: { ...options!.tracingOptions, spanOptions }\n        });\n        count = response.contentLength! - offset;\n        if (count < 0) {\n          throw new RangeError(\n            `offset ${offset} shouldn't be larger than file size ${response.contentLength!}`\n          );\n        }\n      }\n\n      if (buffer.length < count) {\n        throw new RangeError(\n          `The buffer's size should be equal to or larger than the request count of bytes: ${count}`\n        );\n      }\n\n      let transferProgress: number = 0;\n      const batch = new Batch(options.concurrency);\n      for (let off = offset; off < offset + count; off = off + options.rangeSize) {\n        batch.addOperation(async () => {\n          // Exclusive chunk end position\n          let chunkEnd = offset + count!;\n          if (off + options.rangeSize! < chunkEnd) {\n            chunkEnd = off + options.rangeSize!;\n          }\n          const response = await this.download(off, chunkEnd - off, {\n            abortSignal: options.abortSignal,\n            maxRetryRequests: options.maxRetryRequestsPerRange,\n            tracingOptions: { ...options!.tracingOptions, spanOptions }\n          });\n          const stream = response.readableStreamBody!;\n          await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);\n          // Update progress after block is downloaded, in case of block trying\n          // Could provide finer grained progress updating inside HTTP requests,\n          // only if convenience layer download try is enabled\n          transferProgress += chunkEnd - off;\n          if (options.onProgress) {\n            options.onProgress({ loadedBytes: transferProgress });\n          }\n        });\n      }\n      await batch.do();\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into an Azure file.\n   * This method will try to create an Azure, then starts uploading chunk by chunk.\n   * Size of chunk is defined by `bufferSize` parameter.\n   * Please make sure potential size of stream doesn't exceed file size.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with bufferSize\n   *   parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param {Readable} stream Node.js Readable stream. Must be less or equal than file size.\n   * @param {number} size Size of file to be created. Maxium size allowed is 1TB.\n   *                      If this value is larger than stream size, there will be empty bytes in file tail.\n   * @param {number} bufferSize Size of every buffer allocated in bytes, also the chunk/range size during\n   *                            the uploaded file. Size must be > 0 and <= 4 * 1024 * 1024 (4MB)\n   * @param {number} maxBuffers Max buffers will allocate during uploading, positive correlation\n   *                            with max uploading concurrency\n   * @param {FileUploadStreamOptions} [options]\n   * @returns {Promise<void>}\n   */\n  public async uploadStream(\n    stream: Readable,\n    size: number,\n    bufferSize: number,\n    maxBuffers: number,\n    options: FileUploadStreamOptions = {}\n  ): Promise<void> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-uploadStream\",\n      options.tracingOptions\n    );\n    try {\n      if (!options.fileHttpHeaders) {\n        options.fileHttpHeaders = {};\n      }\n\n      if (bufferSize <= 0 || bufferSize > FILE_RANGE_MAX_SIZE_BYTES) {\n        throw new RangeError(`bufferSize must be > 0 and <= ${FILE_RANGE_MAX_SIZE_BYTES}`);\n      }\n\n      if (maxBuffers < 0) {\n        throw new RangeError(`maxBuffers must be > 0.`);\n      }\n\n      // Create the file\n      await this.create(size, {\n        abortSignal: options.abortSignal,\n        fileHttpHeaders: options.fileHttpHeaders,\n        metadata: options.metadata,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n\n      let transferProgress: number = 0;\n      const scheduler = new BufferScheduler(\n        stream,\n        bufferSize,\n        maxBuffers,\n        async (buffer: Buffer, offset?: number) => {\n          if (transferProgress + buffer.length > size) {\n            throw new RangeError(\n              `Stream size is larger than file size ${size} bytes, uploading failed. ` +\n                `Please make sure stream length is less or equal than file size.`\n            );\n          }\n\n          await this.uploadRange(buffer, offset!, buffer.length, {\n            abortSignal: options.abortSignal,\n            tracingOptions: { ...options!.tracingOptions, spanOptions }\n          });\n\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          transferProgress += buffer.length;\n          if (options.onProgress) {\n            options.onProgress({ loadedBytes: transferProgress });\n          }\n        },\n        // Concurrency should set a smaller value than maxBuffers, which is helpful to\n        // reduce the possibility when a outgoing handler waits for stream data, in\n        // this situation, outgoing handlers are blocked.\n        // Outgoing queue shouldn't be empty.\n        Math.ceil((maxBuffers / 4) * 3)\n      );\n      return scheduler.do();\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n   *\n   * @param {string} filePath\n   * @param {number} [offset] From which position of the block blob to download.\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.\n   * @param {BlobDownloadOptions} [options] Options to Blob download options.\n   * @returns {Promise<FileDownloadResponse>} The response data for blob download operation,\n   *                                                 but with readableStreamBody set to undefined since its\n   *                                                 content is already read and written into a local file\n   *                                                 at the specified path.\n   * @memberof BlobClient\n   */\n  public async downloadToFile(\n    filePath: string,\n    offset: number = 0,\n    count?: number,\n    options: FileDownloadOptions = {}\n  ): Promise<FileDownloadResponseModel> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-downloadToFile\",\n      options.tracingOptions\n    );\n    try {\n      const response = await this.download(offset, count, {\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      if (response.readableStreamBody) {\n        await readStreamToLocalFile(response.readableStreamBody, filePath);\n      }\n\n      // The stream is no longer accessible so setting it to undefined.\n      (response as any).fileDownloadStream = undefined;\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Lists handles for a file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles\n   *\n   * @param {string} [marker] Optional. A string value that identifies the portion of the list to be\n   *                          returned with the next list handles operation. The operation returns a\n   *                          marker value within the response body if the list returned was not complete.\n   *                          The marker value may then be used in a subsequent call to request the next\n   *                          set of list items.\n   * @param {FileListHandlesSegmentOptions} [options={}]\n   * @returns {Promise<FileListHandlesResponse>}\n   * @memberof FileURL\n   */\n  private async listHandlesSegment(\n    marker?: string,\n    options: FileListHandlesSegmentOptions = {}\n  ): Promise<FileListHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-listHandlesSegment\",\n      options.tracingOptions\n    );\n    try {\n      marker = marker === \"\" ? undefined : marker;\n      const response = await this.context.listHandles({\n        abortSignal: options.abortSignal,\n        marker,\n        ...options,\n        spanOptions\n      });\n\n      // TODO: Protocol layer issue that when handle list is in returned XML\n      // response.handleList is an empty string\n      if ((response.handleList as any) === \"\") {\n        response.handleList = undefined;\n      }\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for FileListHandlesResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of the list to be\n   *                          returned with the next list handles operation. The operation returns a\n   *                          marker value within the response body if the list returned was not complete.\n   *                          The marker value may then be used in a subsequent call to request the next\n   *                          set of list items.\n   * @param {FileListHandlesSegmentOptions} [options] Options to list handles operation.\n   * @returns {AsyncIterableIterator<FileListHandlesResponse>}\n   * @memberof ShareFileClient\n   */\n  private async *iterateHandleSegments(\n    marker?: string,\n    options: FileListHandlesSegmentOptions = {}\n  ): AsyncIterableIterator<FileListHandlesResponse> {\n    let listHandlesResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listHandlesResponse = await this.listHandlesSegment(marker, options);\n        marker = listHandlesResponse.continuationToken;\n        yield listHandlesResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for handles\n   *\n   * @private\n   * @param {FileListHandlesSegmentOptions} [options] Options to list handles operation.\n   * @returns {AsyncIterableIterator<HandleItem>}\n   * @memberof ShareFileClient\n   */\n  private async *listHandleItems(\n    options: FileListHandlesSegmentOptions = {}\n  ): AsyncIterableIterator<HandleItem> {\n    let marker: string | undefined;\n    for await (const listHandlesResponse of this.iterateHandleSegments(marker, options)) {\n      if (listHandlesResponse.handleList) {\n        for (const handle of listHandlesResponse.handleList) {\n          yield handle;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the handles.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the handles in pages.\n   *\n   * @param {FileListHandlesOptions} [options] Options to list handles operation.\n   * @memberof ShareFileClient\n   * @returns {PagedAsyncIterableIterator<HandleItem, FileListHandlesResponse>}\n   * An asyncIterableIterator that supports paging.\n   */\n  public listHandles(\n    options: FileListHandlesOptions = {}\n  ): PagedAsyncIterableIterator<HandleItem, FileListHandlesResponse> {\n    // an AsyncIterableIterator to iterate over handles\n    const iter = this.listHandleItems(options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.iterateHandleSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  /**\n   * Force close all handles for a file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {string} [marker] Optional. A string value that identifies the position of handles that will\n   *                          be closed with the next force close handles operation.\n   *                          The operation returns a marker value within the response\n   *                          body if there are more handles to close. The marker value\n   *                          may then be used in a subsequent call to close the next set of handles.\n   * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.\n   * @returns {Promise<FileForceCloseHandlesResponse>}\n   * @memberof ShareFileClient\n   */\n  private async forceCloseHandlesSegment(\n    marker?: string,\n    options: FileForceCloseHandlesOptions = {}\n  ): Promise<FileForceCloseHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-forceCloseHandlesSegment\",\n      options.tracingOptions\n    );\n    try {\n      marker = marker === \"\" ? undefined : marker;\n      return this.context.forceCloseHandles(\"*\", {\n        abortSignal: options.abortSignal,\n        marker,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Force close all handles for a file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.\n   * @returns {Promise<number>}\n   * @memberof ShareFileClient\n   */\n  public async forceCloseAllHandles(options: FileForceCloseHandlesOptions = {}): Promise<number> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-forceCloseAllHandles\",\n      options.tracingOptions\n    );\n    try {\n      let handlesClosed = 0;\n      let marker: string | undefined = \"\";\n\n      do {\n        const response: FileForceCloseHandlesResponse = await this.forceCloseHandlesSegment(\n          marker,\n          { tracingOptions: { ...options!.tracingOptions, spanOptions } }\n        );\n        marker = response.marker;\n        response.numberOfHandlesClosed && (handlesClosed += response.numberOfHandlesClosed);\n      } while (marker);\n\n      return handlesClosed;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Force close a specific handle for a file.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {string} handleId Specific handle ID, cannot be asterisk \"*\".\n   *                          Use forceCloseAllHandles() to close all handles.\n   * @param {FileForceCloseHandlesOptions} [options] Options to force close handles operation.\n   * @returns {Promise<FileForceCloseHandlesResponse>}\n   * @memberof ShareFileClient\n   */\n  public async forceCloseHandle(\n    handleId: string,\n    options: FileForceCloseHandlesOptions = {}\n  ): Promise<FileForceCloseHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareFileClient-forceCloseHandle\",\n      options.tracingOptions\n    );\n    try {\n      if (handleId === \"*\") {\n        throw new RangeError(\n          `Parameter handleID should be a specified handle ID. Use forceCloseHandlesSegment() to close all handles.`\n        );\n      }\n\n      return this.context.forceCloseHandles(handleId, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is used as a shim of \"FileDownloadResponse\" for some browser bundlers\n// when trying to bundle \"FileDownloadResponse\"\n// \"FileDownloadResponse\" class is only available in Node.js runtime\nexport const FileDownloadResponse = 1;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  DirectoryCreateResponse,\n  DirectoryDeleteResponse,\n  DirectoryForceCloseHandlesResponse,\n  DirectoryGetPropertiesResponse,\n  DirectoryItem,\n  DirectoryListFilesAndDirectoriesSegmentResponse,\n  DirectoryListHandlesResponse,\n  DirectorySetMetadataResponse,\n  DirectorySetPropertiesResponse,\n  FileCreateResponse,\n  FileDeleteResponse,\n  FileItem,\n  HandleItem\n} from \"./generatedModels\";\nimport { Directory } from \"./generated/src/operations\";\nimport {\n  Metadata,\n  FileAndDirectoryCreateCommonOptions,\n  FileAndDirectorySetPropertiesCommonOptions,\n  validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions,\n  fileAttributesToString,\n  fileCreationTimeToString,\n  fileLastWriteTimeToString,\n  validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions\n} from \"./models\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { appendToURLPath, getShareNameAndPathFromUrl } from \"./utils/utils.common\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { ShareFileClient, FileCreateOptions, FileDeleteOptions } from \"./ShareFileClient\";\nimport { Credential } from \"./credentials/Credential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { FileSystemAttributes } from \"./FileSystemAttributes\";\nimport { createSpan } from \"./utils/tracing\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\n\n/**\n * Options to configure Directory - Create operation.\n *\n * @export\n * @interface DirectoryCreateOptions\n */\nexport interface DirectoryCreateOptions extends FileAndDirectoryCreateCommonOptions, CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the file storage object.\n   *\n   * @type {Metadata}\n   * @memberof DirectoryCreateOptions\n   */\n  metadata?: Metadata;\n}\n\nexport interface DirectoryProperties\n  extends FileAndDirectorySetPropertiesCommonOptions,\n    CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryProperties\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Directory - List Files and Directories Segment operation.\n *\n * @interface DirectoryListFilesAndDirectoriesSegmentOptions\n */\ninterface DirectoryListFilesAndDirectoriesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof DirectoryListFilesAndDirectoriesSegmentOptions\n   */\n  prefix?: string;\n\n  /**\n   * Specifies the maximum number of entries to\n   * return. If the request does not specify maxResults, or specifies a value\n   * greater than 5,000, the server will return up to 5,000 items.\n   *\n   * @type {number}\n   * @memberof DirectoryListFilesAndDirectoriesSegmentOptions\n   */\n  maxResults?: number;\n}\n\n/**\n * Options to configure Directory - List Files and Directories operation.\n *\n * @export\n * @interface DirectoryListFilesAndDirectoriesOptions\n */\nexport interface DirectoryListFilesAndDirectoriesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryListFilesAndDirectoriesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof DirectoryListFilesAndDirectoriesOptions\n   */\n  prefix?: string;\n}\n\n/**\n * Options to configure Directory - Delete operation.\n *\n * @export\n * @interface DirectoryDeleteOptions\n */\nexport interface DirectoryDeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Directory - Get Properties operation.\n *\n * @export\n * @interface DirectoryGetPropertiesOptions\n */\nexport interface DirectoryGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Directory - Set Metadata operation.\n *\n * @export\n * @interface DirectorySetMetadataOptions\n */\nexport interface DirectorySetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Directory - List Handles Segment.\n *\n * @export\n * @interface DirectoryListHandlesSegmentOptions\n */\nexport interface DirectoryListHandlesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryListHandlesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of entries to return. If the request does not specify maxResults,\n   * or specifies a value greater than 5,000, the server will return up to 5,000 items.\n   *\n   * @type {number}\n   * @memberof DirectoryListHandlesSegmentOptions\n   */\n  maxResults?: number;\n  /**\n   * Specifies operation should apply to the directory specified in the URI, its files, its\n   * subdirectories and their files.\n   *\n   * @type {boolean}\n   * @memberof DirectoryListHandlesSegmentOptions\n   */\n  recursive?: boolean;\n}\n\n/**\n * Options to configure Directory - List Handles.\n *\n * @export\n * @interface DirectoryListHandlesOptions\n */\nexport interface DirectoryListHandlesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryListHandlesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies whether operation should apply to the directory specified in the URI, its files, its\n   * subdirectories and their files.\n   *\n   * @type {boolean}\n   * @memberof DirectoryListHandlesOptions\n   */\n  recursive?: boolean;\n}\n\n/**\n * Options to configure Directory - Force Close Handles Segment.\n *\n * @export\n * @interface DirectoryForceCloseHandlesSegmentOptions\n */\nexport interface DirectoryForceCloseHandlesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryForceCloseHandlesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies operation should apply to the directory specified in the URI, its files, its\n   * subdirectories and their files.\n   *\n   * @type {boolean}\n   * @memberof DirectoryForceCloseHandlesSegmentOptions\n   */\n  recursive?: boolean;\n}\n\n/**\n * Options to configure Directory - Force Close Handles.\n *\n * @export\n * @interface DirectoryForceCloseHandlesOptions\n */\nexport interface DirectoryForceCloseHandlesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof DirectoryForceCloseHandlesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * A ShareDirectoryClient represents a URL to the Azure Storage directory allowing you to manipulate its files and directories.\n *\n * @export\n * @class ShareDirectoryClient\n */\nexport class ShareDirectoryClient extends StorageClient {\n  /**\n   * context provided by protocol layer.\n   *\n   * @private\n   * @type {Directory}\n   * @memberof ShareDirectoryClient\n   */\n  private context: Directory;\n  private _shareName: string;\n  private _path: string;\n\n  public get shareName(): string {\n    return this._shareName;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  /**\n   * Creates an instance of DirectoryClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file directory, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a directory.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a directory name includes %, directory name must be encoded in the URL.\n   *                     Such as a directory named \"mydir%\", the URL should be \"https://myaccount.file.core.windows.net/myshare/mydir%25\".\n   * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n   *                                  If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareDirectoryClient\n   */\n  constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of DirectoryClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file directory, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/myshare/mydirectory?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a directory.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a directory name includes %, directory name must be encoded in the URL.\n   *                     Such as a directory named \"mydir%\", the URL should be \"https://myaccount.file.core.windows.net/myshare/mydir%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ShareDirectoryClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?: Credential | Pipeline,\n    options: StoragePipelineOptions = {}\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (credentialOrPipeline instanceof Credential) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n\n    super(url, pipeline);\n    ({\n      shareName: this._shareName,\n      filePathOrDirectoryPath: this._path\n    } = getShareNameAndPathFromUrl(this.url));\n    this.context = new Directory(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new directory under the specified share or parent directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory\n   *\n   * @param {DirectoryCreateOptions} [options] Options to Directory Create operation.\n   * @returns {Promise<DirectoryCreateResponse>} Response data for the Directory  operation.\n   * @memberof ShareDirectoryClient\n   */\n  public async create(options: DirectoryCreateOptions = {}): Promise<DirectoryCreateResponse> {\n    const { span, spanOptions } = createSpan(\"ShareDirectoryClient-create\", options.tracingOptions);\n    try {\n      if (!options.fileAttributes) {\n        options = validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions(options);\n        // By default set it as a directory.\n        const attributes: FileSystemAttributes = new FileSystemAttributes();\n        attributes.directory = true;\n        options.fileAttributes = attributes;\n      }\n\n      return this.context.create(\n        fileAttributesToString(options.fileAttributes!),\n        fileCreationTimeToString(options.creationTime!),\n        fileLastWriteTimeToString(options.lastWriteTime!),\n        {\n          abortSignal: options.abortSignal,\n          metadata: options.metadata,\n          filePermission: options.filePermission,\n          filePermissionKey: options.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties on the directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties\n   *\n   * @param {properties} [DirectoryProperties] Directory properties. If no values are provided,\n   *                                            existing values will be preserved.\n   * @returns {Promise<DirectorySetPropertiesResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  public async setProperties(\n    properties: DirectoryProperties = {}\n  ): Promise<DirectorySetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-setProperties\",\n      properties.tracingOptions\n    );\n    try {\n      properties = validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions(properties);\n\n      return this.context.setProperties(\n        fileAttributesToString(properties.fileAttributes!),\n        fileCreationTimeToString(properties.creationTime!),\n        fileLastWriteTimeToString(properties.lastWriteTime!),\n        {\n          abortSignal: properties.abortSignal,\n          filePermission: properties.filePermission,\n          filePermissionKey: properties.filePermissionKey,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a ShareDirectoryClient object for a sub directory.\n   *\n   * @param subDirectoryName A subdirectory name\n   * @returns {ShareDirectoryClient} The ShareDirectoryClient object for the given subdirectory name.\n   * @memberof ShareDirectoryClient\n   */\n  public getDirectoryClient(subDirectoryName: string): ShareDirectoryClient {\n    return new ShareDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(subDirectoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new subdirectory under this directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryCreateOptions} [options] Options to Directory Create operation.\n   * @returns {Promise<{ directoryClient: ShareDirectoryClient; directoryCreateResponse: DirectoryCreateResponse; }>} Directory create response data and the corresponding DirectoryClient instance.\n   * @memberof ShareDirectoryClient\n   */\n  public async createSubdirectory(\n    directoryName: string,\n    options: DirectoryCreateOptions = {}\n  ): Promise<{\n    directoryClient: ShareDirectoryClient;\n    directoryCreateResponse: DirectoryCreateResponse;\n  }> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-createSubdirectory\",\n      options.tracingOptions\n    );\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      const directoryCreateResponse = await directoryClient.create({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        directoryClient,\n        directoryCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the specified empty sub directory under this directory.\n   * Note that the directory must be empty before it can be deleted.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryDeleteOptions} [options] Options to Directory Delete operation.\n   * @returns {DirectoryDeleteResponse} Directory deletion response data.\n   * @memberof ShareDirectoryClient\n   */\n  public async deleteSubdirectory(\n    directoryName: string,\n    options: DirectoryDeleteOptions = {}\n  ): Promise<DirectoryDeleteResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-deleteSubdirectory\",\n      options.tracingOptions\n    );\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      return await directoryClient.delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new file or replaces a file under this directory. Note it only initializes the file with no content.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n   *\n   * @param {string} fileName\n   * @param {number} size Specifies the maximum size in bytes for the file, up to 1 TB.\n   * @param {FileCreateOptions} [options] Options to File Create operation.\n   * @returns {Promise<{ fileClient: ShareFileClient, fileCreateResponse: FileCreateResponse }>} File creation response data and the corresponding file client.\n   * @memberof ShareDirectoryClient\n   */\n  public async createFile(\n    fileName: string,\n    size: number,\n    options: FileCreateOptions = {}\n  ): Promise<{ fileClient: ShareFileClient; fileCreateResponse: FileCreateResponse }> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-createFile\",\n      options.tracingOptions\n    );\n    try {\n      const fileClient = this.getFileClient(fileName);\n      const fileCreateResponse = await fileClient.create(size, {\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        fileClient,\n        fileCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the specified file under this directory from the storage account.\n   * When a file is successfully deleted, it is immediately removed from the storage\n   * account's index and is no longer accessible to clients. The file's data is later\n   * removed from the service during garbage collection.\n   *\n   * Delete File will fail with status code 409 (Conflict) and error code SharingViolation\n   * if the file is open on an SMB client.\n   *\n   * Delete File is not supported on a share snapshot, which is a read-only copy of\n   * a share. An attempt to perform this operation on a share snapshot will fail with 400 (InvalidQueryParameterValue)\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2\n   *\n   * @param {string} fileName Name of the file to delete\n   * @param {FileDeleteOptions} [options] Options to File Delete operation.\n   * @returns {Promise<FileDeleteResponse>} File deletion response data.\n   * @memberof ShareDirectoryClient\n   */\n  public async deleteFile(\n    fileName: string,\n    options: FileDeleteOptions = {}\n  ): Promise<FileDeleteResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-deleteFile\",\n      options.tracingOptions\n    );\n    try {\n      const fileClient = this.getFileClient(fileName);\n      return await fileClient.delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a ShareFileClient object.\n   *\n   * @param {string} fileName A file name.\n   * @returns {ShareFileClient} A new ShareFileClient object for the given file name.\n   * @memberof ShareFileClient\n   */\n  public getFileClient(fileName: string): ShareFileClient {\n    return new ShareFileClient(\n      appendToURLPath(this.url, encodeURIComponent(fileName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Returns all system properties for the specified directory, and can also be used to check the\n   * existence of a directory. The data returned does not include the files in the directory or any\n   * subdirectories.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties\n   *\n   * @param {DirectoryGetPropertiesOptions} [options] Options to Directory Get Properties operation.\n   * @returns {Promise<DirectoryGetPropertiesResponse>} Response data for the Directory Get Properties operation.\n   * @memberof ShareDirectoryClient\n   */\n  public async getProperties(\n    options: DirectoryGetPropertiesOptions = {}\n  ): Promise<DirectoryGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-getProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the specified empty directory. Note that the directory must be empty before it can be\n   * deleted.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory\n   *\n   * @param {DirectoryDeleteOptions} [options] Options to Directory Delete operation.\n   * @returns {Promise<DirectoryDeleteResponse>} Response data for the Directory Delete operation.\n   * @memberof ShareDirectoryClient\n   */\n  public async delete(options: DirectoryDeleteOptions = {}): Promise<DirectoryDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareDirectoryClient-delete\", options.tracingOptions);\n    try {\n      return this.context.deleteMethod({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates user defined metadata for the specified directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing directory metadata will be removed\n   * @param {DirectorySetMetadataOptions} [options] Options to Directory Set Metadata operation.\n   * @returns {Promise<DirectorySetMetadataResponse>} Response data for the Directory Set Metadata operation.\n   * @memberof ShareDirectoryClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: DirectorySetMetadataOptions = {}\n  ): Promise<DirectorySetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-setMetadata\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for DirectoryListFilesAndDirectoriesSegmentResponses\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of files and directories to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all files and directories remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {DirectoryListFilesAndDirectoriesSegmentOptions} [options] Options to list files and directories operation.\n   * @returns {AsyncIterableIterator<DirectoryListFilesAndDirectoriesSegmentResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  private async *iterateFilesAndDirectoriesSegments(\n    marker?: string,\n    options: DirectoryListFilesAndDirectoriesSegmentOptions = {}\n  ): AsyncIterableIterator<DirectoryListFilesAndDirectoriesSegmentResponse> {\n    let listFilesAndDirectoriesResponse;\n    do {\n      listFilesAndDirectoriesResponse = await this.listFilesAndDirectoriesSegment(marker, options);\n      marker = listFilesAndDirectoriesResponse.continuationToken;\n      yield await listFilesAndDirectoriesResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for file and directory items\n   *\n   * @private\n   * @param {DirectoryListFilesAndDirectoriesSegmentOptions} [options] Options to list files and directories operation.\n   * @returns {AsyncIterableIterator<{ kind: \"file\" } & FileItem | { kind: \"directory\" } & DirectoryItem>}\n   * @memberof ShareDirectoryClient\n   */\n  private async *listFilesAndDirectoriesItems(\n    options: DirectoryListFilesAndDirectoriesSegmentOptions = {}\n  ): AsyncIterableIterator<{ kind: \"file\" } & FileItem | { kind: \"directory\" } & DirectoryItem> {\n    let marker: string | undefined;\n    for await (const listFilesAndDirectoriesResponse of this.iterateFilesAndDirectoriesSegments(\n      marker,\n      options\n    )) {\n      for (const file of listFilesAndDirectoriesResponse.segment.fileItems) {\n        yield { kind: \"file\", ...file };\n      }\n      for (const directory of listFilesAndDirectoriesResponse.segment.directoryItems) {\n        yield { kind: \"directory\", ...directory };\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the files and directories\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the files and directories in pages.\n   *\n   * @example\n   * ```js\n   *   let i = 1;\n   *   for await (const entity of directoryClient.listFilesAndDirectories()) {\n   *     if (entity.kind === \"directory\") {\n   *       console.log(`${i++} - directory\\t: ${entity.name}`);\n   *     } else {\n   *       console.log(`${i++} - file\\t: ${entity.name}`);\n   *     }\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Generator syntax .next()\n   *   let i = 1;\n   *   let iter = await directoryClient.listFilesAndDirectories();\n   *   let entity = await iter.next();\n   *   while (!entity.done) {\n   *     if (entity.value.kind === \"directory\") {\n   *       console.log(`${i++} - directory\\t: ${entity.value.name}`);\n   *     } else {\n   *       console.log(`${i++} - file\\t: ${entity.value.name}`);\n   *     }\n   *     entity = await iter.next();\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Example for .byPage()\n   *   // passing optional maxPageSize in the page settings\n   *   let i = 1;\n   *   for await (const response of directoryClient\n   *     .listFilesAndDirectories()\n   *     .byPage({ maxPageSize: 20 })) {\n   *     for (const fileItem of response.segment.fileItems) {\n   *       console.log(`${i++} - file\\t: ${fileItem.name}`);\n   *     }\n   *     for (const dirItem of response.segment.directoryItems) {\n   *       console.log(`${i++} - directory\\t: ${dirItem.name}`);\n   *     }\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Passing marker as an argument (similar to the previous example)\n   *   let i = 1;\n   *   let iterator = directoryClient.listFilesAndDirectories().byPage({ maxPageSize: 3 });\n   *   let response = (await iterator.next()).value;\n   *   // Prints 3 file and directory names\n   *   for (const fileItem of response.segment.fileItems) {\n   *     console.log(`${i++} - file\\t: ${fileItem.name}`);\n   *   }\n   *   for (const dirItem of response.segment.directoryItems) {\n   *     console.log(`${i++} - directory\\t: ${dirItem.name}`);\n   *   }\n   *   // Gets next marker\n   *   let dirMarker = response.continuationToken;\n   *   // Passing next marker as continuationToken\n   *   iterator = directoryClient\n   *     .listFilesAndDirectories()\n   *     .byPage({ continuationToken: dirMarker, maxPageSize: 4 });\n   *   response = (await iterator.next()).value;\n   *   // Prints 10 file and directory names\n   *   for (const fileItem of response.segment.fileItems) {\n   *     console.log(`${i++} - file\\t: ${fileItem.name}`);\n   *   }\n   *   for (const dirItem of response.segment.directoryItems) {\n   *     console.log(`${i++} - directory\\t: ${dirItem.name}`);\n   *   }\n   * ```\n   *\n   * @param {DirectoryListFilesAndDirectoriesOptions} [options] Options to list files and directories operation.\n   * @memberof ShareDirectoryClient\n   * @returns {PagedAsyncIterableIterator<{ kind: \"file\" } & FileItem | { kind: \"directory\" } , DirectoryListFilesAndDirectoriesSegmentResponse>}\n   * An asyncIterableIterator that supports paging.\n   */\n  public listFilesAndDirectories(\n    options: DirectoryListFilesAndDirectoriesOptions = {}\n  ): PagedAsyncIterableIterator<\n    { kind: \"file\" } & FileItem | { kind: \"directory\" } & DirectoryItem,\n    DirectoryListFilesAndDirectoriesSegmentResponse\n  > {\n    // AsyncIterableIterator to iterate over files and directories\n    const iter = this.listFilesAndDirectoriesItems(options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.iterateFilesAndDirectoriesSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  /**\n   * Returns a list of files or directories under the specified share or directory. It lists the\n   * contents only for a single level of the directory hierarchy.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files\n   *\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {DirectoryListFilesAndDirectoriesSegmentOptions} [options] Options to Directory List Files and Directories Segment operation.\n   * @returns {Promise<DirectoryListFilesAndDirectoriesSegmentResponse>} Response data for the Directory List Files and Directories operation.\n   * @memberof ShareDirectoryClient\n   */\n  private async listFilesAndDirectoriesSegment(\n    marker?: string,\n    options: DirectoryListFilesAndDirectoriesSegmentOptions = {}\n  ): Promise<DirectoryListFilesAndDirectoriesSegmentResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-listFilesAndDirectoriesSegment\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.listFilesAndDirectoriesSegment({\n        marker,\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for DirectoryListHandlesResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of the list to be\n   *                          returned with the next list handles operation. The operation returns a\n   *                          marker value within the response body if the list returned was not complete.\n   *                          The marker value may then be used in a subsequent call to request the next\n   *                          set of list items.\n   * @param {DirectoryListHandlesSegmentOptions} [options] Options to list handles operation.\n   * @returns {AsyncIterableIterator<DirectoryListHandlesResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  private async *iterateHandleSegments(\n    marker?: string,\n    options: DirectoryListHandlesSegmentOptions = {}\n  ): AsyncIterableIterator<DirectoryListHandlesResponse> {\n    let listHandlesResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listHandlesResponse = await this.listHandlesSegment(marker, options);\n        marker = listHandlesResponse.continuationToken;\n        yield await listHandlesResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for handles\n   *\n   * @private\n   * @param {DirectoryListHandlesSegmentOptions} [options] Options to list handles operation.\n   * @returns {AsyncIterableIterator<HandleItem>}\n   * @memberof ShareDirectoryClient\n   */\n  private async *listHandleItems(\n    options: DirectoryListHandlesSegmentOptions = {}\n  ): AsyncIterableIterator<HandleItem> {\n    let marker: string | undefined;\n    for await (const listHandlesResponse of this.iterateHandleSegments(marker, options)) {\n      if (listHandlesResponse.handleList) {\n        for (const handle of listHandlesResponse.handleList) {\n          yield handle;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the handles.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the handles in pages.\n   *\n   * @example\n   * ```js\n   *   let i = 1;\n   *   let iter = dirClient.listHandles();\n   *   for await (const handle of iter) {\n   *     console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Generator syntax .next()\n   *   let i = 1;\n   *   let iter = await dirClient.listHandles();\n   *   let handleItem = await iter.next();\n   *   while (!handleItem.done) {\n   *     console.log(`Handle ${i++}: ${handleItem.value.path}, opened time ${handleItem.value.openTime}, clientIp ${handleItem.value.clientIp}`);\n   *     handleItem = await iter.next();\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Example for .byPage()\n   *   // passing optional maxPageSize in the page settings\n   *   let i = 1;\n   *   for await (const response of dirClient.listHandles({ recursive: true }).byPage({ maxPageSize: 20 })) {\n   *     if (response.handleList) {\n   *       for (const handle of response.handleList) {\n   *         console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);\n   *       }\n   *     }\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Passing marker as an argument (similar to the previous example)\n   *   let i = 1;\n   *   let iterator = dirClient.listHandles().byPage({ maxPageSize: 2 });\n   *   let response = await iterator.next();\n   *   // Prints 2 handles\n   *   if (response.value.handleList) {\n   *     for (const handle of response.value.handleList) {\n   *       console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);\n   *     }\n   *   }\n   *   // Gets next marker\n   *   let marker = response.value.continuationToken;\n   *   // Passing next marker as continuationToken\n   *   console.log(`    continuation`);\n   *   iterator = dirClient.listHandles().byPage({ continuationToken: marker, maxPageSize: 10 });\n   *   response = await iterator.next();\n   *   // Prints 2 more handles assuming you have more than four directory/files opened\n   *   if (!response.done && response.value.handleList) {\n   *     for (const handle of response.value.handleList) {\n   *       console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);\n   *     }\n   *   }\n   * ```\n   *\n   * @param {DirectoryListHandlesOptions} [options] Options to list handles operation.\n   * @memberof ShareDirectoryClient\n   * @returns {PagedAsyncIterableIterator<HandleItem, DirectoryListHandlesResponse>}\n   * An asyncIterableIterator that supports paging.\n   */\n  public listHandles(\n    options: DirectoryListHandlesOptions = {}\n  ): PagedAsyncIterableIterator<HandleItem, DirectoryListHandlesResponse> {\n    // an AsyncIterableIterator to iterate over handles\n    const iter = this.listHandleItems(options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.iterateHandleSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  /**\n   * Lists handles for a directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles\n   *\n   * @param {string} [marker] Optional. A string value that identifies the portion of the list to be\n   *                          returned with the next list handles operation. The operation returns a\n   *                          marker value within the response body if the list returned was not complete.\n   *                          The marker value may then be used in a subsequent call to request the next\n   *                          set of list items.\n   * @param {DirectoryListHandlesSegmentOptions} [options={}]\n   * @returns {Promise<DirectoryListHandlesResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  private async listHandlesSegment(\n    marker?: string,\n    options: DirectoryListHandlesSegmentOptions = {}\n  ): Promise<DirectoryListHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-listHandlesSegment\",\n      options.tracingOptions\n    );\n    try {\n      marker = marker === \"\" ? undefined : marker;\n      const response = await this.context.listHandles({\n        marker,\n        ...options,\n        spanOptions\n      });\n\n      // TODO: Protocol layer issue that when handle list is in returned XML\n      // response.handleList is an empty string\n      if ((response.handleList as any) === \"\") {\n        response.handleList = undefined;\n      }\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Force close all handles for a directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {string} [marker] Optional. A string value that identifies the position of handles that will\n   *                          be closed with the next force close handles operation.\n   *                          The operation returns a marker value within the response\n   *                          body if there are more handles to close. The marker value\n   *                          may then be used in a subsequent call to close the next set of handles.\n   * @param {DirectoryForceCloseHandlesSegmentOptions} [options={}]\n   * @returns {Promise<DirectoryForceCloseHandlesResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  private async forceCloseHandlesSegment(\n    marker?: string,\n    options: DirectoryForceCloseHandlesSegmentOptions = {}\n  ): Promise<DirectoryForceCloseHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-forceCloseHandlesSegment\",\n      options.tracingOptions\n    );\n    try {\n      marker = marker === \"\" ? undefined : marker;\n      return this.context.forceCloseHandles(\"*\", {\n        marker,\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Force close all handles for a directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {DirectoryForceCloseHandlesSegmentOptions} [options={}]\n   * @returns {Promise<number>}\n   * @memberof ShareDirectoryClient\n   */\n  public async forceCloseAllHandles(\n    options: DirectoryForceCloseHandlesSegmentOptions = {}\n  ): Promise<number> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-forceCloseAllHandles\",\n      options.tracingOptions\n    );\n    try {\n      let handlesClosed = 0;\n      let marker: string | undefined = \"\";\n\n      do {\n        const response: DirectoryForceCloseHandlesResponse = await this.forceCloseHandlesSegment(\n          marker,\n          { ...options, tracingOptions: { ...options!.tracingOptions, spanOptions } }\n        );\n        marker = response.marker;\n        response.numberOfHandlesClosed && (handlesClosed += response.numberOfHandlesClosed);\n      } while (marker);\n\n      return handlesClosed;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Force close a specific handle for a directory.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} handleId Specific handle ID, cannot be asterisk \"*\".\n   *                          Use forceCloseHandlesSegment() to close all handles.\n   * @param {DirectoryForceCloseHandlesOptions} [options={}]\n   * @returns {Promise<DirectoryForceCloseHandlesResponse>}\n   * @memberof ShareDirectoryClient\n   */\n  public async forceCloseHandle(\n    handleId: string,\n    options: DirectoryForceCloseHandlesOptions = {}\n  ): Promise<DirectoryForceCloseHandlesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareDirectoryClient-forceCloseHandle\",\n      options.tracingOptions\n    );\n    try {\n      if (handleId === \"*\") {\n        throw new RangeError(\n          `Parameter handleID should be a specified handle ID. Use forceCloseHandlesSegment() to close all handles.`\n        );\n      }\n\n      return this.context.forceCloseHandles(handleId, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpResponse, isNode } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  DeleteSnapshotsOptionType,\n  DirectoryCreateResponse,\n  DirectoryDeleteResponse,\n  FileCreateResponse,\n  FileDeleteResponse,\n  ShareCreatePermissionResponse,\n  ShareCreateResponse,\n  ShareCreateSnapshotResponse,\n  ShareDeleteResponse,\n  ShareGetAccessPolicyHeaders,\n  ShareGetPermissionResponse,\n  ShareGetPropertiesResponse,\n  ShareSetAccessPolicyResponse,\n  ShareSetMetadataResponse,\n  ShareSetQuotaResponse,\n  SignedIdentifierModel,\n  ShareGetStatisticsResponseModel\n} from \"./generatedModels\";\nimport { Share } from \"./generated/src/operations\";\nimport { Metadata } from \"./models\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport { URLConstants } from \"./utils/constants\";\nimport {\n  appendToURLPath,\n  setURLParameter,\n  truncatedISO8061Date,\n  extractConnectionStringParts,\n  getShareNameAndPathFromUrl\n} from \"./utils/utils.common\";\nimport {\n  ShareDirectoryClient,\n  DirectoryCreateOptions,\n  DirectoryDeleteOptions\n} from \"./ShareDirectoryClient\";\nimport { FileCreateOptions, FileDeleteOptions, ShareFileClient } from \"./ShareFileClient\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * Options to configure Share - Create operation.\n *\n * @export\n * @interface ShareCreateOptions\n */\nexport interface ShareCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A name-value pair to associate with a file storage object.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof ShareCreateOptions\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Specifies the maximum size of the share, in\n   * gigabytes.\n   *\n   * @type {number}\n   * @memberof ShareCreateOptions\n   */\n  quota?: number;\n}\n\n/**\n * Options to configure Share - Delete operation.\n *\n * @export\n * @interface ShareDeleteMethodOptions\n */\nexport interface ShareDeleteMethodOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareDeleteMethodOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the option\n   * include to delete the base share and all of its snapshots. Possible values\n   * include: 'include'\n   *\n   * @type {DeleteSnapshotsOptionType}\n   * @memberof ShareDeleteMethodOptions\n   */\n  deleteSnapshots?: DeleteSnapshotsOptionType;\n}\n\n/**\n * Options to configure Share - Set Metadata operation.\n *\n * @export\n * @interface ShareSetMetadataOptions\n */\nexport interface ShareSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetMetadataOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Share - Set Access Policy operation.\n *\n * @export\n * @interface ShareSetAccessPolicyOptions\n */\nexport interface ShareSetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Share - Get Access Policy operation.\n *\n * @export\n * @interface ShareGetAccessPolicyOptions\n */\nexport interface ShareGetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Share - Get Properties operation.\n *\n * @export\n * @interface ShareGetPropertiesOptions\n */\nexport interface ShareGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Share - Set Quota operation.\n *\n * @export\n * @interface ShareSetQuotaOptions\n */\nexport interface ShareSetQuotaOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareSetQuotaOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Share - Get Statistics operation.\n *\n * @export\n * @interface ShareGetStatisticsOptions\n */\nexport interface ShareGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetStatisticsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Signed Identifier\n *\n * @export\n * @interface SignedIdentifier\n */\nexport interface SignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} start the date-time the policy is active.\n     */\n    start: Date;\n    /**\n     * @member {string} expiry the date-time the policy expires.\n     */\n    expiry: Date;\n    /**\n     * @member {string} permissions the permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl\n     */\n    permissions: string;\n  };\n}\n\nexport declare type ShareGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & ShareGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ShareGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifierModel[];\n    };\n  };\n\n/**\n * Options to configure Share - Create Snapshot operation.\n *\n * @export\n * @interface ShareCreateSnapshotOptions\n */\nexport interface ShareCreateSnapshotOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreateSnapshotOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A name-value pair to associate with a file storage object.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof ShareCreateOptions\n   */\n  metadata?: { [propertyName: string]: string };\n}\n\n/**\n * Options to configure Share - Create Permission operation.\n *\n * @export\n * @interface ShareCreatePermissionOptions\n */\nexport interface ShareCreatePermissionOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareCreatePermissionOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n/**\n * Options to configure Share - Get Permission operation.\n *\n * @export\n * @interface ShareGetPermissionOptions\n */\nexport interface ShareGetPermissionOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ShareGetPermissionOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Response - Share Get Statistics Operation.\n *\n * @export\n * @interface ShareGetStatisticsResponse\n */\nexport type ShareGetStatisticsResponse = ShareGetStatisticsResponseModel & {\n  /**\n   * @deprecated shareUsage is going to be deprecated. Please use ShareUsageBytes instead.\n   *\n   * The approximate size of the data stored on the share, rounded up to the nearest gigabyte. Note\n   * that this value may not include all recently created or recently resized files.\n   *\n   * @type {number}\n   * @memberof ShareGetStatisticsResponse\n   */\n  shareUsage: number;\n};\n\n/**\n * A ShareClient represents a URL to the Azure Storage share allowing you to manipulate its directories and files.\n *\n * @export\n * @class ShareClient\n */\nexport class ShareClient extends StorageClient {\n  /**\n   * Share operation context provided by protocol layer.\n   *\n   * @private\n   * @type {Share}\n   * @memberof ShareClient\n   */\n  private context: Share;\n  private _shareName: string;\n  public get shareName(): string {\n    return this._shareName;\n  }\n\n  /**\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {string} shareName Share name.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareClient\n   */\n  constructor(connectionString: string, shareName: string, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file share, such as\n   *                     \"https://myaccount.file.core.windows.net/share\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/share?sasString\".\n   * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n   *                                  If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareClient\n   */\n  constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file share, such as\n   *                     \"https://myaccount.file.core.windows.net/share\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.file.core.windows.net/share?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ShareClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrShareName?: Credential | Pipeline | string,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    let url: string;\n    if (credentialOrPipelineOrShareName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrShareName;\n    } else if (credentialOrPipelineOrShareName instanceof Credential) {\n      // (url: string, credential?: Credential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrShareName, options);\n    } else if (\n      !credentialOrPipelineOrShareName &&\n      typeof credentialOrPipelineOrShareName !== \"string\"\n    ) {\n      // (url: string, credential?: Credential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrShareName &&\n      typeof credentialOrPipelineOrShareName === \"string\"\n    ) {\n      // (connectionString: string, shareName: string, options?: StoragePipelineOptions)\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      const shareName = credentialOrPipelineOrShareName;\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(extractedCreds.url, shareName);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(extractedCreds.url, shareName) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for shareName parameter\");\n    }\n    super(url, pipeline);\n    this._shareName = getShareNameAndPathFromUrl(this.url).shareName;\n    this.context = new Share(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new ShareClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base share.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {ShareClient} A new ShareClient object identical to the source but with the specified snapshot timestamp\n   * @memberof ShareClient\n   */\n  public withSnapshot(snapshot: string): ShareClient {\n    return new ShareClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SHARE_SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new share under the specified account. If the share with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-share\n   *\n   * @param {ShareCreateOptions} [options] Options to Share Create operation.\n   * @returns {Promise<ShareCreateResponse>} Response data for the Share Create operation.\n   * @memberof ShareClient\n   */\n  public async create(options: ShareCreateOptions = {}): Promise<ShareCreateResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-create\", options.tracingOptions);\n    try {\n      return this.context.create({\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a ShareDirectoryClient object.\n   *\n   * @param directoryName A directory name\n   * @returns {ShareDirectoryClient} The ShareDirectoryClient object for the given directory name.\n   * @memberof ShareClient\n   */\n  public getDirectoryClient(directoryName: string): ShareDirectoryClient {\n    return new ShareDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(directoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Gets the directory client for the root directory of this share.\n   * Note that the root directory always exists and cannot be deleted.\n   *\n   * @readonly\n   * @type {ShareDirectoryClient} A new ShareDirectoryClient object for the root directory.\n   * @memberof ShareClient\n   */\n  public get rootDirectoryClient(): ShareDirectoryClient {\n    return this.getDirectoryClient(\"\");\n  }\n\n  /**\n   * Creates a new subdirectory under this share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryCreateOptions} [options] Options to Directory Create operation.\n   * @returns {Promise<{ directoryClient: ShareDirectoryClient, directoryCreateResponse: DirectoryCreateResponse }>} Directory creation response data and the corresponding directory client.\n   * @memberof ShareClient\n   */\n  public async createDirectory(\n    directoryName: string,\n    options: DirectoryCreateOptions = {}\n  ): Promise<{\n    directoryClient: ShareDirectoryClient;\n    directoryCreateResponse: DirectoryCreateResponse;\n  }> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createDirectory\", options.tracingOptions);\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      const directoryCreateResponse = await directoryClient.create({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return {\n        directoryClient,\n        directoryCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the specified empty sub directory under this share.\n   * Note that the directory must be empty before it can be deleted.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory\n   *\n   * @param {string} directoryName\n   * @param {DirectoryDeleteOptions} [options] Options to Directory Delete operation.\n   * @returns {Promise<DirectoryDeleteResponse>} Directory deletion response data.\n   * @memberof ShareClient\n   */\n  public async deleteDirectory(\n    directoryName: string,\n    options: DirectoryDeleteOptions = {}\n  ): Promise<DirectoryDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-deleteDirectory\", options.tracingOptions);\n    try {\n      const directoryClient = this.getDirectoryClient(directoryName);\n      return await directoryClient.delete({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new file or replaces a file under the root directory of this share.\n   * Note it only initializes the file with no content.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n   *\n   * @param {string} fileName\n   * @param {number} size Specifies the maximum size in bytes for the file, up to 1 TB.\n   * @param {FileCreateOptions} [options] Options to File Create operation.\n   * @returns {Promise<{ fileClient: ShareFileClient, fileCreateResponse: FileCreateResponse }>} File creation response data and the corresponding file client.\n   * @memberof ShareClient\n   */\n  public async createFile(\n    fileName: string,\n    size: number,\n    options: FileCreateOptions = {}\n  ): Promise<{ fileClient: ShareFileClient; fileCreateResponse: FileCreateResponse }> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createFile\", options.tracingOptions);\n    try {\n      const directoryClient = this.rootDirectoryClient;\n      const fileClient = directoryClient.getFileClient(fileName);\n      const fileCreateResponse = await fileClient.create(size, {\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return {\n        fileClient,\n        fileCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes a file under the root directory of this share from the storage account.\n   * When a file is successfully deleted, it is immediately removed from the storage\n   * account's index and is no longer accessible to clients. The file's data is later\n   * removed from the service during garbage collection.\n   *\n   * Delete File will fail with status code 409 (Conflict) and error code SharingViolation\n   * if the file is open on an SMB client.\n   *\n   * Delete File is not supported on a share snapshot, which is a read-only copy of\n   * a share. An attempt to perform this operation on a share snapshot will fail with 400 (InvalidQueryParameterValue)\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2\n   *\n   * @param {string} directoryName\n   * @param {string} fileName\n   * @param {FileDeleteOptions} [options] Options to File Delete operation.\n   * @returns Promise<FileDeleteResponse> File Delete response data.\n   * @memberof ShareClient\n   */\n  public async deleteFile(\n    fileName: string,\n    options: FileDeleteOptions = {}\n  ): Promise<FileDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-deleteFile\", options.tracingOptions);\n    try {\n      const directoryClient = this.rootDirectoryClient;\n      const fileClient = directoryClient.getFileClient(fileName);\n      return await fileClient.delete({\n        ...options,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties\n   *\n   * @returns {Promise<ShareGetPropertiesResponse>} Response data for the Share Get Properties operation.\n   * @memberof ShareClient\n   */\n  public async getProperties(\n    options: ShareGetPropertiesOptions = {}\n  ): Promise<ShareGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getProperties\", options.tracingOptions);\n    try {\n      return this.context.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified share for deletion. The share and any directories or files\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share\n   *\n   * @param {ShareDeleteMethodOptions} [options] Options to Share Delete operation.\n   * @returns {Promise<ShareDeleteResponse>} Response data for the Share Delete operation.\n   * @memberof ShareClient\n   */\n  public async delete(options: ShareDeleteMethodOptions = {}): Promise<ShareDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-delete\", options.tracingOptions);\n    try {\n      return this.context.deleteMethod({\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified share.\n   *\n   * If no option provided, or no metadata defined in the option parameter, the share\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing directory metadata will be removed.\n   * @param {ShareSetMetadataOptions} [option] Options to Share Set Metadata operation.\n   * @returns {Promise<ShareSetMetadataResponse>} Response data for the Share Set Metadata operation.\n   * @memberof ShareClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: ShareSetMetadataOptions = {}\n  ): Promise<ShareSetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setMetadata\", options.tracingOptions);\n    try {\n      return this.context.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the permissions for the specified share. The permissions indicate\n   * whether share data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-acl\n   *\n   * @param {ShareGetAccessPolicyOptions} [option] Options to Share Get Access Policy operation.\n   * @returns {Promise<ShareGetAccessPolicyResponse>} Response data for the Share Get Access Policy operation.\n   * @memberof ShareClient\n   */\n  public async getAccessPolicy(\n    options: ShareGetAccessPolicyOptions = {}\n  ): Promise<ShareGetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getAccessPolicy\", options.tracingOptions);\n    try {\n      const response = await this.context.getAccessPolicy({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const res: ShareGetAccessPolicyResponse = {\n        _response: response._response,\n        date: response.date,\n        etag: response.etag,\n        lastModified: response.lastModified,\n        requestId: response.requestId,\n        signedIdentifiers: [],\n        version: response.version\n      };\n\n      for (const identifier of response) {\n        res.signedIdentifiers.push({\n          accessPolicy: {\n            expiry: new Date(identifier.accessPolicy!.expiry!),\n            permissions: identifier.accessPolicy!.permissions!,\n            start: new Date(identifier.accessPolicy!.start!)\n          },\n          id: identifier.id\n        });\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the permissions for the specified share. The permissions indicate\n   * whether directories or files in a share may be accessed publicly.\n   *\n   * When you set permissions for a share, the existing permissions are replaced.\n   * If no shareAcl provided, the existing share ACL will be\n   * removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl\n   *\n   * @param {SignedIdentifier[]} [shareAcl] Array of signed identifiers, each having a unique Id and details of access policy.\n   * @param {ShareSetAccessPolicyOptions} [option] Options to Share Set Access Policy operation.\n   * @returns {Promise<ShareSetAccessPolicyResponse>} Response data for the Share Set Access Policy operation.\n   * @memberof ShareClient\n   */\n  public async setAccessPolicy(\n    shareAcl?: SignedIdentifier[],\n    options: ShareSetAccessPolicyOptions = {}\n  ): Promise<ShareSetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setAccessPolicy\", options.tracingOptions);\n    try {\n      const acl: SignedIdentifierModel[] = [];\n      for (const identifier of shareAcl || []) {\n        acl.push({\n          accessPolicy: {\n            expiry: truncatedISO8061Date(identifier.accessPolicy.expiry),\n            permissions: identifier.accessPolicy.permissions,\n            start: truncatedISO8061Date(identifier.accessPolicy.start)\n          },\n          id: identifier.id\n        });\n      }\n\n      return this.context.setAccessPolicy({\n        abortSignal: options.abortSignal,\n        shareAcl: acl,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a read-only snapshot of a share.\n   *\n   * @param {ShareCreateSnapshotOptions} [options={}] Options to Share Create Snapshot operation.\n   * @returns {Promise<ShareCreateSnapshotResponse>} Response data for the Share Create Snapshot operation.\n   * @memberof ShareClient\n   */\n  public async createSnapshot(\n    options: ShareCreateSnapshotOptions = {}\n  ): Promise<ShareCreateSnapshotResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-createSnapshot\", options.tracingOptions);\n    try {\n      return this.context.createSnapshot({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets quota for the specified share.\n   *\n   * @param {number} quotaInGB Specifies the maximum size of the share in gigabytes\n   * @param {ShareSetQuotaOptions} [option] Options to Share Set Quota operation.\n   * @returns {Promise<ShareSetQuotaResponse>} Response data for the Share Get Quota operation.\n   * @memberof ShareClient\n   */\n  public async setQuota(\n    quotaInGB: number,\n    options: ShareSetQuotaOptions = {}\n  ): Promise<ShareSetQuotaResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-setQuota\", options.tracingOptions);\n    try {\n      if (quotaInGB <= 0 || quotaInGB > 5120) {\n        throw new RangeError(\n          `Share quota must be greater than 0, and less than or equal to 5Tib (5120GB)`\n        );\n      }\n      return this.context.setQuota({\n        abortSignal: options.abortSignal,\n        quota: quotaInGB,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to the share.\n   *\n   * @param {ShareGetStatisticsOptions} [option] Options to Share Get Statistics operation.\n   * @returns {Promise<ShareGetStatisticsResponse>} Response data for the Share Get Statistics operation.\n   * @memberof ShareClient\n   */\n  public async getStatistics(\n    options: ShareGetStatisticsOptions = {}\n  ): Promise<ShareGetStatisticsResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getStatistics\", options.tracingOptions);\n    try {\n      const response = await this.context.getStatistics({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const GBBytes = 1024 * 1024 * 1024;\n      return { ...response, shareUsage: Math.ceil(response.shareUsageBytes / GBBytes) };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a file permission (a security descriptor) at the share level.\n   * The created security descriptor can be used for the files/directories in the share.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-permission\n   *\n   * @param {ShareCreatePermissionOptions} [options] Options to Share Create Permission operation.\n   * @param filePermission File permission described in the SDDL\n   */\n  public async createPermission(\n    filePermission: string,\n    options: ShareCreatePermissionOptions = {}\n  ): Promise<ShareCreatePermissionResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareClient-createPermission\",\n      options.tracingOptions\n    );\n    try {\n      return this.context.createPermission(\n        {\n          permission: filePermission\n        },\n        {\n          abortSignal: options.abortSignal,\n          spanOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the Security Descriptor Definition Language (SDDL) for a given file permission key\n   * which indicates a security descriptor.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-permission\n   *\n   * @param {ShareGetPermissionOptions} [options] Options to Share Create Permission operation.\n   * @param filePermissionKey File permission key which indicates the security descriptor of the permission.\n   */\n  public async getPermission(\n    filePermissionKey: string,\n    options: ShareGetPermissionOptions = {}\n  ): Promise<ShareGetPermissionResponse> {\n    const { span, spanOptions } = createSpan(\"ShareClient-getPermission\", options.tracingOptions);\n    try {\n      return this.context.getPermission(filePermissionKey, {\n        aborterSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  FileServiceProperties,\n  ListSharesIncludeType,\n  ShareCreateResponse,\n  ShareDeleteResponse,\n  ServiceGetPropertiesResponse,\n  ServiceSetPropertiesResponse,\n  ServiceListSharesSegmentResponse,\n  ShareItem\n} from \"./generatedModels\";\nimport { Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport { ShareClient, ShareCreateOptions, ShareDeleteMethodOptions } from \"./ShareClient\";\nimport { appendToURLPath, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { Credential } from \"./credentials/Credential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { isNode } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@azure/core-tracing\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * Options to configure List Shares Segment operation.\n *\n * @interface ServiceListSharesSegmentOptions\n */\ninterface ServiceListSharesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of entries to\n   * return. If the request does not specify maxResults, or specifies a value\n   * greater than 5,000, the server will return up to 5,000 items.\n   *\n   * @type {number}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  maxResults?: number;\n\n  /**\n   * Include this parameter to\n   * specify one or more datasets to include in the response.\n   *\n   * @type {ListSharesIncludeType[]}\n   * @memberof ServiceListSharesSegmentOptions\n   */\n  include?: ListSharesIncludeType[];\n}\n\n/**\n * Options to configure List Shares operation.\n *\n * @export\n * @interface ServiceListSharesOptions\n */\nexport interface ServiceListSharesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListSharesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only entries whose\n   * name begins with the specified prefix.\n   *\n   * @type {string}\n   * @memberof ServiceListSharesOptions\n   */\n  prefix?: string;\n\n  /**\n   * Specifies that share snapshots should be included in the enumeration. Share Snapshots are listed from oldest to newest in the response.\n   *\n   * @type {boolean}\n   * @memberof ServiceListSharesOptions\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies that share metadata should be returned in the response.\n   *\n   * @type {boolean}\n   * @memberof ServiceListSharesOptions\n   */\n  includeSnapshots?: boolean;\n}\n\n/**\n * Options to configure File Service - Get Properties operation.\n *\n * @export\n * @interface ServiceGetPropertiesOptions\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure File Service - Set Properties operation.\n *\n * @export\n * @interface ServiceSetPropertiesOptions\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * A ShareServiceClient represents a URL to the Azure Storage File service allowing you\n * to manipulate file shares.\n *\n * @export\n * @class ShareServiceClient\n */\nexport class ShareServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   *\n   * @private\n   * @type {Service}\n   * @memberof ShareServiceClient\n   */\n  private serviceContext: Service;\n\n  /**\n   *\n   * Creates an instance of ShareServiceClient from connection string.\n   *\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @returns {ShareServiceClient} A new ShareServiceClient from the given connection string.\n   * @memberof ShareServiceClient\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    options?: StoragePipelineOptions\n  ): ShareServiceClient {\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new ShareServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new ShareServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of ShareServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file service, such as\n   *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n   * @param {Credential} [credential] Such as AnonymousCredential or StorageSharedKeyCredential.\n   *                                  If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ShareServiceClient\n   */\n  constructor(url: string, credential?: Credential, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ShareServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage file service, such as\n   *                     \"https://myaccount.file.core.windows.net\". You can Append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.file.core.windows.net?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ShareServiceClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?: Credential | Pipeline,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (credentialOrPipeline instanceof Credential) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a ShareClient object.\n   *\n   * @param shareName Name of a share.\n   * @returns {ShareClient} The ShareClient object for the given share name.\n   * @memberof ShareServiceClient\n   */\n  public getShareClient(shareName: string): ShareClient {\n    return new ShareClient(appendToURLPath(this.url, shareName), this.pipeline);\n  }\n\n  /**\n   * Creates a Share.\n   *\n   * @param {string} shareName\n   * @param {ShareCreateOptions} [options]\n   * @returns {Promise<{ shareCreateResponse: ShareCreateResponse, shareClient: ShareClient }>} Share creation response and the corresponding share client.\n   * @memberof ShareServiceClient\n   */\n  public async createShare(\n    shareName: string,\n    options: ShareCreateOptions = {}\n  ): Promise<{ shareCreateResponse: ShareCreateResponse; shareClient: ShareClient }> {\n    const { span, spanOptions } = createSpan(\n      \"ShareServiceClient-createShare\",\n      options.tracingOptions\n    );\n    try {\n      const shareClient = this.getShareClient(shareName);\n      const shareCreateResponse = await shareClient.create({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        shareCreateResponse,\n        shareClient\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a Share.\n   *\n   * @param {string} shareName\n   * @param {ShareDeleteMethodOptions} [options]\n   * @returns {Promise<ShareDeleteResponse>} Share deletion response and the corresponding share client.\n   * @memberof ShareServiceClient\n   */\n  public async deleteShare(\n    shareName: string,\n    options: ShareDeleteMethodOptions = {}\n  ): Promise<ShareDeleteResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareServiceClient-deleteShare\",\n      options.tracingOptions\n    );\n    try {\n      const shareClient = this.getShareClient(shareName);\n      return await shareClient.delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of a storage account’s file service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties}\n   *\n   * @param {ServiceGetPropertiesOptions} [options={}] Options to Get Properties operation.\n   * @returns {Promise<ServiceGetPropertiesResponse>} Response data for the Get Properties operation.\n   * @memberof ShareServiceClient\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareServiceClient-getProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s file service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties}\n   *\n   * @param {FileServiceProperties} properties\n   * @param {ServiceSetPropertiesOptions} [options={}] Options to Set Properties operation.\n   * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.\n   * @memberof ShareServiceClient\n   */\n  public async setProperties(\n    properties: FileServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareServiceClient-setProperties\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceListSharesSegmentResponses\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of shares to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all shares remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.\n   * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}\n   * @memberof ShareServiceClient\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListSharesSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListSharesSegmentResponse> {\n    let listSharesSegmentResponse;\n    do {\n      listSharesSegmentResponse = await this.listSharesSegment(marker, options);\n      marker = listSharesSegmentResponse.continuationToken;\n      yield await listSharesSegmentResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for share items\n   *\n   * @private\n   * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.\n   * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}\n   * @memberof ShareServiceClient\n   */\n  private async *listItems(\n    options: ServiceListSharesSegmentOptions = {}\n  ): AsyncIterableIterator<ShareItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.shareItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the shares\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the shares in pages.\n   *\n   * @example\n   * ```js\n   *   let i = 1;\n   *   for await (const share of serviceClient.listShares()) {\n   *     console.log(`Share ${i++}: ${share.name}`);\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Generator syntax .next()\n   *   let i = 1;\n   *   let iter = await serviceClient.listShares();\n   *   let shareItem = await iter.next();\n   *   while (!shareItem.done) {\n   *     console.log(`Share ${i++}: ${shareItem.value.name}`);\n   *     shareItem = await iter.next();\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Example for .byPage()\n   *   // passing optional maxPageSize in the page settings\n   *   let i = 1;\n   *   for await (const response of serviceClient.listShares().byPage({ maxPageSize: 20 })) {\n   *     if (response.shareItems) {\n   *       for (const share of response.shareItems) {\n   *         console.log(`Share ${i++}: ${share.name}`);\n   *       }\n   *     }\n   *   }\n   * ```\n   *\n   * @example\n   * ```js\n   *   // Passing marker as an argument (similar to the previous example)\n   *   let i = 1;\n   *   let iterator = serviceClient.listShares().byPage({ maxPageSize: 2 });\n   *   let response = (await iterator.next()).value;\n   *   // Prints 2 share names\n   *   if (response.shareItems) {\n   *     for (const share of response.shareItems) {\n   *       console.log(`Share ${i++}: ${share.name}`);\n   *     }\n   *   }\n   *   // Gets next marker\n   *   let marker = response.continuationToken;\n   *   // Passing next marker as continuationToken\n   *   iterator = serviceClient.listShares().byPage({ continuationToken: marker, maxPageSize: 10 });\n   *   response = (await iterator.next()).value;\n   *   // Prints 10 share names\n   *   if (response.shareItems) {\n   *     for (const share of response.shareItems) {\n   *       console.log(`Share ${i++}: ${share.name}`);\n   *     }\n   *   }\n   * ```\n   *\n   * @param {ServiceListSharesOptions} [options] Options to list shares operation.\n   * @memberof ShareServiceClient\n   * @returns {PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse>}\n   * An asyncIterableIterator that supports paging.\n   */\n  public listShares(\n    options: ServiceListSharesOptions = {}\n  ): PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse> {\n    const include: ListSharesIncludeType[] = [];\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n\n    const updatedOptions: ServiceListSharesSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include: include } : {})\n    };\n\n    // AsyncIterableIterator to iterate over queues\n    const iter = this.listItems(updatedOptions);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...updatedOptions\n        });\n      }\n    };\n  }\n\n  /**\n   * Gets the properties of a storage account's File service, including properties for Storage\n   * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.\n   *\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list to be returned with the next list operation. The operation\n   *                          returns a marker value within the response body if the list returned was\n   *                          not complete. The marker value may then be used in a subsequent call to\n   *                          request the next set of list items. The marker value is opaque to the\n   *                          client.\n   * @param {ServiceListSharesSegmentOptions} [options={}] Options to List Shares Segment operation.\n   * @returns {Promise<ServiceListSharesSegmentResponse>} Response data for the List Shares Segment operation.\n   * @memberof ShareServiceClient\n   */\n  private async listSharesSegment(\n    marker?: string,\n    options: ServiceListSharesSegmentOptions = {}\n  ): Promise<ServiceListSharesSegmentResponse> {\n    const { span, spanOptions } = createSpan(\n      \"ShareServiceClient-listSharesSegment\",\n      options.tracingOptions\n    );\n    try {\n      return this.serviceContext.listSharesSegment({\n        marker,\n        ...options,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"names":["getHeaderKey","headerName","toLowerCase","rawHeaders","this","_headersMap","set","HttpHeaders","headerValue","name","value","toString","header","undefined","result","contains","headerKey","headers","push","headerNames","headersArray","i","length","headerValues","JSON","stringify","toJson","encodeByteArray","str","String","fromCharCode","btoa","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","getRandomValues","crypto","bind","window","msCrypto","rnds8","module","rnds","Array","r","Math","random","byteToHex","substr","buf","offset","bth","join","options","rng","ii","bytesToUuid","Constants","coreHttpVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","HttpConstants","HttpVerbs","PUT","GET","DELETE","POST","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","RETRY_AFTER","USER_AGENT","validUuidRegex","isNode","process","version","versions","node","stripResponse","response","strippedResponse","body","bodyAsText","status","stripRequest","request","strippedRequest","clone","remove","generateUuid","uuidv4","delay","t","Promise","resolve","setTimeout","validateISODuration","replaceAll","searchValue","replaceValue","split","modelMappers","isXML","Serializer","mapper","objectName","failValidation","constraintName","constraintValue","Error","constraints","_a","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","RegExp","match","some","item","ar","indexOf","object","payload","mapperType","type","serializedName","isConstant","defaultValue","required","nullable","validateConstraints","typeName","valueOf","uuid","test","objectType","ArrayBuffer","isView","Blob","serializeBasicTypes","allowedValues","serializeEnumType","Date","isNaN","parse","toISOString","substring","toUTCString","d","floor","getTime","dateToUnixTime","utils.isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","replace","bufferToBase64Url","serializeBase64UrlType","serializer","isArray","elementType","element","tempArray","serialize","serializeSequenceType","valueType","tempDictionary","Object","keys","_i","key","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","_b","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","paths_1","_c","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","serializedValue","xmlIsAttribute","$","additionalPropertiesMapper","additionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","startsWith","deserialize","unwrappedProperty","propertyInstance","res","paths_2","_d","isAdditionalProperty","responsePropName","_f","_e","includes","isSpecialXmlProperty","deserializeCompositeType","parseFloat","n","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","prop","classes","partialclass","subwords_1","charAt","modelProperties","className","modelMapper","propertyName","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","MapperType","o","o_1","strEnum","url","method","query","streamResponseBody","withCredentials","abortSignal","timeout","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","formData","WebResource","pathTemplate","validMethods","toUpperCase","pathTemplate_1","pathParameters_1","baseUrl","url_1","endsWith","slice","segments","forEach","pathParamName","pathParam","stringifiedPathParameters","encodeURIComponent","skipUrlEncoding","queryParameters","queryParams","queryParamName","queryParam","get","disableClientRequestId","bodyIsStream","serializationMapper","mappers","disableJsonStringifyOnBody","spanOptions","operationSpec","shouldDeserialize","operationResponseGetter","extendStatics","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","s","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","then","__generator","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","__values","m","__read","error","__spread","concat","__await","__asyncGenerator","asyncIterator","q","a","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","listenersMap","WeakMap","abortedMap","AbortSignal","has","_type","listener","listeners","index","splice","event","signal","aborted","onabort","HttpPipelineLogLevel","message","_super","_this","parentSignals","_signal","parentSignals_1","parentSignal","abort","addEventListener","AbortController","ms","timer","unref","code","statusCode","RestError","XhrHttpClient","xhr","XMLHttpRequest","AbortError","listener_1","readyState","DONE","removeEventListener","addProgressListener","upload","requestForm_1","FormData","appendFormValue","append","formKey","formValue","j","contentType","open","setRequestHeader","responseType","send","HEADERS_RECEIVED","blobBody","rejectOnTerminalEvent","parseHeaders","responseText","rawEvent","loadedBytes","loaded","responseHeaders","headerLines_1","getAllResponseHeaders","trim","line","REQUEST_SEND_ERROR","URLQuery","_rawQuery","parameterName","parameterValue","newValue","parameterStrings","parameterValue_1","parameterValueElement","text","currentState","currentCharacter","URLBuilder","scheme","_scheme","host","_host","port","_port","path","_path","currentPath","getPath","_query","queryParameterName","queryParameterValue","startState","tokenizer","URLTokenizer","token","current","tokenPath","any","setScheme","getScheme","setHost","getHost","setPort","getPort","setPath","setQuery","getQuery","URLToken","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","readWhile","character","characterCode","isAlphaNumericCharacter","readWhileLetterOrDigit","schemeOrHost","readUntilCharacter","getCurrentCharacter","peekCharacters","nextSchemeOrHost","nextCharacter","nextHost","nextPort","nextPath","readRemaining","nextQuery","charactersToPeek","endIndex","condition","terminatingCharacters","_nextPolicy","_options","BaseRequestPolicy","logLevel","shouldLog","log","_logger","RequestPolicyOptions","OFF","minimumLogLevel","logFunction","console","debug","enabledString","debugEnvVariable","env","DEBUG","enabledNamespaces","skippedNamespaces","debuggers","enable","namespaces","wildcard","namespaceList","map","ns","namespaceList_1","debuggers_1","enabled","namespace","skippedNamespaces_1","enabledNamespaces_1","createDebugger","newDebugger","args","destroy","debugObj","extend","azureLogLevel","disable","registeredLoggers","Set","logLevelFromEnv","AZURE_LOG_LEVEL","AzureLogger","AZURE_LOG_LEVELS","isAzureLogLevel","level","registeredLoggers_1","logger","shouldEnable","setLogLevel","levelMap","verbose","info","warning","createClientLogger","clientRootLogger","patchLogMethod","createLogger","parent","child","add","defaultAllowedHeaderNames","defaultAllowedQueryParameters","logPolicy","loggingOptions","nextPolicy","LogPolicy","allowedHeaderNames","allowedQueryParameters","logRequest","sendRequest","logResponse","sanitize","sanitizeHeaders","sanitizeUrl","sanitizeQuery","sanitizeObject","k","allowedKeys","accessor","sanitized","urlBuilder","queryString","getPathStringFromParameter","parameter","getPathStringFromParameterPath","parameterPath","isStreamOperation","responses","operationResponse","bodyMapper","Stream","doc","document","implementation","createDocument","parser","DOMParser","parseXML","opts","dom","parseFromString","errorNS","parserErrors","getElementsByTagNameNS","innerHTML","throwIfError","obj","includeRoot","domToObject","childNodes","err","getElementsByTagName","namespaceURI","ignored","childNodeCount","firstChildNode","onlyChildTextValue","nodeType","Node","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","asElementWithAttributes","attr","nodeName","childObject","XMLSerializer","stringifyXML","content","buildNode","elementName","elem","createElement","textContent","obj_1","arrayElem","buildAttributes","setNamedItem","_h","_g","appendChild","rootName","serializeToString","attrs","createAttribute","deserializationPolicy","deserializationContentTypes","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","jsonContentTypes","json","xmlContentTypes","xml","errorHandler","msg","errCode","PARSE_ERROR","text_1","contentComponents","component","parsedBody","catch","parsedResponse","shouldDeserializeResponse","expectedStatusCodes","hasNoExpectedStatusCodes","responseSpec","getOperationResponse","valueToDeserialize","Sequence","restError","utils.stripRequest","utils.stripResponse","httpMethod","headersMapper","parsedHeaders","defaultResponseSpec","default","initialErrorMessage","parsedErrorResponse","defaultResponseBodyMapper","internalError","defaultError","deserializeResponseBody","RetryMode","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","retryCount","retryInterval","maxRetryInterval","isNumber","ExponentialRetryPolicy","retry","policy","retryData","requestError","innerError","incrementDelta","pow","min","updateRetryData","isAborted","shouldRetry","utils\n            .delay","generateClientRequestIdPolicy","requestIdHeaderName","GenerateClientRequestIdPolicy","_requestIdHeaderName","utils.generateUuid","getDefaultUserAgentKey","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","navigator","telemetryInfo","keySeparator","valueSeparator","runtimeInfo","platformSpecificData","oscpu","platform","UserAgentPolicy","addUserAgentHeader","maxRetries","RedirectPolicy","handleRedirect","currentRetries","locationHeader","builder","_retryTimeout","RPRegistrationPolicy","rpName","matchRes","checkRPNotRegisteredError","urlPrefix","extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","getRequestEssentials","getRegistrationStatus","registrationState","utils\n                .delay","registerRP","registrationStatus","registerIfNeeded","reuseUrlToo","TokenRefreshBufferMs","tokenRefreshBufferMs","ExpiringAccessTokenCache","accessToken","cachedToken","now","expiresOnTimestamp","credential","scopes","tokenCache","BearerTokenAuthenticationPolicy","webResource","getToken","tracingOptions","getCachedToken","setCachedToken","QueryCollectionFormat","minRetryInterval","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","SystemErrorRetryPolicy","boundedRandDelta","currentCount","proxyNotSupportedInBrowser","ProxyPolicy","_request","_handleResponse","_defaultResponseHandler","ThrottlingRetryPolicy","httpRequest","httpResponse","retryAfterHeader","delayInMs","parseRetryAfterHeader","retryAfterInSeconds","Number","parseDateRetryAfterHeader","diff","authenticationProvider","SigningPolicy","signRequest","nextRequest","DefaultKeepAliveOptions","keepAliveOptions","KeepAlivePolicy","NoOpSpan","spanId","traceId","_endTime","_key","_value","_attributes","_name","_spanContext","_status","NoOpBinaryFormat","_buffer","NoOpHttpTextFormat","_format","_carrier","NoOpTracer","_span","fn","target","cache","CanonicalCode","SpanKind","TraceFlags","GLOBAL_TRACER_VERSION","GLOBAL_TRACER_SYMBOL","for","loadTracerCache","globalObj","self","existingCache","tracer","getCache","getTracer","VERSION","TracingPolicy","span","startSpan","spanContext","context","traceParentHeader","missingFields","hexFlags","traceFlags","UNSAMPLED","getTraceParentHeader","traceState","end","err_1","credentials","requestPolicyFactories","bearerTokenPolicyFactory","serviceClient","_withCredentials","_httpClient","httpClient","DefaultHttpClient","_requestPolicyOptions","httpPipelineLogger","authPolicyFactory","bearerTokenAuthenticationPolicy","baseUri","factories","generateClientRequestIdHeader","clientRequestIdHeaderName","userAgentHeaderName","getValueOrFunctionResult","userAgentHeaderValue","userAgent","userAgentData","maximumRetries","redirectPolicy","retryTimeout","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","systemErrorRetryPolicy","getDefaultProxySettings","createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","ServiceClient","validateRequestProperties","prepare","httpPipeline","operationArguments","callback","requestUrl","appendPath","urlParameters","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","skipEncoding","queryParameter","collectionFormat","Multi","setQueryParameter","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","requestBody","requestBodyParameterPathString","isStream","utils.prepareXMLRootList","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","rawResponse","sendRequestError","error_1","details","flattenResponse","error_2","cb","_response","defaultValueCreator","getOperationArgumentValueFromParameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyPath","propertyPathString","parameterPathPart","addOperationResponse","defineProperty","readableStreamBody","modelProperties_1","isPageableResponse","arrayResponse","il","jl","__spreadArrays","HandleItem","handleId","fileId","parentId","sessionId","clientIp","openTime","lastReconnectTime","ListFilesAndDirectoriesSegmentResponse","serviceEndpoint","shareName","shareSnapshot","directoryPath","prefix","marker","maxResults","segment","continuationToken","ListHandlesResponse","handleList","ListSharesResponse","shareItems","StorageError","ShareStats","shareUsageBytes","Permission","permission","FileServiceProperties","hourMetrics","minuteMetrics","cors","ServiceSetPropertiesHeaders","requestId","errorCode","ServiceGetPropertiesHeaders","ServiceListSharesSegmentHeaders","ShareCreateHeaders","etag","lastModified","date","ShareGetPropertiesHeaders","metadata","quota","ShareDeleteHeaders","ShareCreateSnapshotHeaders","snapshot","ShareCreatePermissionHeaders","filePermissionKey","ShareGetPermissionHeaders","ShareSetQuotaHeaders","ShareSetMetadataHeaders","ShareGetAccessPolicyHeaders","ShareSetAccessPolicyHeaders","ShareGetStatisticsHeaders","DirectoryCreateHeaders","isServerEncrypted","fileAttributes","fileCreatedOn","fileLastWriteOn","fileChangeOn","fileParentId","DirectoryGetPropertiesHeaders","DirectoryDeleteHeaders","DirectorySetPropertiesHeaders","DirectorySetMetadataHeaders","DirectoryListFilesAndDirectoriesSegmentHeaders","DirectoryListHandlesHeaders","DirectoryForceCloseHandlesHeaders","numberOfHandlesClosed","FileCreateHeaders","FileDownloadHeaders","contentLength","contentRange","contentMD5","contentEncoding","cacheControl","contentDisposition","contentLanguage","acceptRanges","copyCompletedOn","copyStatusDescription","copyId","copyProgress","copySource","copyStatus","fileContentMD5","FileGetPropertiesHeaders","fileType","FileDeleteHeaders","FileSetHTTPHeadersHeaders","FileSetMetadataHeaders","FileUploadRangeHeaders","FileUploadRangeFromURLHeaders","xMsContentCrc64","FileGetRangeListHeaders","fileContentLength","FileStartCopyHeaders","FileAbortCopyHeaders","FileListHandlesHeaders","FileForceCloseHandlesHeaders","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","includeAPIs","retentionPolicy","days","properties","comp0","comp1","comp3","comp4","comp5","comp7","comp8","comp9","fileCacheControl","fileContentDisposition","fileContentEncoding","fileContentLanguage","fileContentType","filePermission","filePermissionKey1","include","coreHttp.QueryCollectionFormat","Csv","range0","range1","recursive","restype0","restype1","restype2","timeoutInSeconds","client","Service","sendOperationRequest","setPropertiesOperationSpec","getPropertiesOperationSpec","listSharesSegmentOperationSpec","coreHttp.Serializer","Mappers","Parameters.url","Parameters.timeoutInSeconds","Parameters.restype0","Parameters.comp0","Parameters.version","Mappers.FileServiceProperties","202","Mappers.ServiceSetPropertiesHeaders","Mappers.StorageError","200","Mappers.ServiceGetPropertiesHeaders","Parameters.prefix","Parameters.marker","Parameters.maxResults","Parameters.include","Parameters.comp1","Mappers.ListSharesResponse","Mappers.ServiceListSharesSegmentHeaders","start","expiry","permissions","id","accessPolicy","Share","createOperationSpec","deleteMethodOperationSpec","createSnapshotOperationSpec","createPermissionOperationSpec","getPermissionOperationSpec","setQuotaOperationSpec","setMetadataOperationSpec","getAccessPolicyOperationSpec","setAccessPolicyOperationSpec","getStatisticsOperationSpec","Parameters.restype1","Parameters.metadata","Parameters.quota","201","Mappers.ShareCreateHeaders","Parameters.shareSnapshot","Mappers.ShareGetPropertiesHeaders","Mappers.ShareDeleteHeaders","Mappers.ShareCreateSnapshotHeaders","Parameters.comp3","Mappers.Permission","Mappers.ShareCreatePermissionHeaders","Mappers.ShareGetPermissionHeaders","Mappers.ShareSetQuotaHeaders","Parameters.comp4","Mappers.ShareSetMetadataHeaders","Parameters.comp5","Mappers.ShareGetAccessPolicyHeaders","Mappers.ShareSetAccessPolicyHeaders","Mappers.ShareStats","Mappers.ShareGetStatisticsHeaders","directoryItems","fileItems","Directory","listFilesAndDirectoriesSegmentOperationSpec","listHandlesOperationSpec","forceCloseHandlesOperationSpec","Parameters.restype2","Parameters.filePermission","Parameters.filePermissionKey1","Parameters.fileAttributes","Parameters.fileCreatedOn","Parameters.fileLastWriteOn","Mappers.DirectoryCreateHeaders","Mappers.DirectoryGetPropertiesHeaders","Mappers.DirectoryDeleteHeaders","Mappers.DirectorySetPropertiesHeaders","Mappers.DirectorySetMetadataHeaders","Mappers.ListFilesAndDirectoriesSegmentResponse","Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders","Parameters.comp7","Parameters.recursive","Mappers.ListHandlesResponse","Mappers.DirectoryListHandlesHeaders","Parameters.comp8","Parameters.handleId","Mappers.DirectoryForceCloseHandlesHeaders","File","downloadOperationSpec","setHTTPHeadersOperationSpec","range","fileRangeWrite","uploadRangeOperationSpec","sourceRange","uploadRangeFromURLOperationSpec","getRangeListOperationSpec","startCopyOperationSpec","abortCopyOperationSpec","Parameters.fileContentType","Parameters.fileContentEncoding","Parameters.fileContentLanguage","Parameters.fileCacheControl","Parameters.fileContentMD5","Parameters.fileContentDisposition","Mappers.FileCreateHeaders","Parameters.range0","Mappers.FileDownloadHeaders","206","Mappers.FileGetPropertiesHeaders","Mappers.FileDeleteHeaders","Mappers.FileSetHTTPHeadersHeaders","Mappers.FileSetMetadataHeaders","Parameters.comp9","Parameters.range1","Parameters.contentLength","Mappers.FileUploadRangeHeaders","Parameters.copySource","Mappers.FileUploadRangeFromURLHeaders","Mappers.FileGetRangeListHeaders","Mappers.FileStartCopyHeaders","204","Mappers.FileAbortCopyHeaders","Mappers.FileListHandlesHeaders","Mappers.FileForceCloseHandlesHeaders","SERVICE_VERSION","URLConstants","FORCE_BROWSER_NO_CACHE","SHARE_SNAPSHOT","SIGNATURE","TIMEOUT","StorageFileLoggingAllowedHeaderNames","StorageFileLoggingAllowedQueryParameters","escapeURLPath","urlParsed","getValueInConnString","connectionString","argument","elements_1","extractConnectionStringParts","fileEndpoint","search","defaultEndpointsProtocol","accountName","accountKey","Buffer","from","endpointSuffix","protocol","kind","getAccountNameFromUrl","accountSas","appendToURLPath","setURLParameter","truncatedISO8061Date","withMilliseconds","dateString","timeInMs","aborter","abortError","abortHandler","clearTimeout","lastIndexOf","getShareNameAndPathFromUrl","urlWithoutSAS","shareNameAndFilePath","decodeURIComponent","filePathOrDirectoryPath","StorageRetryPolicyType","StorageBrowserPolicy","StorageBrowserPolicyFactory","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","tryTimeoutInMs","RETRY_ABORT_ERROR","retryOptions","StorageRetryPolicy","attemptSendRequest","secondaryHas404","attempt","newRequest","isPrimaryRetry","logf","INFO","ERROR","retriableErrors_1","retriableError","_level","_message","delayTimeInMs","FIXED","StorageRetryPolicyFactory","telemetry","TelemetryPolicy","telemetryString","TelemetryPolicyFactory","Pipeline","newPipeline","pipelineOptions","userAgentOptions","packageName","packageVersion","defaultUserAgent","coreHttp.getDefaultUserAgentValue","fileRangeWriteFromUrl","coreHttp.ServiceClient","pipeline","storageClientContext","StorageClientContext","toServiceClientOptions","FileSystemAttributes","RangeError","fileSystemAttributes","attributes_1","readonly","hidden","system","none","temporary","offline","directory","archive","notContentIndexed","noScrubData","validateFilePermissionOptions","validateAndSetDefaultsForFileAndDirectoryCreateCommonOptions","creationTime","lastWriteTime","validateAndSetDefaultsForFileAndDirectorySetPropertiesCommonOptions","fileAttributesToString","fileCreationTimeToString","time","fileLastWriteTimeToString","exports","rangeToString","count","ReflectOwnKeys","Credential","R","Reflect","ReflectApply","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","EventEmitter","init","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","that","_addListener","prepend","events","existing","newListener","emit","unshift","warned","w","emitter","warn","onceWrapper","fired","removeListener","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","enumerable","arg","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","handler","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","BatchStates","concurrency","Good","Batch","operation","operations","actives","completed","parallelExecute","nextOperation","readable","bufferSize","maxBuffers","outgoingHandler","encoding","BufferScheduler","data","appendUnresolvedData","resolveData","pause","isStreamEnd","isError","outgoing","triggerOutgoingHandlers","executingOutgoingHandlers","unresolvedLength","shiftBufferFromUnresolvedDataArray","unresolvedDataArray","merged","allocUnsafe","incoming","numBuffers","fill","triggerOutgoingHandler","bufferLength","reuseBuffer","streamToBuffer","stream","pos","chunk","read","chunkLength","readStreamToLocalFile","rs","file","ws","fs.createWriteStream","STREAM_DEBUG","pipe","fsStat","util.promisify","CredentialPolicy","AnonymousCredential","AnonymousCredentialPolicy","createSpan","operationName","CLIENT","setAttribute","newOptions","isRecordingEvents","credentialOrPipeline","ShareFileClient","_shareName","size","fileHttpHeaders","setStatus","UNKNOWN","rangeGetContentMD5","downloadFullFile","download","onProgress","res_1","maxRetryRequests","updatedOptions","e_1","getProperties","setHTTPHeaders","deleteMethod","setMetadata","uploadRange","optionalbody","sourceURL","sourceOffset","destOffset","uploadRangeFromURL","sourceModifiedAccessConditions","sourceConditions","getRangeList","originalResponse","rangeList","filter","e_2","startCopy","abortCopy","browserData","browserBlob_1","uploadSeekableBlob","blobFactory","rangeSize","numBlocks_1","transferProgress_1","batch","addOperation","do","e_3","filePath","uploadResetableStream","e_4","streamFactory","numBlocks_2","transferProgress_2","e_5","transferProgress_3","chunkEnd","maxRetryRequestsPerRange","e_6","transferProgress_4","ceil","e_7","fileDownloadStream","e_8","listHandles","e_9","listHandlesSegment","listHandlesResponse","iterateHandleSegments","iter","listHandleItems","settings","maxPageSize","forceCloseHandles","handlesClosed","forceCloseHandlesSegment","e_11","StorageClient","ShareDirectoryClient","setProperties","subDirectoryName","directoryName","directoryClient","getDirectoryClient","directoryCreateResponse","delete","fileName","fileClient","getFileClient","fileCreateResponse","listFilesAndDirectoriesSegment","listFilesAndDirectoriesResponse","iterateFilesAndDirectoriesSegments","listFilesAndDirectoriesItems","urlOrConnectionString","credentialOrPipelineOrShareName","extractedCreds","ShareClient","rootDirectoryClient","getAccessPolicy","signedIdentifiers","response_1","identifier","shareAcl","acl","setAccessPolicy","createSnapshot","quotaInGB","setQuota","getStatistics","shareUsage","createPermission","getPermission","aborterSignal","serviceContext","ShareServiceClient","shareClient","getShareClient","shareCreateResponse","listSharesSegment","listSharesSegmentResponse","listSegments","includeMetadata","includeSnapshots","listItems"],"mappings":"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"}