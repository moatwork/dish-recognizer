// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { __assign, __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __extends, __generator, __values } from "tslib";
import { Service } from "./generated/src/operations";
import { newPipeline, Pipeline } from "./Pipeline";
import { StorageClient } from "./StorageClient";
import { ShareClient } from "./ShareClient";
import { appendToURLPath, extractConnectionStringParts } from "./utils/utils.common";
import { Credential } from "./credentials/Credential";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import "@azure/core-paging";
import { isNode } from "@azure/core-http";
import { CanonicalCode } from "@azure/core-tracing";
import { createSpan } from "./utils/tracing";
/**
 * A ShareServiceClient represents a URL to the Azure Storage File service allowing you
 * to manipulate file shares.
 *
 * @export
 * @class ShareServiceClient
 */
var ShareServiceClient = /** @class */ (function (_super) {
    __extends(ShareServiceClient, _super);
    function ShareServiceClient(url, credentialOrPipeline, options) {
        var _this = this;
        var pipeline;
        if (credentialOrPipeline instanceof Pipeline) {
            pipeline = credentialOrPipeline;
        }
        else if (credentialOrPipeline instanceof Credential) {
            pipeline = newPipeline(credentialOrPipeline, options);
        }
        else {
            // The second parameter is undefined. Use anonymous credential.
            pipeline = newPipeline(new AnonymousCredential(), options);
        }
        _this = _super.call(this, url, pipeline) || this;
        _this.serviceContext = new Service(_this.storageClientContext);
        return _this;
    }
    /**
     *
     * Creates an instance of ShareServiceClient from connection string.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @returns {ShareServiceClient} A new ShareServiceClient from the given connection string.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.fromConnectionString = function (connectionString, options) {
        var extractedCreds = extractConnectionStringParts(connectionString);
        if (extractedCreds.kind === "AccountConnString") {
            if (isNode) {
                var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                var pipeline = newPipeline(sharedKeyCredential, options);
                return new ShareServiceClient(extractedCreds.url, pipeline);
            }
            else {
                throw new Error("Account connection string is only supported in Node.js environment");
            }
        }
        else if (extractedCreds.kind === "SASConnString") {
            var pipeline = newPipeline(new AnonymousCredential(), options);
            return new ShareServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
        }
        else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        }
    };
    /**
     * Creates a ShareClient object.
     *
     * @param shareName Name of a share.
     * @returns {ShareClient} The ShareClient object for the given share name.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.getShareClient = function (shareName) {
        return new ShareClient(appendToURLPath(this.url, shareName), this.pipeline);
    };
    /**
     * Creates a Share.
     *
     * @param {string} shareName
     * @param {ShareCreateOptions} [options]
     * @returns {Promise<{ shareCreateResponse: ShareCreateResponse, shareClient: ShareClient }>} Share creation response and the corresponding share client.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.createShare = function (shareName, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions, shareClient, shareCreateResponse, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createSpan("ShareServiceClient-createShare", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        shareClient = this.getShareClient(shareName);
                        return [4 /*yield*/, shareClient.create(__assign(__assign({}, options), { tracingOptions: __assign(__assign({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        shareCreateResponse = _b.sent();
                        return [2 /*return*/, {
                                shareCreateResponse: shareCreateResponse,
                                shareClient: shareClient
                            }];
                    case 3:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: CanonicalCode.UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a Share.
     *
     * @param {string} shareName
     * @param {ShareDeleteMethodOptions} [options]
     * @returns {Promise<ShareDeleteResponse>} Share deletion response and the corresponding share client.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.deleteShare = function (shareName, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions, shareClient, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createSpan("ShareServiceClient-deleteShare", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        shareClient = this.getShareClient(shareName);
                        return [4 /*yield*/, shareClient.delete(__assign(__assign({}, options), { tracingOptions: __assign(__assign({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_2 = _b.sent();
                        span.setStatus({
                            code: CanonicalCode.UNKNOWN,
                            message: e_2.message
                        });
                        throw e_2;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the properties of a storage account’s file service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties}
     *
     * @param {ServiceGetPropertiesOptions} [options={}] Options to Get Properties operation.
     * @returns {Promise<ServiceGetPropertiesResponse>} Response data for the Get Properties operation.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.getProperties = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions;
            return __generator(this, function (_b) {
                _a = createSpan("ShareServiceClient-getProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                try {
                    return [2 /*return*/, this.serviceContext.getProperties({
                            abortSignal: options.abortSignal,
                            spanOptions: spanOptions
                        })];
                }
                catch (e) {
                    span.setStatus({
                        code: CanonicalCode.UNKNOWN,
                        message: e.message
                    });
                    throw e;
                }
                finally {
                    span.end();
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Sets properties for a storage account’s file service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties}
     *
     * @param {FileServiceProperties} properties
     * @param {ServiceSetPropertiesOptions} [options={}] Options to Set Properties operation.
     * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.setProperties = function (properties, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions;
            return __generator(this, function (_b) {
                _a = createSpan("ShareServiceClient-setProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                try {
                    return [2 /*return*/, this.serviceContext.setProperties(properties, {
                            abortSignal: options.abortSignal,
                            spanOptions: spanOptions
                        })];
                }
                catch (e) {
                    span.setStatus({
                        code: CanonicalCode.UNKNOWN,
                        message: e.message
                    });
                    throw e;
                }
                finally {
                    span.end();
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for ServiceListSharesSegmentResponses
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list of shares to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all shares remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.
     * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.listSegments = function (marker, options) {
        if (options === void 0) { options = {}; }
        return __asyncGenerator(this, arguments, function listSegments_1() {
            var listSharesSegmentResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await(this.listSharesSegment(marker, options))];
                    case 1:
                        listSharesSegmentResponse = _a.sent();
                        marker = listSharesSegmentResponse.continuationToken;
                        return [4 /*yield*/, __await(listSharesSegmentResponse)];
                    case 2: return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                    case 3: return [4 /*yield*/, _a.sent()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (marker) return [3 /*break*/, 0];
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for share items
     *
     * @private
     * @param {ServiceListSharesSegmentOptions} [options] Options to list shares operation.
     * @returns {AsyncIterableIterator<ServiceListSharesSegmentResponse>}
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.listItems = function (options) {
        if (options === void 0) { options = {}; }
        return __asyncGenerator(this, arguments, function listItems_1() {
            var marker, _a, _b, segment, e_3_1;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 13]);
                        _a = __asyncValues(this.listSegments(marker, options));
                        _d.label = 1;
                    case 1: return [4 /*yield*/, __await(_a.next())];
                    case 2:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                        segment = _b.value;
                        return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(segment.shareItems)))];
                    case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5: return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _d.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to list all the shares
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the shares in pages.
     *
     * @example
     * ```js
     *   let i = 1;
     *   for await (const share of serviceClient.listShares()) {
     *     console.log(`Share ${i++}: ${share.name}`);
     *   }
     * ```
     *
     * @example
     * ```js
     *   // Generator syntax .next()
     *   let i = 1;
     *   let iter = await serviceClient.listShares();
     *   let shareItem = await iter.next();
     *   while (!shareItem.done) {
     *     console.log(`Share ${i++}: ${shareItem.value.name}`);
     *     shareItem = await iter.next();
     *   }
     * ```
     *
     * @example
     * ```js
     *   // Example for .byPage()
     *   // passing optional maxPageSize in the page settings
     *   let i = 1;
     *   for await (const response of serviceClient.listShares().byPage({ maxPageSize: 20 })) {
     *     if (response.shareItems) {
     *       for (const share of response.shareItems) {
     *         console.log(`Share ${i++}: ${share.name}`);
     *       }
     *     }
     *   }
     * ```
     *
     * @example
     * ```js
     *   // Passing marker as an argument (similar to the previous example)
     *   let i = 1;
     *   let iterator = serviceClient.listShares().byPage({ maxPageSize: 2 });
     *   let response = (await iterator.next()).value;
     *   // Prints 2 share names
     *   if (response.shareItems) {
     *     for (const share of response.shareItems) {
     *       console.log(`Share ${i++}: ${share.name}`);
     *     }
     *   }
     *   // Gets next marker
     *   let marker = response.continuationToken;
     *   // Passing next marker as continuationToken
     *   iterator = serviceClient.listShares().byPage({ continuationToken: marker, maxPageSize: 10 });
     *   response = (await iterator.next()).value;
     *   // Prints 10 share names
     *   if (response.shareItems) {
     *     for (const share of response.shareItems) {
     *       console.log(`Share ${i++}: ${share.name}`);
     *     }
     *   }
     * ```
     *
     * @param {ServiceListSharesOptions} [options] Options to list shares operation.
     * @memberof ShareServiceClient
     * @returns {PagedAsyncIterableIterator<ShareItem, ServiceListSharesSegmentResponse>}
     * An asyncIterableIterator that supports paging.
     */
    ShareServiceClient.prototype.listShares = function (options) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        var include = [];
        if (options.includeMetadata) {
            include.push("metadata");
        }
        if (options.includeSnapshots) {
            include.push("snapshots");
        }
        var updatedOptions = __assign(__assign({}, options), (include.length > 0 ? { include: include } : {}));
        // AsyncIterableIterator to iterate over queues
        var iter = this.listItems(updatedOptions);
        return _a = {
                /**
                 * @member {Promise} [next] The next method, part of the iteration protocol
                 */
                next: function () {
                    return iter.next();
                }
            },
            /**
             * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol
             */
            _a[Symbol.asyncIterator] = function () {
                return this;
            },
            /**
             * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time
             */
            _a.byPage = function (settings) {
                if (settings === void 0) { settings = {}; }
                return _this.listSegments(settings.continuationToken, __assign({ maxResults: settings.maxPageSize }, updatedOptions));
            },
            _a;
    };
    /**
     * Gets the properties of a storage account's File service, including properties for Storage
     * Analytics metrics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list to be returned with the next list operation. The operation
     *                          returns a marker value within the response body if the list returned was
     *                          not complete. The marker value may then be used in a subsequent call to
     *                          request the next set of list items. The marker value is opaque to the
     *                          client.
     * @param {ServiceListSharesSegmentOptions} [options={}] Options to List Shares Segment operation.
     * @returns {Promise<ServiceListSharesSegmentResponse>} Response data for the List Shares Segment operation.
     * @memberof ShareServiceClient
     */
    ShareServiceClient.prototype.listSharesSegment = function (marker, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions;
            return __generator(this, function (_b) {
                _a = createSpan("ShareServiceClient-listSharesSegment", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                try {
                    return [2 /*return*/, this.serviceContext.listSharesSegment(__assign(__assign({ marker: marker }, options), { spanOptions: spanOptions }))];
                }
                catch (e) {
                    span.setStatus({
                        code: CanonicalCode.UNKNOWN,
                        message: e.message
                    });
                    throw e;
                }
                finally {
                    span.end();
                }
                return [2 /*return*/];
            });
        });
    };
    return ShareServiceClient;
}(StorageClient));
export { ShareServiceClient };
//# sourceMappingURL=ShareServiceClient.js.map